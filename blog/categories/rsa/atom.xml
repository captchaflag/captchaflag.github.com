<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: RSA | CaptchaFlag CTF Team]]></title>
  <link href="http://www.captchaflag.com/blog/categories/rsa/atom.xml" rel="self"/>
  <link href="http://www.captchaflag.com/"/>
  <updated>2014-10-28T16:35:43-04:00</updated>
  <id>http://www.captchaflag.com/</id>
  <author>
    <name><![CDATA[Captchaflag]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - wiener]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-wiener/"/>
    <updated>2014-10-23T20:42:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-wiener</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>It's gold rush time! The New York Herald just reported about the Californian gold rush. We know a sheriff there is hiring guys to help him fill his own pockets. We know he already has a deadful amount of gold in his secret vault. However, it is protected by a secret only he knows.
When new deputies apply for the job, they get their own secret, but that only provies entry to a vault of all deputy sheriffs. No idiot would store their stuff in this vault.
But maybe we can find a way to gain access to the sheriff's vault? Have a go at it: </p>

<p>nc wildwildweb.fluxfingers.net 1426</p>

<p>You might also need <a href="https://wildwildweb.fluxfingers.net/static/chals/wiener_38ff175d336b9c75fbf1b77290978015.py">this</a>.</p>

<h2>Analysis</h2>

<p>When you connect to wildwildweb.fluxfingers.net on port 1426, you are greeted by a service that accepts commands to list users, register, and get a user's public key. If you register with 'r', the service creates a user for you and then discloses that the &quot;locker&quot; is on port 1427. The wording hints that the goal for this challenge is to ssh into port 1427 as the sheriff. Using the 'p' command, you can get the sheriff's public key:</p>

<p><code>
ssh-rsa AAAAB3NzaC1yc2EAAAEAAoX41P4pzhFgXt8iGGiTfBtwrjduNNZ/m7eMKaLXnKRqYOoCpw/bQOgFtdhUJVlosrHwQ5Y9zWFxTOT8XHDsxNdWrRaF1mHbOdFagB0cOC7ZegSPD4XZCcgRaR0//iYutwzNH6fboap5E58hwUs9/pU0BJHP86WmrpYEMpV4259bzBkuFqpi9oeoA45gwBUY+MyqC+/ladra6OSTEKejw73c9jf8guU0C+9BBbUztqUxiVZQsu+jN9lMenZEd2e1EpoEvPPNlbtg9r/RoSZYUwEkrYxv1xZSuODrSC/MR1BDtBDfxP5fvGvaCMphJEKEpKtbMRvGad8MdTUmp5waVwAAAQACrrY39hUq/U+zot0WWuydW0XnDSuC54o1P3oXUYWdGW9Wy20RcAGV8Qaac9nlcQlQuBQimrTFVJODwsh+DNl/kEdIoTAkANx2tCWR2hfauvlGqq8WQPEyevFr5FuIMGA5R6nDMJyk1syfGivP2s8oX7wvcw5RWuHZNZHM2Y9cRnTsSlhZJkcA9wCk9Nz3w8NbvFefbr+A2jPGwR9oZVCSu+Zw1SJbjlcdWW/kJttZpqBar3ezkXRIss+8s71ke0Z3KxMTP8aP+ryzdSNyuUmjcEuFlt9KRPCFOT7iv4D485NxntlKs0iFL2peDEk++jLaW/YBBjoDO+r3O6R9ggXb sheriff
</code></p>

<p>This challenge also provided the source for the service listening on port 1426. Here is the important function:</p>

<p>```python
def create<em>parameters(size=2048):
    p = get</em>prime(size // 2)
    q = get<em>prime(size // 2)
    N = p * q
    phi</em>N = (p - 1) * (q - 1)
    while True:
    d = prng.getrandbits(size // 5)
    e = int(gmpy.invert(d, phi<em>N))
    if (e * d) % phi</em>N == 1:
    break</p>

<pre><code>assert test_key(N, e, d)
return N, e, d, p, q
</code></pre>

<p>```</p>

<p>This function generates the public and private keys used in RSA. The public key consists of the modulus <em>N</em> and public exponent <em>e</em>, and the private key consists of the modulus <em>N</em> and private exponent <em>d</em>. 
The trick to this challenge is to notice that the private exponent <em>d</em> generated by this function is small relative to <em>N</em>. The vulnerability is in the challenge's name: Wiener's attack on RSA.</p>

<h2>Solution</h2>

<p>Now we know that the goal is to ssh into port 1427 on wildwildweb.fluxfingers.net as the sheriff. We can accomplish this by calculating his private exponent <em>d</em> using Wiener's attack and generating his private key.</p>

<p>First, we extracted <em>N</em> and <em>e</em> from the sheriff's public key:</p>

<p><code>bash
ssh-keygen -f sheriffkey -e -m PKCS8 | openssl rsa -pubin -text
Public-Key: (2042 bit)
Modulus:
02:ae:b6:37:f6:15:2a:fd:4f:b3:a2:dd:16:5a:ec:
9d:5b:45:e7:0d:2b:82:e7:8a:35:3f:7a:17:51:85:
9d:19:6f:56:cb:6d:11:70:01:95:f1:06:9a:73:d9:
e5:71:09:50:b8:14:22:9a:b4:c5:54:93:83:c2:c8:
7e:0c:d9:7f:90:47:48:a1:30:24:00:dc:76:b4:25:
91:da:17:da:ba:f9:46:aa:af:16:40:f1:32:7a:f1:
6b:e4:5b:88:30:60:39:47:a9:c3:30:9c:a4:d6:cc:
9f:1a:2b:cf:da:cf:28:5f:bc:2f:73:0e:51:5a:e1:
d9:35:91:cc:d9:8f:5c:46:74:ec:4a:58:59:26:47:
00:f7:00:a4:f4:dc:f7:c3:c3:5b:bc:57:9f:6e:bf:
80:da:33:c6:c1:1f:68:65:50:92:bb:e6:70:d5:22:
5b:8e:57:1d:59:6f:e4:26:db:59:a6:a0:5a:af:77:
b3:91:74:48:b2:cf:bc:b3:bd:64:7b:46:77:2b:13:
13:3f:c6:8f:fa:bc:b3:75:23:72:b9:49:a3:70:4b:
85:96:df:4a:44:f0:85:39:3e:e2:bf:80:f8:f3:93:
71:9e:d9:4a:b3:48:85:2f:6a:5e:0c:49:3e:fa:32:
da:5b:f6:01:06:3a:03:3b:ea:f7:3b:a4:7d:82:05:
db
Exponent:
02:85:f8:d4:fe:29:ce:11:60:5e:df:22:18:68:93:
7c:1b:70:ae:37:6e:34:d6:7f:9b:b7:8c:29:a2:d7:
9c:a4:6a:60:ea:02:a7:0f:db:40:e8:05:b5:d8:54:
25:59:68:b2:b1:f0:43:96:3d:cd:61:71:4c:e4:fc:
5c:70:ec:c4:d7:56:ad:16:85:d6:61:db:39:d1:5a:
80:1d:1c:38:2e:d9:7a:04:8f:0f:85:d9:09:c8:11:
69:1d:3f:fe:26:2e:b7:0c:cd:1f:a7:db:a1:aa:79:
13:9f:21:c1:4b:3d:fe:95:34:04:91:cf:f3:a5:a6:
ae:96:04:32:95:78:db:9f:5b:cc:19:2e:16:aa:62:
f6:87:a8:03:8e:60:c0:15:18:f8:cc:aa:0b:ef:e5:
69:da:da:e8:e4:93:10:a7:a3:c3:bd:dc:f6:37:fc:
82:e5:34:0b:ef:41:05:b5:33:b6:a5:31:89:56:50:
b2:ef:a3:37:d9:4c:7a:76:44:77:67:b5:12:9a:04:
bc:f3:cd:95:bb:60:f6:bf:d1:a1:26:58:53:01:24:
ad:8c:6f:d7:16:52:b8:e0:eb:48:2f:cc:47:50:43:
b4:10:df:c4:fe:5f:bc:6b:da:08:ca:61:24:42:84:
a4:ab:5b:31:1b:c6:69:df:0c:75:35:26:a7:9c:1a:
57
</code></p>

<p>We wrote a script to convert those values into integers and used <a href="https://github.com/pablocelayes/rsa-wiener-attack">https://github.com/pablocelayes/rsa-wiener-attack</a> to recover <em>d</em>. 
Note: We had to increase the recursion limit with sys.setrecursionlimit(10000).</p>

<p>Here are the values we found for <em>N</em>, <em>e</em>, and <em>d</em>:
<code>python
modulus
public exponent
private exponent 724746542590011388513367385228693742222740657137483753552318433232068370338961145215199994578740789016238655979015224570943
</code></p>

<p>We then used <a href="https://gist.github.com/ddddavidee/b34c2b67757a54ce75cb">https://gist.github.com/ddddavidee/b34c2b67757a54ce75cb</a> to recover <em>p</em> and <em>q</em>:
<code>python
p = 12001304129015480165432875074437607933493850611499879464845243350215176144760883615322622081442653872645865326992384034722586201972392183010813439352778246403016897976571514715418700569567613729681273931557848857971070286176848136118602099586101089743239644367344468295964691411425416652519752140536869089101
q = 28216117316929874067495888027767527011360661622486842768414059951572932145196930641365509243766454218518793508840136548374994021850853203018205749779390383366761851772055038753940967432004901699256177783249460134792699230632136386268348434203012426963129659057781488950062703849444443906614331812260961682887
</code>
Now that we had all of the parameters, we used a function from the provided source code to generate the private key:
<code>python
def asn1_encode_priv_key(N, e, d, p, q):
    key = pyasn1_modules.rfc3447.RSAPrivateKey()
    dp = d % (p - 1)
    dq = d % (q - 1)
    qInv = gmpy.invert(q, p)
    assert (qInv * q) % p == 1
    key.setComponentByName('version', 0)
    key.setComponentByName('modulus', N)
    key.setComponentByName('publicExponent', e)
    key.setComponentByName('privateExponent', d)
    key.setComponentByName('prime1', p)
    key.setComponentByName('prime2', q)
    key.setComponentByName('exponent1', dp)
    key.setComponentByName('exponent2', dq)
    key.setComponentByName('coefficient', qInv)
    ber_key = pyasn1.codec.ber.encoder.encode(key)
    pem_key = base64.b64encode(ber_key).decode(&quot;ascii&quot;)
    out = ['-----BEGIN RSA PRIVATE KEY-----']
    out += [pem_key[i:i + 64] for i in range(0, len(pem_key), 64)]
    out.append('-----END RSA PRIVATE KEY-----\n')
    out = &quot;\n&quot;.join(out)
    return out.encode(&quot;ascii&quot;)
</code></p>

<p>Finally, we could ssh into the server and grab the flag:
<code>bash
ssh -i sheriff_priv sheriff@wildwildweb.fluxfingers.net -p 1427
Woah look how much gold that old croaker has: flag{TONS_OF_GOLD_SUCH_WOW_MUCH_GLOW}
Connection to wildwildweb.fluxfingers.net closed.
</code></p>
]]></content>
  </entry>
  
</feed>
