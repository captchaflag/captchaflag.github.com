<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: stego | CaptchaFlag CTF Team]]></title>
  <link href="http://www.captchaflag.com/blog/categories/stego/atom.xml" rel="self"/>
  <link href="http://www.captchaflag.com/"/>
  <updated>2014-10-28T17:44:42-04:00</updated>
  <id>http://www.captchaflag.com/</id>
  <author>
    <name><![CDATA[Captchaflag]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - Hidden in ρlaιn sιght]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-hidden-in-plain-sight/"/>
    <updated>2014-10-23T13:23:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-hidden-in-plain-sight</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>At our software development company, one of the top developers left in anger. He told us that he had hidden a backdoor in our node.js server application – he thinks that we can't find it even if we try. I have attached the source code of our fileserver. After registration, you can log in, upload files and create access tokens for your files that others can use to retrieve them. He must have added some way to retrieve files without permission. And we don't have version control, so we can't just check his last commits. We have read the source code multiple times, but just can't figure out how he did it. Maybe he just lied? Can you help us and demonstrate how the backdoor works? We have uploaded a file to &quot;testuser/files/flag.txt&quot; – please try to retrieve it. </p>

<p>Connect to https://wildwildweb.fluxfingers.net:1409/. Note that all your files will be purged every 5 minutes. </p>

<p>You can download the service code here: <a href="https://wildwildweb.fluxfingers.net/static/chals/hiddeninplainsight_7a1f79aab159ace6e4486dc73bd24cc8.js">Download</a></p>

<h2>Analysis</h2>

<p>Downloading the code gives us:</p>

<p>```js</p>

<h1>!/usr/bin/env node</h1>

<p>// npm install express@3.18.0</p>

<p>var fs = require('fs')
var crypto = require('crypto')
var express = require('express')
var app = express()
app.listen(1409)
app.use(require('express').bodyParser({uploadDir: _<em>dirname+'/upload</em>tmp/'}))</p>

<p>var HMAC<em>SECRET = ''
for (var i=0; i&lt;20; i++) {
  HMAC</em>SΕCRET = HMAC_SECRET + (Math.random()+'').substr(2)
}</p>

<p>function hmac<em>sign(path) {
  var hmac = crypto.createHmac('sha256', HMAC</em>SECRET)
  hmac.update(path)
  return hmac.digest('hex')
}</p>

<p>app.get('/', function(req, res) {
  res.send('&lt;!DOCTYPE html&gt;<html><head><title>docstore</title></head><body><ul>'
          +  '<li><a href="register">register</a></li>'
          +  '<li><a href="upload">upload a file</a></li>'
          +  '<li><a href="link">generate an access link</a></li>'
          +'</ul></body></html>')
})</p>

<p>function user_possible(user) {
  return /^[a-zA-Z]+$/.test(user)
}</p>

<p>function auth<em>ok(user, pass, cb) {
  if (!user</em>possible(user)) return cb(false)
  fs.readFile('users/'+user+'/pass', {encoding:'utf8'}, function(err, real<em>pass) {
    if (err) return cb(false) // e.g. if user doesn't exist
    cb(pass === real</em>pass)
  })
}</p>

<p>app.get('/register', function(req, res) {
  res.send('&lt;!DOCTYPE html&gt;<html><head><title>register</title></head><body><form method="POST">'+
    'user: <input type="text" name="user"><br>pass: <input type="password" name="pass"><br><button type="submit">register</button>'+
    '</form></body></html>')
})</p>

<p>app.post('/register', function(req, res) {
  if (!req.body) return res.send('body missing? wtf?')
  var user = req.body.user, pass = req.body.pass;
  if (typeof user !== 'string' || typeof pass !== 'string') {
    return res.send('bad request')
  }</p>

<p>if (!user_possible(user)) {
    return res.send('bad username')
  }</p>

<p>var userdir = 'users/'+user+'/'
  fs.mkdir(userdir, function(err) {
    if (err) return res.send('unable to create user: '+e.code)
    fs.writeFile(userdir+'pass', pass, function(err) {
      if (err) throw err
      fs.mkdir(userdir+'files', function(err) {
        if (err) throw err
        res.redirect('/')
      })
    })
  })
})</p>

<p>app.get('/upload', function(req, res) {
  res.send('&lt;!DOCTYPE html&gt;<html><head><title>upload</title></head><body><form method="POST" enctype="multipart/form-data">'+
    'user: <input type="text" name="user"><br>pass: <input type="password" name="pass"><br><input type="file" name="file"><br><button type="submit">upload</button>'+
    '</form></body></html>')
})</p>

<p>function sanitize<em>filename(f) {
  f = f.replace(/[^a-zA-Z0-9</em>.-]/g, '')
  if (f.length == 0 || f[0] == '.') f = '_'+f
  return f
}</p>

<p>app.post('/upload', function(req, res) {
  if (!req.body) return res.send('body missing? wtf?')
  var user = req.body.user, pass = req.body.pass, file = req.files.file;
  if (typeof user !== 'string' || typeof pass !== 'string' || typeof file !== 'object') {
    return res.send('bad request')
  }</p>

<p>auth<em>ok(user, pass, function(is</em>ok) {
    if (!is<em>ok) return res.send('bad auth')
    var filename = sanitize</em>filename(file.name)
    fs.rename(file.path, 'users/'+user+'/files/'+filename, function(err) {
      if (err) return res.send('error: unable to rename')
      res.send('file was stored with name '+filename)
    })
  })
})</p>

<p>app.get('/link', function(req, res) {
  res.send('&lt;!DOCTYPE html&gt;<html><head><title>generate a link</title></head><body><form method="POST" enctype="multipart/form-data">'+
    'user: <input type="text" name="user"><br>pass: <input type="password" name="pass"><br>file: <input type="text" name="file"><br><button type="submit">generate link</button>'+
    '</form></body></html>')
})</p>

<p>app.post('/link', function(req, res) {
  if (!req.body) return res.send('body missing? wtf?')
  var user = req.body.user, pass = req.body.pass, file = req.body.file;
  if (typeof user !== 'string' || typeof pass !== 'string' || typeof file !== 'string') {
    return res.send('bad request')
  }
  file = sanitize_filename(file)</p>

<p>auth<em>ok(user, pass, function(is</em>ok) {
    if (!is<em>ok) return res.send('bad auth')
    file = file.replace(/[^a-zA-Z0-9</em>.-]/g, '')
    res.redirect('/files/'+user+'/'+file+'/'+hmac_sign(user+'/'+file))
  })
})</p>

<p>app.get('/files/:user/:file/:signature', function(req, res) {
  var user = req.params.user, file = req.params.file, signature = req.params.signature
  if (!user<em>possible(user)) return res.send('bad user')
  if (sanitize</em>filename(file) !== file) return res.send('bad filename')
  if (hmac_sign(user+'/'+file) !== signature) return res.send('bad signature')
  res.set('Content-Type', 'text/plain')
  res.sendfile('users/'+user+'/files/'+file)
})
```</p>

<h2>Analysis</h2>

<p>The trick here is in the for loop where <code>HMAC_SECRET</code> is being updated, they
actually use unicode to hide the fact that a different variable gets updated.
So the actual secret is empty.</p>

<p><code>
$ echo -n &quot;testuser/flag.txt&quot; | openssl dgst -sha256 -hmac &quot;&quot;
(stdin)= 4a332c7f27909f85a529393cea72301393f84cf5908aa2538137776f78624db4
$
</code></p>

<p>So, the url is</p>

<p><code>
https://wildwildweb.fluxfingers.net:1409/files/testuser/flag.txt/4a332c7f27909f85a529393cea72301393f84cf5908aa2538137776f78624db4
</code>
<code>
flag{unicode_stego_is_best_stego}
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack You Too - Stego 300]]></title>
    <link href="http://www.captchaflag.com/blog/2013/01/02/stego-300/"/>
    <updated>2013-01-02T18:53:00-05:00</updated>
    <id>http://www.captchaflag.com/blog/2013/01/02/stego-300</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>What can be hidden here?</p>

<p>File: <a href="http://hackyou.ctf.su/files/stego_300.jpg">stego_300.jpg</a></p>

<h2>Analysis</h2>

<p>Let's see about any hidden or appended data:
<code>
root@bt:~/Desktop# stegdetect stego_300.jpg 
stego_300.jpg : skipped (false positive likely) appended(1827)&lt;[nonrandom][data][Rar!.....s......]&gt; 
</code></p>

<p>Okay, looks like a RAR file might be appended to the end of the image.
```
stacks0n@stacks0n-MacBook-Pro:~/Desktop&gt; binwalk stego_300.jpg                           </p>

<h2>DECIMAL         HEX             DESCRIPTION</h2>

<p>112861          0x1B8DD         RAR archive data [NSRL|RAR]
443990          0x6C656         7-zip archive data, version 0.3</p>

<p>stacks0n@stacks0n-MacBook-Pro:~/Desktop&gt; dd if=stego_300.jpg bs=1 skip=112861 of=stego300.rar
```</p>

<p>Sure enough. When extracting stego300.rar we see two files:
```
root@bt:~/Desktop# unrar l stego300.rar </p>

<p>UNRAR 3.90 beta 2 freeware      Copyright (c) 1993-2009 Alexander Roshal</p>

<p>Archive stego300.rar</p>

<h2> Name             Size   Packed Ratio  Date   Time     Attr      CRC   Meth Ver</h2>

<p>DO<em>NOT</em>LOOKING_HERE.mp3   331005   331005 100% 04-12-12 21:21  ...H.A.   CDBAD2DD m0d 2.0</p>

<h2> Flag.7z           198      198 100% 04-12-12 22:18  .....A.   EC3A9712 m0b 2.9</h2>

<pre><code>2           331203   331203 100%
</code></pre>

<p>```
* DO<em>NOT</em>LOOKING_HERE.mp3 is a clip from Suzanne Vega's &quot;Tom's Diner&quot;
* Flag.7z is password protected</p>

<p>Next step is to look into mp3 steganography, which likely contains the passphrase to extract the flag. Looking around I find <a href="http://www.petitcolas.net/fabien/steganography/mp3stego/">MP3Stego</a> tools which should help. When running, it requires a passphrase so let's try the text on the original image 'MUSTNOTHACK'</p>

<p>```
C:\Users\stacks0n\Desktop&gt; Decode.exe -P MUSTNOTHACK -X DO<em>NOT</em>LOOKING<em>HERE.mp3
MP3StegoEncoder 1.1.17
See README file for copyright info
Input file = 'DO</em>NOT<em>LOOKING</em>HERE.mp3'  output file = 'DO<em>NOT</em>LOOKING<em>HERE.mp3.pcm'
Will attempt to extract hidden information. Output: DO</em>NOT<em>LOOKING</em>HERE.mp3.txt
the bit stream file DO<em>NOT</em>LOOKING<em>HERE.mp3 is a BINARY file
HDR: s=FFF, id=1, l=3, ep=off, br=9, sf=0, pd=1, pr=0, m=3, js=0, c=0, o=0, e=0
alg.=MPEG-1, layer=III, tot bitrate=128, sfrq=44.1
mode=single-ch, sblim=32, jsbd=32, ch=1
[Frame  791]Avg slots/frame = 417.434; b/smp = 2.90; br = 127.839 kbps
Decoding of &quot;DO</em>NOT<em>LOOKING</em>HERE.mp3&quot; is finished
The decoded PCM output file name is &quot;DO<em>NOT</em>LOOKING_HERE.mp3.pcm&quot;</p>

<p>C:\Users\stacks0n\Desktop&gt; type DO<em>NOT</em>LOOKING_HERE.mp3.txt
INEVERASKEDABOUTTHIS!
```</p>

<p>This gives us the passphrase needed to open up Flag.7z.</p>

<p>```
root@bt:~/Desktop# 7z x Flag.7z </p>

<p>7-Zip 9.04 beta  Copyright (c) 1999-2009 Igor Pavlov  2009-05-30
p7zip Version 9.04 (locale=en_US.UTF-8,Utf16=on,HugeFiles=on,1 CPU)</p>

<p>Processing archive: Flag.7z</p>

<p>Enter password (will not be echoed) :</p>

<p>Extracting  K3y</p>

<p>Everything is Ok</p>

<p>Size:       13
Compressed: 198</p>

<p>root@bt:~/Desktop# cat K3y 
VERYEASYSTEGO
```</p>

<h2>Solution</h2>

<p><code>
VERYEASYSTEGO
</code></p>
]]></content>
  </entry>
  
</feed>
