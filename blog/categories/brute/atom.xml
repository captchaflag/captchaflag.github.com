<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: brute | CaptchaFlag CTF Team]]></title>
  <link href="http://www.captchaflag.com/blog/categories/brute/atom.xml" rel="self"/>
  <link href="http://www.captchaflag.com/"/>
  <updated>2014-10-28T16:35:43-04:00</updated>
  <id>http://www.captchaflag.com/</id>
  <author>
    <name><![CDATA[Captchaflag]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2013 - Flux Archive Part 2]]></title>
    <link href="http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-flux-archive-part-2/"/>
    <updated>2013-10-27T15:46:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-flux-archive-part-2</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>These sneaky humans! They do not just use one passcode, but two to enter the Festzelt. We heard that the passcode is hidden inside the archive file. It seems that the FluxFingers overrated their programming skill and had a major logical flaw in the archive file structure. Some of the drunken Oktoberfest humans found it and abused this flaw in order to transfer hidden messages. Find this passcode so we can finally drink their beer!</p>

<h2>Analysis</h2>

<p>Somewhere in the archive there is some hidden data. Playing around with the tool, I notice that when we delete archives the file size does not change. It must just leave the file entry data but delete the file itself.</p>

<p>```bash
% ./archiv -a myarchive.arc 123456 test </p>

<p>FluxArchiv - solved security since 2007!
Written by sqall - leading expert in social-kernel-web-reverse-engineering.</p>

<p>Archiv myarchive.arc successfully created.</p>

<p>Progress:
0% ... 10% ... 20% ... 30% ... 40% ... 50% ... 60% ... 70% ... 80% ... 90% ... 100%</p>

<p>File test successfully added to the archiv.</p>

<p>% ls -al myarchive.arc
-rw-rw-r-- 1 stacks0n stacks0n 2112 Oct 23 20:39 myarchive.arc</p>

<p>% ./archiv -d myarchive.arc 123456 test </p>

<p>FluxArchiv - solved security since 2007!
Written by sqall - leading expert in social-kernel-web-reverse-engineering.</p>

<p>File test successfully deleted from the archiv.</p>

<p>% ls -al myarchive.arc
-rw-rw-r-- 1 stacks0n stacks0n 2112 Oct 23 20:39 myarchive.arc
```</p>

<p>Looking at sanitizeFilename(), file entries begin at offset 0x20 and there is a magic value of &quot;FluXL1sT&quot;. The filenames are RC4 encrypted with the key being the SHA-1 sum of the archive password. Setting a breakpoint in sanitizeFilename() towards the end of the function, we notice a number of files that are simply empty string. It would appear that they are simply cleared out when deleted.</p>

<p>I wonder if we can simply just encrypt a new filename and replace the entry to access the file without having to learn anything else about the file format. Turns out that I struggled with that, but when decrypting blocks in the file noticed my plaintext being displayed. So rather than actually figure out the format, lets just brute force decrypting blocks and see if we get lucky.</p>

<p>```ruby</p>

<h1>!/usr/bin/env ruby</h1>

<p>require 'rc4'
require 'digest/sha1'</p>

<p>f = File.open(&quot;FluxArchiv.arc&quot;, &quot;r&quot;)
success = false</p>

<p>password = &quot;PWF41L&quot;
key = Digest::SHA1.digest(password)
offset = 0</p>

<p>ciphertext = f.read(8)
while offset &lt; f.size
    f.seek(offset)
    ciphertext = f.read(1024)
    dec = RC4.new(key)
    cleartext = dec.decrypt(ciphertext)</p>

<pre><code>if cleartext.match(/^[\w\s]{6}/) and cleartext.match(/key|flag/i)
    puts cleartext
end

offset += 8
</code></pre>

<p>end
```</p>

<h2>Solution</h2>

<p>```bash
% ruby fluxarchiv2.rb
e electron and the switch, the
beauty of the baud.  We make use of a service already existing without paying
for what could be dirt-cheap if it wasn't run by profiteering gluttons, and
you call us criminals.  We explore... and you call us criminals.  We seek
after knowledge... and you call us criminals.  We exist without skin color,
without nationality, without religious bias... and you call us criminals.
You build atomic bombs, you wage wars, you murder, cheat, and lie to us
and try to make us believe it's for our own good, yet we're the criminals.</p>

<p>Yes, I am a criminal.  My crime is that of curiosity.  My crime is
that of judging people by what they say and think, not what they look like.
My crime is that of outsmarting you, something that you will never forgive me
for.</p>

<p>I am a hacker, and this is my manifesto.  You may stop this individual,
but you can't stop us all... after all, we're all alike.</p>

<p>+++The Mentor+++</p>

<p>Flag: D3letinG-1nd3x_F4iL
```</p>

<p><code>D3letinG-1nd3x_F4iL</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2013 - Flux Archive Part 1]]></title>
    <link href="http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-flux-archive-part-1/"/>
    <updated>2013-10-27T15:42:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-flux-archive-part-1</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>These funny humans try to exclude us from the delicious beer of the Oktoberfest! They made up a passcode for everyone who wants to enter the Festzelt. Sadly, our human informant friend could not learn the passcode for us. But he heard a conversation between two drunken humans, that they were using the same passcode for this intercepted archive file. They claimed that the format is is absolutely secure and solves any kind of security issue. It's written by this funny hacker group named FluxFingers. Real jerks if you ask me. Anyway, it seems that the capability of drunken humans to remember things is limited. So they just used a 6 character passcode with only numbers and upper-case letters. So crack this passcode and get our ticket to their delicious german beer!</p>

<p>Here is the challenge: https://ctf.fluxfingers.net/static/downloads/fluxarchiv/hacklu2013<em>archiv</em>challenge1.tar.gz</p>

<h2>Analysis</h2>

<p>Provided with a 64-bit ELF and a data file.</p>

<p>```
stacks0n@ubuntu:~/Desktop$ ./archiv</p>

<p>FluxArchiv - solved security since 2007!
Written by sqall - leading expert in social-kernel-web-reverse-engineering.</p>

<p>Unknown or invalid command.</p>

<p>Usage: ./archiv <command> <archiv> <password> <file>
commands:
-l <archiv> <password> - lists all files in the archiv.
-a <archiv> <password> <file> - adds a file to the archiv (when archiv does not exist create a new archiv).
-x <archiv> <password> <filename> - extracts the given filename from the archiv.
-d <archiv> <password> <filename> - delete the given filename from the archiv.
```</p>

<p>Presumably, we could try to brute force the entire key space (36^6) but that might take a while when trying to execute the program. So let's look into some of the key functions. Tracing backwards from the output of &quot;Given password is not correct&quot; we target verifyArchiv()</p>

<h3>verifyArchiv</h3>

<p>This method reads 0x14 (20) bytes from the archive file starting at offset 0xC (12) which is our target hash to verify that the password is accurate. It starts by grabbing bytes from hash_password (SHA-1 sum of password) out of order, but in a predictable manner. Look at the python code for that order. Then, the byte stream of the hash is run through SHA-1 and compared against the target. Thus, we can brute force the entire key space only running the code necessary to find the target.</p>

<h2>Code</h2>

<p>```python</p>

<h1>!/usr/bin/env python</h1>

<p>import hashlib
import string
import itertools</p>

<p>def bruteforce(charset, maxlength):
    return (''.join(candidate)
        for candidate in itertools.chain.from_iterable(itertools.product(charset, repeat=i)
        for i in range(maxlength, maxlength + 1)))</p>

<p>for attempt in bruteforce(string.digits + string.ascii<em>uppercase, 6):
    hash = hashlib.sha1(attempt).digest()
    hash</em>scramble = hash[0] + hash[7] + hash[14] + hash[1] + hash[8] + hash[15] + hash[2] + hash[9] + hash[16] + hash[3] + hash[10] + hash[17] + hash[4] + hash[11] + hash[18] + hash[5] + hash[12] + hash[19] + hash[6] + hash[13]
    new<em>hash = hashlib.sha1(hash</em>scramble).hexdigest()
    if new_hash == &quot;372942df2712824505d8171f4f0bcb14153d39ba&quot;:
        print &quot;Found passphrase: &quot; + attempt
        break
```</p>

<p>```
stacks0n@ubuntu:~/Desktop$ python fluxarchiv.py 
Found passphrase: PWF41L</p>

<p>stacks0n@ubuntu:~/Desktop$ ./archiv -l FluxArchiv.arc PWF41L</p>

<p>FluxArchiv - solved security since 2007!
Written by sqall - leading expert in social-kernel-web-reverse-engineering.</p>

<h2>Filename:                                               Size in archiv:</h2>

<p>attentionzombie.mp3                                                     22 kB
Did<em>You</em>Know.jpg                                                        139 kB
fluxfingers.png                                                 9 kB
th_oh-noes-everybody-panic.gif                                                  131 kB</p>

<p>stacks0n@ubuntu:~/Desktop$ ls -alh attentionzombie.mp3 Did<em>You</em>Know.jpg fluxfingers.png th<em>oh-noes-everybody-panic.gif 
-rw-rw-r-- 1 stacks0n stacks0n  23K Oct 23 04:30 attentionzombie.mp3
-rw-rw-r-- 1 stacks0n stacks0n 135K Oct 23 04:30 Did</em>You<em>Know.jpg
-rw-rw-r-- 1 stacks0n stacks0n 9.0K Oct 23 04:31 fluxfingers.png
-rw-rw-r-- 1 stacks0n stacks0n 127K Oct 23 04:31 th</em>oh-noes-everybody-panic.gif
```</p>

<p>Nothing stands out as to what the flag might be. Okay, I'm dumb it is the password :)</p>

<h2>Solution</h2>

<p>PWF41L</p>
]]></content>
  </entry>
  
</feed>
